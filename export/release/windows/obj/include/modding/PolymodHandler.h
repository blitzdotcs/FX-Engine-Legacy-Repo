// Generated by Haxe 4.3.1
#ifndef INCLUDED_modding_PolymodHandler
#define INCLUDED_modding_PolymodHandler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(modding,PolymodHandler)

namespace modding{


class HXCPP_CLASS_ATTRIBUTES PolymodHandler_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PolymodHandler_obj OBJ_;
		PolymodHandler_obj();

	public:
		enum { _hx_ClassId = 0x242f5c70 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="modding.PolymodHandler")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"modding.PolymodHandler"); }

		inline static ::hx::ObjectPtr< PolymodHandler_obj > __new() {
			::hx::ObjectPtr< PolymodHandler_obj > __this = new PolymodHandler_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< PolymodHandler_obj > __alloc(::hx::Ctx *_hx_ctx) {
			PolymodHandler_obj *__this = (PolymodHandler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PolymodHandler_obj), false, "modding.PolymodHandler"));
			*(void **)__this = PolymodHandler_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PolymodHandler_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PolymodHandler",94,66,c0,7b); }

		static void __boot();
		static ::String swagMeta;
		static ::Array< ::String > metadataArrays;
		static void loadMods();
		static ::Dynamic loadMods_dyn();

		static void loadModMetadata();
		static ::Dynamic loadModMetadata_dyn();

};

} // end namespace modding

#endif /* INCLUDED_modding_PolymodHandler */ 
