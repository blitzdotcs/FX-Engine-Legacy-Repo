// Generated by Haxe 4.3.1
#ifndef INCLUDED_iconshits_FreePlayIcon
#define INCLUDED_iconshits_FreePlayIcon

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(iconshits,FreePlayIcon)

namespace iconshits{


class HXCPP_CLASS_ATTRIBUTES FreePlayIcon_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef FreePlayIcon_obj OBJ_;
		FreePlayIcon_obj();

	public:
		enum { _hx_ClassId = 0x19a3b3af };

		void __construct(::String __o__hx_char,::hx::Null< bool >  __o_isPlayer);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iconshits.FreePlayIcon")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"iconshits.FreePlayIcon"); }
		static ::hx::ObjectPtr< FreePlayIcon_obj > __new(::String __o__hx_char,::hx::Null< bool >  __o_isPlayer);
		static ::hx::ObjectPtr< FreePlayIcon_obj > __alloc(::hx::Ctx *_hx_ctx,::String __o__hx_char,::hx::Null< bool >  __o_isPlayer);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FreePlayIcon_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FreePlayIcon",79,7c,7b,83); }

		 ::flixel::FlxSprite sprTracker;
		void update(Float elapsed);

};

} // end namespace iconshits

#endif /* INCLUDED_iconshits_FreePlayIcon */ 
