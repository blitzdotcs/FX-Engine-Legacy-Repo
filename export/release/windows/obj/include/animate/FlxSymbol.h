// Generated by Haxe 4.3.1
#ifndef INCLUDED_animate_FlxSymbol
#define INCLUDED_animate_FlxSymbol

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(animate,FlxSymbol)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace animate{


class HXCPP_CLASS_ATTRIBUTES FlxSymbol_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef FlxSymbol_obj OBJ_;
		FlxSymbol_obj();

	public:
		enum { _hx_ClassId = 0x39c55849 };

		void __construct(Float x,Float y, ::Dynamic coolParsed);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="animate.FlxSymbol")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"animate.FlxSymbol"); }
		static ::hx::ObjectPtr< FlxSymbol_obj > __new(Float x,Float y, ::Dynamic coolParsed);
		static ::hx::ObjectPtr< FlxSymbol_obj > __alloc(::hx::Ctx *_hx_ctx,Float x,Float y, ::Dynamic coolParsed);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxSymbol_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxSymbol",4a,a9,cc,70); }

		static void __boot();
		static  ::haxe::ds::IntMap nestedShit;
		 ::Dynamic coolParse;
		::Array< Float > oldMatrix;
		bool hasFrameByPass;
		 ::haxe::ds::StringMap symbolAtlasShit;
		virtual void draw();

		 ::haxe::ds::StringMap symbolMap;
		::Array< ::Dynamic> drawQueue;
		int daFrame;
		int nestDepth;
		 ::openfl::geom::Matrix transformMatrix;
		void renderFrame( ::Dynamic TL, ::Dynamic coolParsed, ::Dynamic isMainLoop);
		::Dynamic renderFrame_dyn();

		void setDaMap( ::animate::FlxSymbol spr);
		::Dynamic setDaMap_dyn();

		void changeFrame(::hx::Null< int >  frameChange);
		::Dynamic changeFrame_dyn();

		 ::haxe::ds::StringMap parseSymbolDictionary( ::Dynamic coolParsed);
		::Dynamic parseSymbolDictionary_dyn();

		void drawComplex( ::flixel::FlxCamera camera);

		 ::openfl::geom::Matrix _skewMatrix;
		bool matrixExposed;
		 ::flixel::math::FlxPoint skew;
		void updateSkewMatrix();
		::Dynamic updateSkewMatrix_dyn();

};

} // end namespace animate

#endif /* INCLUDED_animate_FlxSymbol */ 
