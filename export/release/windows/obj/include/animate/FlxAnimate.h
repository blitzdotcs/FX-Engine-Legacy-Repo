// Generated by Haxe 4.3.1
#ifndef INCLUDED_animate_FlxAnimate
#define INCLUDED_animate_FlxAnimate

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_animate_FlxSymbol
#include <animate/FlxSymbol.h>
#endif
HX_DECLARE_CLASS1(animate,FlxAnimate)
HX_DECLARE_CLASS1(animate,FlxSymbol)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxAtlasFrames)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFramesCollection)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)

namespace animate{


class HXCPP_CLASS_ATTRIBUTES FlxAnimate_obj : public  ::animate::FlxSymbol_obj
{
	public:
		typedef  ::animate::FlxSymbol_obj super;
		typedef FlxAnimate_obj OBJ_;
		FlxAnimate_obj();

	public:
		enum { _hx_ClassId = 0x68ae11ac };

		void __construct(Float x,Float y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="animate.FlxAnimate")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"animate.FlxAnimate"); }
		static ::hx::ObjectPtr< FlxAnimate_obj > __new(Float x,Float y);
		static ::hx::ObjectPtr< FlxAnimate_obj > __alloc(::hx::Ctx *_hx_ctx,Float x,Float y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxAnimate_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxAnimate",6f,94,78,a9); }

		static  ::flixel::graphics::frames::FlxAtlasFrames fromAnimate( ::Dynamic Source,::String Description);
		static ::Dynamic fromAnimate_dyn();

		bool loadedQueue;
		::Array< ::Dynamic> swagFrames;
		void draw();

		int curFrame;
		bool playingAnim;
		Float frameTickTypeShit;
		int animFrameRate;
		void update(Float elapsed);

};

} // end namespace animate

#endif /* INCLUDED_animate_FlxAnimate */ 
