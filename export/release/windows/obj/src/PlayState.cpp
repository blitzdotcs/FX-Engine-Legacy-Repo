// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_AnimationDebug
#include <AnimationDebug.h>
#endif
#ifndef INCLUDED_BGSprite
#include <BGSprite.h>
#endif
#ifndef INCLUDED_BackgroundDancer
#include <BackgroundDancer.h>
#endif
#ifndef INCLUDED_BackgroundGirls
#include <BackgroundGirls.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_CharacterSelectState
#include <CharacterSelectState.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_GitarooPause
#include <GitarooPause.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_NoteSplash
#include <NoteSplash.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_WiggleEffect
#include <WiggleEffect.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveDirection
#include <flixel/addons/effects/chainable/FlxWaveDirection.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveEffect
#include <flixel/addons/effects/chainable/FlxWaveEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxWaveMode
#include <flixel/addons/effects/chainable/FlxWaveMode.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ShaderFilter
#include <openfl/filters/ShaderFilter.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_scripting_Script
#include <scripting/Script.h>
#endif
#ifndef INCLUDED_shaders_ChromaticAberrationShader
#include <shaders/ChromaticAberrationShader.h>
#endif
#ifndef INCLUDED_shaders_ScanlineShader
#include <shaders/ScanlineShader.h>
#endif
#ifndef INCLUDED_shaders_VHSShader
#include <shaders/VHSShader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_68_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",68,0xb30d7781)
static const ::String _hx_array_data_46c2835d_1[] = {
	HX_("blah blah blah",d1,92,1f,27),HX_("coolswag",d3,7d,92,03),
};
static const bool _hx_array_data_46c2835d_2[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_198_add,"PlayState","add",0xf8b5b890,"PlayState.add","PlayState.hx",198,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_208_addObject,"PlayState","addObject",0x09b6776f,"PlayState.addObject","PlayState.hx",208,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_209_removeObject,"PlayState","removeObject",0x9fa28dd4,"PlayState.removeObject","PlayState.hx",209,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_212_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",212,0xb30d7781)
static const int _hx_array_data_46c2835d_14[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,(int)18,
};
static const ::String _hx_array_data_46c2835d_15[] = {
	HX_("SmokeBlurLeft",bd,78,c1,fc),
};
static const ::String _hx_array_data_46c2835d_16[] = {
	HX_("SmokeRight",0d,9e,e3,35),
};
static const ::String _hx_array_data_46c2835d_17[] = {
	HX_("watchtower gradient color",39,8f,02,81),
};
static const ::String _hx_array_data_46c2835d_18[] = {
	HX_("BG tank w lighting",b0,17,6b,18),
};
static const ::String _hx_array_data_46c2835d_19[] = {
	HX_("fg",41,59,00,00),
};
static const ::String _hx_array_data_46c2835d_20[] = {
	HX_("fg",41,59,00,00),
};
static const ::String _hx_array_data_46c2835d_21[] = {
	HX_("foreground",c3,18,ef,10),
};
static const ::String _hx_array_data_46c2835d_22[] = {
	HX_("fg",41,59,00,00),
};
static const ::String _hx_array_data_46c2835d_23[] = {
	HX_("fg",41,59,00,00),
};
static const ::String _hx_array_data_46c2835d_24[] = {
	HX_("fg",41,59,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1027_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1027,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1020_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1020,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1011_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1011,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1082_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1082,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1100_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1100,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1115_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1115,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1110_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1110,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1120_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1120,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1055_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1055,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1156_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1156,0xb30d7781)
static const ::String _hx_array_data_46c2835d_36[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_37[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
static const ::String _hx_array_data_46c2835d_38[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1197_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1197,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1214_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1214,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1233_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1233,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1142_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1142,0xb30d7781)
static const int _hx_array_data_46c2835d_43[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1250_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",1250,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1274_updateLoop,"PlayState","updateLoop",0x8c85067e,"PlayState.updateLoop","PlayState.hx",1274,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1271_updateLoop,"PlayState","updateLoop",0x8c85067e,"PlayState.updateLoop","PlayState.hx",1271,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1295_generateSong,"PlayState","generateSong",0x3a61615b,"PlayState.generateSong","PlayState.hx",1295,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1389_sortByShit,"PlayState","sortByShit",0xfa9f74a6,"PlayState.sortByShit","PlayState.hx",1389,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1394_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1394,0xb30d7781)
static const int _hx_array_data_46c2835d_58[] = {
	(int)6,
};
static const int _hx_array_data_46c2835d_59[] = {
	(int)7,
};
static const int _hx_array_data_46c2835d_60[] = {
	(int)5,
};
static const int _hx_array_data_46c2835d_61[] = {
	(int)4,
};
static const int _hx_array_data_46c2835d_62[] = {
	(int)0,
};
static const int _hx_array_data_46c2835d_63[] = {
	(int)4,(int)8,
};
static const int _hx_array_data_46c2835d_64[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_46c2835d_65[] = {
	(int)1,
};
static const int _hx_array_data_46c2835d_66[] = {
	(int)5,(int)9,
};
static const int _hx_array_data_46c2835d_67[] = {
	(int)13,(int)17,
};
static const int _hx_array_data_46c2835d_68[] = {
	(int)2,
};
static const int _hx_array_data_46c2835d_69[] = {
	(int)6,(int)10,
};
static const int _hx_array_data_46c2835d_70[] = {
	(int)14,(int)18,
};
static const int _hx_array_data_46c2835d_71[] = {
	(int)3,
};
static const int _hx_array_data_46c2835d_72[] = {
	(int)7,(int)11,
};
static const int _hx_array_data_46c2835d_73[] = {
	(int)15,(int)19,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1541_tweenCamIn,"PlayState","tweenCamIn",0x8478acda,"PlayState.tweenCamIn","PlayState.hx",1541,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1545_openSubState,"PlayState","openSubState",0x527dda0c,"PlayState.openSubState","PlayState.hx",1545,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1565_closeSubState,"PlayState","closeSubState",0xb7c1df78,"PlayState.closeSubState","PlayState.hx",1565,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1594_onFocus,"PlayState","onFocus",0xe5082828,"PlayState.onFocus","PlayState.hx",1594,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1609_onFocusLost,"PlayState","onFocusLost",0x4ad4322c,"PlayState.onFocusLost","PlayState.hx",1609,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1621_resyncVocals,"PlayState","resyncVocals",0x86228a3d,"PlayState.resyncVocals","PlayState.hx",1621,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1641_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",1641,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1955_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",1955,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2009_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2009,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2070_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2070,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2097_sustain2,"PlayState","sustain2",0x67af9960,"PlayState.sustain2","PlayState.hx",2097,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2113_sustain2,"PlayState","sustain2",0x67af9960,"PlayState.sustain2","PlayState.hx",2113,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2126_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",2126,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2355_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2355,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2200_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2200,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2334_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",2334,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2536_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2536,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2550_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2550,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2368_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2368,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2407_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2407,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2424_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2424,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2464_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",2464,0xb30d7781)
static const bool _hx_array_data_46c2835d_106[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2568_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",2568,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2597_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",2597,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2637_noteCheck,"PlayState","noteCheck",0xbf96a725,"PlayState.noteCheck","PlayState.hx",2637,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2646_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",2646,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2677_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",2677,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2698_resetFastCar,"PlayState","resetFastCar",0x6b33ac7a,"PlayState.resetFastCar","PlayState.hx",2698,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2713_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",2713,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2706_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",2706,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2719_moveTank,"PlayState","moveTank",0x9e71adcc,"PlayState.moveTank","PlayState.hx",2719,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2744_trainStart,"PlayState","trainStart",0x6a3d10eb,"PlayState.trainStart","PlayState.hx",2744,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2753_updateTrainPos,"PlayState","updateTrainPos",0x957683c6,"PlayState.updateTrainPos","PlayState.hx",2753,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2779_trainReset,"PlayState","trainReset",0xccf9e658,"PlayState.trainReset","PlayState.hx",2779,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2791_lightningStrikeShit,"PlayState","lightningStrikeShit",0xdc0ca52b,"PlayState.lightningStrikeShit","PlayState.hx",2791,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2803_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",2803,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2815_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",2815,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2824_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",2824,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2909_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",2909,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2922_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",2922,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_70_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",70,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_72_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",72,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_73_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",73,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_74_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",74,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_75_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",75,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_76_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",76,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_77_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",77,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_78_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",78,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_79_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",79,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_81_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",81,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_83_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",83,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_113_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",113,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_114_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",114,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_115_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",115,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_181_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",181,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_183_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",183,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_190_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",190,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_68_new)
HXLINE(2944)		this->curLight = 0;
HXLINE(2812)		this->lightningOffset = 8;
HXLINE(2811)		this->lightningStrikeBeat = 0;
HXLINE(2750)		this->startedMoving = false;
HXLINE(2741)		this->trainCooldown = 0;
HXLINE(2740)		this->trainFinishing = false;
HXLINE(2739)		this->trainCars = 8;
HXLINE(2737)		this->trainFrameTiming = ((Float)0);
HXLINE(2736)		this->trainMoving = false;
HXLINE(2734)		this->tankX = ((Float)400);
HXLINE(2733)		this->tankSpeed = ::flixel::FlxG_obj::random->_hx_float(5,7,null());
HXLINE(2732)		this->tankAngle = ( (Float)(::flixel::FlxG_obj::random->_hx_int(-90,45,null())) );
HXLINE(2731)		this->tankMoving = false;
HXLINE(2730)		this->tankResetShit = false;
HXLINE(2695)		this->fastCarCanDrive = true;
HXLINE(2197)		this->endingSong = false;
HXLINE(1638)		this->stopUpdate = false;
HXLINE(1636)		this->canPause = true;
HXLINE(1635)		this->startedCountdown = false;
HXLINE(1634)		this->paused = false;
HXLINE(1292)		this->debugNum = 0;
HXLINE(1247)		this->songTime = ((Float)0);
HXLINE(1246)		this->lastReportedPlayheadPosition = 0;
HXLINE(1245)		this->previousFrameTime = 0;
HXLINE(1139)		this->perfectMode = false;
HXLINE( 195)		this->inCutscene = false;
HXLINE( 187)		this->canDie = true;
HXLINE( 185)		this->defaultCamZoom = ((Float)1.05);
HXLINE( 176)		this->misses = 0;
HXLINE( 175)		this->songScore = 0;
HXLINE( 174)		this->talking = true;
HXLINE( 166)		this->wiggleShit =  ::WiggleEffect_obj::__alloc( HX_CTX );
HXLINE( 149)		this->isHalloween = false;
HXLINE( 146)		this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_1,2);
HXLINE( 138)		this->botplaySine = ((Float)0);
HXLINE( 136)		this->cpuControlled = false;
HXLINE( 135)		this->dancingLeft = false;
HXLINE( 132)		this->startingSong = false;
HXLINE( 131)		this->generatedMusic = false;
HXLINE( 129)		this->songPositionBar = ((Float)0);
HXLINE( 124)		this->combo = 0;
HXLINE( 123)		this->health = ((Float)1);
HXLINE( 122)		this->gfSpeed = 1;
HXLINE( 120)		this->curSong = HX_("",00,00,00,00);
HXLINE( 119)		this->camZooming = false;
HXLINE( 117)		this->strumming2 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_2,4);
HXLINE( 107)		this->curSection = 0;
HXLINE( 104)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  94)		this->detailsPausedText = HX_("",00,00,00,00);
HXLINE(  93)		this->detailsText = HX_("",00,00,00,00);
HXLINE(  92)		this->iconRPC = HX_("",00,00,00,00);
HXLINE(  91)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE(  87)		this->songLength = ((Float)0);
HXLINE(  85)		this->halloweenLevel = false;
HXLINE(  68)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

 ::Dynamic PlayState_obj::add( ::Dynamic _tmp_object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_198_add)
HXLINE( 199)		 ::flixel::FlxBasic object = ( ( ::flixel::FlxBasic)(_tmp_object) );
HXDLIN( 199)		if (::Reflect_obj::hasField(object,HX_("antialiasing",f4,16,b3,48))) {
HXLINE( 201)			::Reflect_obj::setField(object,HX_("antialiasing",f4,16,b3,48),false);
            		}
HXLINE( 204)		return this->super::add(object);
            	}


void PlayState_obj::addObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_208_addObject)
HXDLIN( 208)		this->add(object);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addObject,(void))

void PlayState_obj::removeObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_209_removeObject)
HXDLIN( 209)		this->remove(object,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,removeObject,(void))

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_212_create)
HXDLIN( 212)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 213)		::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 215)		::scripting::Script_obj::onCreate();
HXLINE( 217)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 218)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 218)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 222)		switch((int)(::PlayState_obj::storyDifficulty)){
            			case (int)0: {
HXLINE( 225)				this->storyDifficultyText = HX_("Easy",22,b8,e5,2d);
            			}
            			break;
            			case (int)1: {
HXLINE( 227)				this->storyDifficultyText = HX_("Normal",47,e6,fd,64);
            			}
            			break;
            			case (int)2: {
HXLINE( 229)				this->storyDifficultyText = HX_("Hard",0b,5b,e1,2f);
            			}
            			break;
            		}
HXLINE( 232)		this->iconRPC = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
HXLINE( 235)		::String _hx_switch_0 = this->iconRPC;
            		if (  (_hx_switch_0==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE( 242)			this->iconRPC = HX_("mom",cb,16,53,00);
HXDLIN( 242)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 240)			this->iconRPC = HX_("monster",1a,54,b0,b8);
HXDLIN( 240)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 238)			this->iconRPC = HX_("senpai",3c,df,8d,6b);
HXDLIN( 238)			goto _hx_goto_6;
            		}
            		_hx_goto_6:;
HXLINE( 246)		if (::PlayState_obj::isStoryMode) {
HXLINE( 248)			this->detailsText = (HX_("Story Mode: Week ",38,e3,aa,dd) + ::PlayState_obj::storyWeek);
            		}
            		else {
HXLINE( 252)			this->detailsText = HX_("Freeplay",c0,4c,38,fc);
            		}
HXLINE( 256)		this->detailsPausedText = (HX_("Paused - ",65,2f,92,fd) + this->detailsText);
HXLINE( 259)		::DiscordClient_obj::changePresence(( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),(((HX_("Score: ",58,c6,eb,45) + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + this->misses),this->iconRPC,null(),null());
HXLINE( 263)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 264)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 265)		{
HXLINE( 265)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN( 265)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN( 265)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN( 265)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE( 267)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 268)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 272)		this->grpNoteSplashes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 274)		 ::NoteSplash noteSplash =  ::NoteSplash_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),0);
HXLINE( 275)		this->grpNoteSplashes->add(noteSplash).StaticCast<  ::NoteSplash >();
HXLINE( 276)		noteSplash->set_alpha(((Float)0.1));
HXLINE( 278)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 280)		this->persistentUpdate = true;
HXLINE( 281)		this->persistentDraw = true;
HXLINE( 283)		if (::hx::IsNull( ::PlayState_obj::SONG )) {
HXLINE( 284)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(HX_("tutorial",9e,8f,b5,82),null());
            		}
HXLINE( 286)		::Conductor_obj::mapBPMChanges(::PlayState_obj::SONG);
HXLINE( 287)		::Conductor_obj::changeBPM(( (int)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 289)		this->foregroundSprites =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 291)		::String _hx_switch_1 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
            		if (  (_hx_switch_1==HX_("blammed",96,02,00,3c)) ){
HXLINE( 310)			::String library = null();
HXDLIN( 310)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("blammed/blammed-dialogue",c8,df,c4,1d)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXDLIN( 310)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("bopeebo",b0,01,c5,0c)) ){
HXLINE( 296)			::String library1 = null();
HXDLIN( 296)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("bopeebo/bopeebo-dialogue",14,91,4a,45)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXDLIN( 296)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("cocoa",09,9d,55,4a)) ){
HXLINE( 318)			::String library2 = null();
HXDLIN( 318)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("cocoa/cocoa-dialogue",a2,65,97,ee)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library2));
HXDLIN( 318)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("dadbattle",bf,6a,a9,a6)) ){
HXLINE( 300)			::String library3 = null();
HXDLIN( 300)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("dadbattle/dadbattle-dialogue",36,c8,0a,8b)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library3));
HXDLIN( 300)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("eggnog",61,04,ba,f4)) ){
HXLINE( 320)			::String library4 = null();
HXDLIN( 320)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("eggnog/eggnog-dialogue",d6,ac,5c,ee)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library4));
HXDLIN( 320)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("fresh",6e,86,86,06)) ){
HXLINE( 298)			::String library5 = null();
HXDLIN( 298)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("fresh/fresh-dialogue",d8,17,20,b6)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library5));
HXDLIN( 298)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("high",62,37,0e,45)) ){
HXLINE( 314)			::String library6 = null();
HXDLIN( 314)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("high/high-dialogue",f6,5b,7e,98)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library6));
HXDLIN( 314)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("milf",d6,4c,5c,48)) ){
HXLINE( 316)			::String library7 = null();
HXDLIN( 316)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("milf/milf-dialogue",76,30,f1,0e)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library7));
HXDLIN( 316)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("philly",28,77,5e,ef)) ){
HXLINE( 308)			::String library8 = null();
HXDLIN( 308)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("philly/philly-dialogue",f6,d9,2d,04)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library8));
HXDLIN( 308)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 306)			::String library9 = null();
HXDLIN( 306)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("pico/pico-dialogue",d6,12,52,8e)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library9));
HXDLIN( 306)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("roses",04,6c,64,ed)) ){
HXLINE( 326)			::String library10 = null();
HXDLIN( 326)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("roses/rosesDialogue",b1,32,46,e4)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library10));
HXDLIN( 326)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("satin-panties",fe,64,00,d1)) ){
HXLINE( 312)			::String library11 = null();
HXDLIN( 312)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("satin-panties/satin-panties-dialogue",b8,03,ff,2f)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library11));
HXDLIN( 312)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 324)			::String library12 = null();
HXDLIN( 324)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("senpai/senpaiDialogue",27,5d,40,15)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library12));
HXDLIN( 324)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("south",0d,92,cc,80)) ){
HXLINE( 304)			::String library13 = null();
HXDLIN( 304)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("south/south-dialogue",9a,ff,a8,31)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library13));
HXDLIN( 304)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("spookeez",0c,7a,2b,75)) ){
HXLINE( 302)			::String library14 = null();
HXDLIN( 302)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("spookeez/spookeez-dialogue",b6,4e,9e,3e)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library14));
HXDLIN( 302)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE( 328)			::String library15 = null();
HXDLIN( 328)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("thorns/thornsDialogue",27,29,d3,ea)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library15));
HXDLIN( 328)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("tutorial",9e,8f,b5,82)) ){
HXLINE( 294)			::String library16 = null();
HXDLIN( 294)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("tutorial/tutorial-dialogue",f6,d8,4a,22)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library16));
HXDLIN( 294)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("winter-horrorland",9d,39,f4,1e)) ){
HXLINE( 322)			::String library17 = null();
HXDLIN( 322)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("winter-horrorland/winter-horrorland-dialogue",7a,a3,f3,22)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library17));
HXDLIN( 322)			goto _hx_goto_7;
            		}
            		_hx_goto_7:;
HXLINE( 332)		if (::PlayState_obj::isStoryMode) {
HXLINE( 334)			this->detailsText = (HX_("Story Mode: Week ",38,e3,aa,dd) + ::PlayState_obj::storyWeek);
            		}
            		else {
HXLINE( 338)			this->detailsText = HX_("Freeplay Mode!",de,7b,83,f0);
            		}
HXLINE( 341)		::String _hx_switch_2 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		if (  (_hx_switch_2==HX_("halloween",8d,bb,38,50)) ){
HXLINE( 344)			::PlayState_obj::curStage = HX_("spooky",eb,bd,9e,c1);
HXLINE( 345)			this->halloweenLevel = true;
HXLINE( 347)			::String hallowTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("halloween_bg",77,a6,29,9b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week2",be,95,be,c7));
HXDLIN( 347)			 ::flixel::graphics::frames::FlxAtlasFrames hallowTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(hallowTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("halloween_bg",77,a6,29,9b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week2",be,95,be,c7)));
HXLINE( 349)			this->halloweenBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-100,null());
HXLINE( 350)			this->halloweenBG->set_frames(hallowTex1);
HXLINE( 351)			this->halloweenBG->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("halloweem bg0",37,fc,3c,6c),null(),null(),null(),null());
HXLINE( 352)			this->halloweenBG->animation->addByPrefix(HX_("lightning",0a,39,4a,d7),HX_("halloweem bg lightning strike",af,54,50,5b),24,false,null(),null());
HXLINE( 353)			this->halloweenBG->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 354)			this->halloweenBG->set_antialiasing(true);
HXLINE( 355)			this->add(this->halloweenBG);
HXLINE( 357)			this->isHalloween = true;
HXLINE( 343)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_2==HX_("limo",1f,17,b3,47)) ){
HXLINE( 399)			::PlayState_obj::curStage = HX_("limo",1f,17,b3,47);
HXLINE( 400)			this->defaultCamZoom = ((Float)0.90);
HXLINE( 402)			 ::flixel::FlxSprite skyBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,-50,null());
HXDLIN( 402)			 ::flixel::FlxSprite skyBG1 = skyBG->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoSunset",45,de,4f,6e)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 403)			skyBG1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 404)			this->add(skyBG1);
HXLINE( 406)			 ::flixel::FlxSprite bgLimo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,480,null());
HXLINE( 407)			::String _hx_tmp2 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/bgLimo",b4,c7,45,2c)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7));
HXDLIN( 407)			bgLimo->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp2,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/bgLimo",b4,c7,45,2c)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week4",c0,95,be,c7))));
HXLINE( 408)			bgLimo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("background limo pink",65,40,fe,9c),24,null(),null(),null());
HXLINE( 409)			bgLimo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 410)			bgLimo->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 411)			this->add(bgLimo);
HXLINE( 413)			this->grpLimoDancers =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 414)			this->add(this->grpLimoDancers);
HXLINE( 416)			{
HXLINE( 417)				{
HXLINE( 418)					 ::BackgroundDancer dancer =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(130) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 419)					dancer->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 420)					this->grpLimoDancers->add(dancer).StaticCast<  ::BackgroundDancer >();
            				}
HXLINE( 417)				{
HXLINE( 418)					 ::BackgroundDancer dancer1 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(500) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 419)					dancer1->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 420)					this->grpLimoDancers->add(dancer1).StaticCast<  ::BackgroundDancer >();
            				}
HXLINE( 417)				{
HXLINE( 418)					 ::BackgroundDancer dancer2 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(870) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 419)					dancer2->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 420)					this->grpLimoDancers->add(dancer2).StaticCast<  ::BackgroundDancer >();
            				}
HXLINE( 417)				{
HXLINE( 418)					 ::BackgroundDancer dancer3 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1240) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 419)					dancer3->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 420)					this->grpLimoDancers->add(dancer3).StaticCast<  ::BackgroundDancer >();
            				}
HXLINE( 417)				{
HXLINE( 418)					 ::BackgroundDancer dancer4 =  ::BackgroundDancer_obj::__alloc( HX_CTX ,( (Float)(1610) ),(bgLimo->y - ( (Float)(400) )));
HXLINE( 419)					dancer4->scrollFactor->set(((Float)0.4),((Float)0.4));
HXLINE( 420)					this->grpLimoDancers->add(dancer4).StaticCast<  ::BackgroundDancer >();
            				}
            			}
HXLINE( 423)			 ::flixel::FlxSprite overlayShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-600,null());
HXDLIN( 423)			 ::flixel::FlxSprite overlayShit1 = overlayShit->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoOverlay",01,f0,58,a8)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 424)			overlayShit1->set_alpha(((Float)0.5));
HXLINE( 433)			::String limoTex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoDrive",3b,67,64,e6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7));
HXDLIN( 433)			 ::flixel::graphics::frames::FlxAtlasFrames limoTex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(limoTex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/limoDrive",3b,67,64,e6)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week4",c0,95,be,c7)));
HXLINE( 435)			this->limo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-120,550,null());
HXLINE( 436)			this->limo->set_frames(limoTex1);
HXLINE( 437)			this->limo->animation->addByPrefix(HX_("drive",0a,69,bc,df),HX_("Limo stage",1d,b3,df,4c),24,null(),null(),null());
HXLINE( 438)			this->limo->animation->play(HX_("drive",0a,69,bc,df),null(),null(),null());
HXLINE( 439)			this->limo->set_antialiasing(true);
HXLINE( 441)			 ::flixel::FlxSprite _hx_tmp3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,160,null());
HXDLIN( 441)			this->fastCar = _hx_tmp3->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("limo/fastCarLol",c1,b0,ed,94)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week4",c0,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 398)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_2==HX_("mall",d4,3a,56,48)) ){
HXLINE( 444)			::PlayState_obj::curStage = HX_("mall",d4,3a,56,48);
HXLINE( 446)			this->defaultCamZoom = ((Float)0.80);
HXLINE( 448)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1000,-500,null());
HXDLIN( 448)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bgWalls",57,9f,1b,51)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 449)			bg1->set_antialiasing(true);
HXLINE( 450)			bg1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 451)			bg1->set_active(false);
HXLINE( 452)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)0.8))),null());
HXLINE( 453)			bg1->updateHitbox();
HXLINE( 454)			this->add(bg1);
HXLINE( 456)			this->upperBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-240,-90,null());
HXLINE( 457)			 ::flixel::FlxSprite _hx_tmp4 = this->upperBoppers;
HXDLIN( 457)			::String _hx_tmp5 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 457)			_hx_tmp4->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp5,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/upperBop",2e,2f,6d,ac)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 458)			this->upperBoppers->animation->addByPrefix(HX_("bop",03,be,4a,00),HX_("Upper Crowd Bob",a4,72,cf,77),24,false,null(),null());
HXLINE( 459)			this->upperBoppers->set_antialiasing(true);
HXLINE( 460)			this->upperBoppers->scrollFactor->set(((Float)0.33),((Float)0.33));
HXLINE( 461)			 ::flixel::FlxSprite _hx_tmp6 = this->upperBoppers;
HXDLIN( 461)			_hx_tmp6->setGraphicSize(::Std_obj::_hx_int((this->upperBoppers->get_width() * ((Float)0.85))),null());
HXLINE( 462)			this->upperBoppers->updateHitbox();
HXLINE( 463)			this->add(this->upperBoppers);
HXLINE( 465)			 ::flixel::FlxSprite bgEscalator =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-1100,-600,null());
HXDLIN( 465)			 ::flixel::FlxSprite bgEscalator1 = bgEscalator->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bgEscalator",64,1f,c0,d5)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 466)			bgEscalator1->set_antialiasing(true);
HXLINE( 467)			bgEscalator1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 468)			bgEscalator1->set_active(false);
HXLINE( 469)			bgEscalator1->setGraphicSize(::Std_obj::_hx_int((bgEscalator1->get_width() * ((Float)0.9))),null());
HXLINE( 470)			bgEscalator1->updateHitbox();
HXLINE( 471)			this->add(bgEscalator1);
HXLINE( 473)			 ::flixel::FlxSprite tree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,370,-250,null());
HXDLIN( 473)			 ::flixel::FlxSprite tree1 = tree->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/christmasTree",73,57,6d,7b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 474)			tree1->set_antialiasing(true);
HXLINE( 475)			tree1->scrollFactor->set(((Float)0.40),((Float)0.40));
HXLINE( 476)			this->add(tree1);
HXLINE( 478)			this->bottomBoppers =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-300,140,null());
HXLINE( 479)			 ::flixel::FlxSprite _hx_tmp7 = this->bottomBoppers;
HXDLIN( 479)			::String _hx_tmp8 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 479)			_hx_tmp7->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp8,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/bottomBop",cb,69,c5,59)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 480)			this->bottomBoppers->animation->addByPrefix(HX_("bop",03,be,4a,00),HX_("Bottom Level Boppers",c8,41,25,54),24,false,null(),null());
HXLINE( 481)			this->bottomBoppers->set_antialiasing(true);
HXLINE( 482)			this->bottomBoppers->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 483)			 ::flixel::FlxSprite _hx_tmp9 = this->bottomBoppers;
HXDLIN( 483)			_hx_tmp9->setGraphicSize(::Std_obj::_hx_int(this->bottomBoppers->get_width()),null());
HXLINE( 484)			this->bottomBoppers->updateHitbox();
HXLINE( 485)			this->add(this->bottomBoppers);
HXLINE( 487)			 ::flixel::FlxSprite fgSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,700,null());
HXDLIN( 487)			 ::flixel::FlxSprite fgSnow1 = fgSnow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/fgSnow",91,40,e7,37)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 488)			fgSnow1->set_active(false);
HXLINE( 489)			fgSnow1->set_antialiasing(true);
HXLINE( 490)			this->add(fgSnow1);
HXLINE( 492)			this->santa =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-840,150,null());
HXLINE( 493)			 ::flixel::FlxSprite _hx_tmp10 = this->santa;
HXDLIN( 493)			::String _hx_tmp11 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/santa",00,86,f4,2d)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7));
HXDLIN( 493)			_hx_tmp10->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp11,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/santa",00,86,f4,2d)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week5",c1,95,be,c7))));
HXLINE( 494)			this->santa->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("santa idle in fear",72,07,31,fd),24,false,null(),null());
HXLINE( 495)			this->santa->set_antialiasing(true);
HXLINE( 496)			this->add(this->santa);
HXLINE( 443)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_2==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 498)			::PlayState_obj::curStage = HX_("mallEvil",88,d3,e3,a7);
HXLINE( 500)			 ::flixel::FlxSprite bg2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-400,-500,null());
HXDLIN( 500)			 ::flixel::FlxSprite bg3 = bg2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilBG",86,9d,17,83)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 501)			bg3->set_antialiasing(true);
HXLINE( 502)			bg3->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 503)			bg3->set_active(false);
HXLINE( 504)			bg3->setGraphicSize(::Std_obj::_hx_int((bg3->get_width() * ((Float)0.8))),null());
HXLINE( 505)			bg3->updateHitbox();
HXLINE( 506)			this->add(bg3);
HXLINE( 508)			 ::flixel::FlxSprite evilTree =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,300,-300,null());
HXDLIN( 508)			 ::flixel::FlxSprite evilTree1 = evilTree->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilTree",7f,5b,65,3a)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 509)			evilTree1->set_antialiasing(true);
HXLINE( 510)			evilTree1->scrollFactor->set(((Float)0.2),((Float)0.2));
HXLINE( 511)			this->add(evilTree1);
HXLINE( 513)			 ::flixel::FlxSprite evilSnow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,700,null());
HXDLIN( 513)			 ::flixel::FlxSprite evilSnow1 = evilSnow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("christmas/evilSnow",a4,24,b9,39)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week5",c1,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 514)			evilSnow1->set_antialiasing(true);
HXLINE( 515)			this->add(evilSnow1);
HXLINE( 497)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_2==HX_("philly",28,77,5e,ef)) ){
HXLINE( 359)			::PlayState_obj::curStage = HX_("philly",28,77,5e,ef);
HXLINE( 361)			 ::flixel::FlxSprite bg4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 361)			 ::flixel::FlxSprite bg5 = bg4->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/sky",3a,d3,d5,cc)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 362)			bg5->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 363)			this->add(bg5);
HXLINE( 365)			 ::flixel::FlxSprite city =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-10,null(),null());
HXDLIN( 365)			 ::flixel::FlxSprite city1 = city->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/city",32,0d,ae,63)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 366)			city1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 367)			city1->setGraphicSize(::Std_obj::_hx_int((city1->get_width() * ((Float)0.85))),null());
HXLINE( 368)			city1->updateHitbox();
HXLINE( 369)			this->add(city1);
HXLINE( 371)			this->phillyCityLights =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 372)			this->add(this->phillyCityLights);
HXLINE( 374)			{
HXLINE( 375)				{
HXLINE( 376)					 ::flixel::FlxSprite light =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 376)					 ::flixel::FlxSprite light1 = light->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 377)					light1->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 378)					light1->set_visible(false);
HXLINE( 379)					light1->setGraphicSize(::Std_obj::_hx_int((light1->get_width() * ((Float)0.85))),null());
HXLINE( 380)					light1->updateHitbox();
HXLINE( 381)					light1->set_antialiasing(true);
HXLINE( 382)					this->phillyCityLights->add(light1).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 375)				{
HXLINE( 376)					 ::flixel::FlxSprite light2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 376)					 ::flixel::FlxSprite light3 = light2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 377)					light3->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 378)					light3->set_visible(false);
HXLINE( 379)					light3->setGraphicSize(::Std_obj::_hx_int((light3->get_width() * ((Float)0.85))),null());
HXLINE( 380)					light3->updateHitbox();
HXLINE( 381)					light3->set_antialiasing(true);
HXLINE( 382)					this->phillyCityLights->add(light3).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 375)				{
HXLINE( 376)					 ::flixel::FlxSprite light4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 376)					 ::flixel::FlxSprite light5 = light4->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 377)					light5->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 378)					light5->set_visible(false);
HXLINE( 379)					light5->setGraphicSize(::Std_obj::_hx_int((light5->get_width() * ((Float)0.85))),null());
HXLINE( 380)					light5->updateHitbox();
HXLINE( 381)					light5->set_antialiasing(true);
HXLINE( 382)					this->phillyCityLights->add(light5).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 375)				{
HXLINE( 376)					 ::flixel::FlxSprite light6 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 376)					 ::flixel::FlxSprite light7 = light6->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 3)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 377)					light7->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 378)					light7->set_visible(false);
HXLINE( 379)					light7->setGraphicSize(::Std_obj::_hx_int((light7->get_width() * ((Float)0.85))),null());
HXLINE( 380)					light7->updateHitbox();
HXLINE( 381)					light7->set_antialiasing(true);
HXLINE( 382)					this->phillyCityLights->add(light7).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 375)				{
HXLINE( 376)					 ::flixel::FlxSprite light8 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,city1->x,null(),null());
HXDLIN( 376)					 ::flixel::FlxSprite light9 = light8->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("philly/win",75,da,d8,cc) + 4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 377)					light9->scrollFactor->set(((Float)0.3),((Float)0.3));
HXLINE( 378)					light9->set_visible(false);
HXLINE( 379)					light9->setGraphicSize(::Std_obj::_hx_int((light9->get_width() * ((Float)0.85))),null());
HXLINE( 380)					light9->updateHitbox();
HXLINE( 381)					light9->set_antialiasing(true);
HXLINE( 382)					this->phillyCityLights->add(light9).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
HXLINE( 385)			 ::flixel::FlxSprite streetBehind =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,50,null());
HXDLIN( 385)			 ::flixel::FlxSprite streetBehind1 = streetBehind->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/behindTrain",07,a4,6d,d4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 386)			this->add(streetBehind1);
HXLINE( 388)			 ::flixel::FlxSprite _hx_tmp12 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,2000,360,null());
HXDLIN( 388)			this->phillyTrain = _hx_tmp12->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/train",61,ce,51,a4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 389)			this->add(this->phillyTrain);
HXLINE( 391)			 ::flixel::_hx_system::FlxSound _hx_tmp13 =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 391)			this->trainSound = _hx_tmp13->loadEmbedded(::Paths_obj::sound(HX_("train_passes",56,da,5a,7f),HX_("week3",bf,95,be,c7)),null(),null(),null());
HXLINE( 392)			::flixel::FlxG_obj::sound->list->add(this->trainSound).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 396)			 ::flixel::FlxSprite street =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-40,streetBehind1->y,null());
HXDLIN( 396)			 ::flixel::FlxSprite street1 = street->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("philly/street",4a,23,ee,ee)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week3",bf,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 397)			this->add(street1);
HXLINE( 358)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_2==HX_("school",74,b8,c8,40)) ){
HXLINE( 517)			::PlayState_obj::curStage = HX_("school",74,b8,c8,40);
HXLINE( 519)			::PlayState_obj::chromaticAbberation =  ::shaders::ChromaticAberrationShader_obj::__alloc( HX_CTX );
HXLINE( 520)			::PlayState_obj::chromaticAbberation->setChrome(((Float)0.003));
HXLINE( 522)			this->scanline =  ::shaders::ScanlineShader_obj::__alloc( HX_CTX );
HXLINE( 523)			 ::flixel::FlxCamera _hx_tmp14 = ::flixel::FlxG_obj::camera;
HXDLIN( 523)			 ::openfl::filters::ShaderFilter _hx_tmp15 =  ::openfl::filters::ShaderFilter_obj::__alloc( HX_CTX ,this->scanline);
HXDLIN( 523)			_hx_tmp14->setFilters(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp15)->init(1, ::openfl::filters::ShaderFilter_obj::__alloc( HX_CTX ,::PlayState_obj::chromaticAbberation)));
HXLINE( 527)			 ::flixel::FlxSprite bgSky =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 527)			 ::flixel::FlxSprite bgSky1 = bgSky->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebSky",52,34,cf,a4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 528)			bgSky1->scrollFactor->set(((Float)0.1),((Float)0.1));
HXLINE( 529)			this->add(bgSky1);
HXLINE( 531)			int repositionShit = -200;
HXLINE( 533)			 ::flixel::FlxSprite bgSchool =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,0,null());
HXDLIN( 533)			 ::flixel::FlxSprite bgSchool1 = bgSchool->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebSchool",a3,21,c0,f5)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 534)			bgSchool1->scrollFactor->set(((Float)0.6),((Float)0.90));
HXLINE( 535)			this->add(bgSchool1);
HXLINE( 537)			 ::flixel::FlxSprite bgStreet =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,null(),null());
HXDLIN( 537)			 ::flixel::FlxSprite bgStreet1 = bgStreet->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebStreet",32,81,24,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 538)			bgStreet1->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 539)			this->add(bgStreet1);
HXLINE( 541)			 ::flixel::FlxSprite fgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit + 170),130,null());
HXDLIN( 541)			 ::flixel::FlxSprite fgTrees1 = fgTrees->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTreesBack",4d,ac,bd,40)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),null(),null(),null(),null(),null());
HXLINE( 542)			fgTrees1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 543)			this->add(fgTrees1);
HXLINE( 545)			 ::flixel::FlxSprite bgTrees =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(repositionShit - 380),-800,null());
HXLINE( 546)			::String treetex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 546)			 ::flixel::graphics::frames::FlxAtlasFrames treetex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(treetex,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/weebTrees",06,ab,3a,76)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7)));
HXLINE( 547)			bgTrees->set_frames(treetex1);
HXLINE( 548)			bgTrees->animation->add(HX_("treeLoop",e2,72,7f,2b),::Array_obj< int >::fromData( _hx_array_data_46c2835d_14,19),12,null(),null(),null());
HXLINE( 549)			bgTrees->animation->play(HX_("treeLoop",e2,72,7f,2b),null(),null(),null());
HXLINE( 550)			bgTrees->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 551)			this->add(bgTrees);
HXLINE( 553)			 ::flixel::FlxSprite treeLeaves =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,repositionShit,-40,null());
HXLINE( 554)			::String _hx_tmp16 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/petals",8d,ca,2b,c2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 554)			treeLeaves->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp16,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/petals",8d,ca,2b,c2)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7))));
HXLINE( 555)			treeLeaves->animation->addByPrefix(HX_("leaves",9c,23,7b,96),HX_("PETALS ALL",0a,57,91,88),24,true,null(),null());
HXLINE( 556)			treeLeaves->animation->play(HX_("leaves",9c,23,7b,96),null(),null(),null());
HXLINE( 557)			treeLeaves->scrollFactor->set(((Float)0.85),((Float)0.85));
HXLINE( 558)			this->add(treeLeaves);
HXLINE( 560)			int widShit = ::Std_obj::_hx_int((bgSky1->get_width() * ( (Float)(6) )));
HXLINE( 562)			bgSky1->setGraphicSize(widShit,null());
HXLINE( 563)			bgSchool1->setGraphicSize(widShit,null());
HXLINE( 564)			bgStreet1->setGraphicSize(widShit,null());
HXLINE( 565)			bgTrees->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)1.4))),null());
HXLINE( 566)			fgTrees1->setGraphicSize(::Std_obj::_hx_int((( (Float)(widShit) ) * ((Float)0.8))),null());
HXLINE( 567)			treeLeaves->setGraphicSize(widShit,null());
HXLINE( 569)			fgTrees1->updateHitbox();
HXLINE( 570)			bgSky1->updateHitbox();
HXLINE( 571)			bgSchool1->updateHitbox();
HXLINE( 572)			bgStreet1->updateHitbox();
HXLINE( 573)			bgTrees->updateHitbox();
HXLINE( 574)			treeLeaves->updateHitbox();
HXLINE( 576)			this->bgGirls =  ::BackgroundGirls_obj::__alloc( HX_CTX ,( (Float)(-100) ),( (Float)(190) ));
HXLINE( 577)			this->bgGirls->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 579)			if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("roses",04,6c,64,ed))) {
HXLINE( 581)				this->bgGirls->getScared();
            			}
HXLINE( 584)			 ::BackgroundGirls _hx_tmp17 = this->bgGirls;
HXDLIN( 584)			Float _hx_tmp18 = this->bgGirls->get_width();
HXDLIN( 584)			_hx_tmp17->setGraphicSize(::Std_obj::_hx_int((_hx_tmp18 * ::PlayState_obj::daPixelZoom)),null());
HXLINE( 585)			this->bgGirls->updateHitbox();
HXLINE( 586)			this->add(this->bgGirls);
HXLINE( 516)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_2==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 588)			::PlayState_obj::curStage = HX_("schoolEvil",28,a1,f5,f7);
HXLINE( 590)			::PlayState_obj::chromaticAbberation =  ::shaders::ChromaticAberrationShader_obj::__alloc( HX_CTX );
HXLINE( 591)			::PlayState_obj::chromaticAbberation->setChrome(((Float)0.005));
HXLINE( 593)			::PlayState_obj::vhsShader =  ::shaders::VHSShader_obj::__alloc( HX_CTX );
HXLINE( 594)			::PlayState_obj::vhsShader->setNoisePercent(((Float)0.75));
HXLINE( 596)			 ::flixel::FlxCamera _hx_tmp19 = ::flixel::FlxG_obj::camera;
HXDLIN( 596)			 ::openfl::filters::ShaderFilter _hx_tmp20 =  ::openfl::filters::ShaderFilter_obj::__alloc( HX_CTX ,::PlayState_obj::vhsShader);
HXDLIN( 596)			_hx_tmp19->setFilters(::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp20)->init(1, ::openfl::filters::ShaderFilter_obj::__alloc( HX_CTX ,::PlayState_obj::chromaticAbberation)));
HXLINE( 598)			 ::flixel::addons::effects::chainable::FlxWaveEffect waveEffectBG =  ::flixel::addons::effects::chainable::FlxWaveEffect_obj::__alloc( HX_CTX ,::flixel::addons::effects::chainable::FlxWaveMode_obj::ALL_dyn(),2,-1,3,2,null(),null());
HXLINE( 599)			 ::flixel::addons::effects::chainable::FlxWaveEffect waveEffectFG =  ::flixel::addons::effects::chainable::FlxWaveEffect_obj::__alloc( HX_CTX ,::flixel::addons::effects::chainable::FlxWaveMode_obj::ALL_dyn(),2,-1,5,2,null(),null());
HXLINE( 601)			int posX = 400;
HXLINE( 602)			int posY = 200;
HXLINE( 604)			 ::flixel::FlxSprite bg6 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,posX,posY,null());
HXLINE( 605)			::String _hx_tmp21 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/animatedEvilSchool",8f,dd,53,cd)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7));
HXDLIN( 605)			bg6->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp21,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/animatedEvilSchool",8f,dd,53,cd)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),HX_("week6",c2,95,be,c7))));
HXLINE( 606)			bg6->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("background 2",80,07,9d,17),24,null(),null(),null());
HXLINE( 607)			bg6->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 608)			bg6->scrollFactor->set(((Float)0.8),((Float)0.9));
HXLINE( 609)			bg6->scale->set(6,6);
HXLINE( 610)			this->add(bg6);
HXLINE( 587)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_2==HX_("stage",be,6a,0b,84)) ){
HXLINE( 728)			this->defaultCamZoom = ((Float)0.9);
HXLINE( 729)			::PlayState_obj::curStage = HX_("stage",be,6a,0b,84);
HXLINE( 730)			 ::flixel::FlxSprite bg7 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN( 730)			::String library18 = null();
HXDLIN( 730)			 ::flixel::FlxSprite bg8 = bg7->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library18),null(),null(),null(),null(),null());
HXLINE( 731)			bg8->set_antialiasing(true);
HXLINE( 732)			bg8->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 733)			bg8->set_active(false);
HXLINE( 734)			this->add(bg8);
HXLINE( 736)			 ::flixel::FlxSprite stageFront =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 736)			::String library19 = null();
HXDLIN( 736)			 ::flixel::FlxSprite stageFront1 = stageFront->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefront",2b,fd,b0,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library19),null(),null(),null(),null(),null());
HXLINE( 737)			stageFront1->setGraphicSize(::Std_obj::_hx_int((stageFront1->get_width() * ((Float)1.1))),null());
HXLINE( 738)			stageFront1->updateHitbox();
HXLINE( 739)			stageFront1->set_antialiasing(true);
HXLINE( 740)			stageFront1->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 741)			stageFront1->set_active(false);
HXLINE( 742)			this->add(stageFront1);
HXLINE( 744)			 ::flixel::FlxSprite stageCurtains =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 744)			::String library20 = null();
HXDLIN( 744)			 ::flixel::FlxSprite stageCurtains1 = stageCurtains->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtains",df,ec,1a,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library20),null(),null(),null(),null(),null());
HXLINE( 745)			stageCurtains1->setGraphicSize(::Std_obj::_hx_int((stageCurtains1->get_width() * ((Float)0.9))),null());
HXLINE( 746)			stageCurtains1->updateHitbox();
HXLINE( 747)			stageCurtains1->set_antialiasing(true);
HXLINE( 748)			stageCurtains1->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 749)			stageCurtains1->set_active(false);
HXLINE( 751)			this->add(stageCurtains1);
HXLINE( 727)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_2==HX_("tank",ea,ba,f6,4c)) ){
HXLINE( 656)			this->defaultCamZoom = ((Float)0.90);
HXLINE( 657)			::PlayState_obj::curStage = HX_("tank",ea,ba,f6,4c);
HXLINE( 659)			 ::BGSprite bg9 =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tankSky",17,cc,64,3d),-400,-400,0,0,null(),null());
HXLINE( 660)			this->add(bg9);
HXLINE( 662)			int tankSky = ::flixel::FlxG_obj::random->_hx_int(-700,-100,null());
HXDLIN( 662)			 ::BGSprite tankSky1 =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tankClouds",e8,67,44,47),tankSky,::flixel::FlxG_obj::random->_hx_int(-20,20,null()),((Float)0.1),((Float)0.1),null(),null());
HXLINE( 663)			tankSky1->set_active(true);
HXLINE( 664)			 ::flixel::math::FlxPoint tankSky2 = tankSky1->velocity;
HXDLIN( 664)			tankSky2->set_x(::flixel::FlxG_obj::random->_hx_float(5,15,null()));
HXLINE( 665)			this->add(tankSky1);
HXLINE( 667)			 ::BGSprite tankMountains =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tankMountains",3c,a9,69,8a),-300,-20,((Float)0.2),((Float)0.2),null(),null());
HXLINE( 668)			tankMountains->setGraphicSize(::Std_obj::_hx_int((tankMountains->get_width() * ((Float)1.2))),null());
HXLINE( 669)			tankMountains->updateHitbox();
HXLINE( 670)			this->add(tankMountains);
HXLINE( 672)			 ::BGSprite tankBuildings =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tankBuildings",35,bb,64,e0),-200,0,((Float)0.30),((Float)0.30),null(),null());
HXLINE( 673)			tankBuildings->setGraphicSize(::Std_obj::_hx_int((tankBuildings->get_width() * ((Float)1.1))),null());
HXLINE( 674)			tankBuildings->updateHitbox();
HXLINE( 675)			this->add(tankBuildings);
HXLINE( 677)			 ::BGSprite tankRuins =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tankRuins",c1,09,6b,6c),-200,0,((Float)0.35),((Float)0.35),null(),null());
HXLINE( 678)			tankRuins->setGraphicSize(::Std_obj::_hx_int((tankRuins->get_width() * ((Float)1.1))),null());
HXLINE( 679)			tankRuins->updateHitbox();
HXLINE( 680)			this->add(tankRuins);
HXLINE( 682)			 ::BGSprite smokeLeft =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("smokeLeft",16,a7,ec,46),-200,-100,((Float)0.4),((Float)0.4),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_15,1),true);
HXLINE( 683)			this->add(smokeLeft);
HXLINE( 685)			 ::BGSprite smokeRight =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("smokeRight",ed,99,32,3f),1100,-100,((Float)0.4),((Float)0.4),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_16,1),true);
HXLINE( 686)			this->add(smokeRight);
HXLINE( 690)			this->tankWatchtower =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tankWatchtower",e4,90,73,b1),100,50,((Float)0.5),((Float)0.5),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_17,1),null());
HXLINE( 691)			this->add(this->tankWatchtower);
HXLINE( 693)			this->tankGround =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tankRolling",bb,ab,47,f7),300,300,((Float)0.5),((Float)0.5),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_18,1),true);
HXLINE( 694)			this->add(this->tankGround);
HXLINE( 697)			this->tankmanRun =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 698)			this->add(this->tankmanRun);
HXLINE( 700)			 ::BGSprite tankGround =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tankGround",11,5d,19,55),-420,-150,null(),null(),null(),null());
HXLINE( 701)			tankGround->setGraphicSize(::Std_obj::_hx_int((tankGround->get_width() * ((Float)1.15))),null());
HXLINE( 702)			tankGround->updateHitbox();
HXLINE( 703)			this->add(tankGround);
HXLINE( 705)			this->moveTank();
HXLINE( 709)			 ::BGSprite fgTank0 =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tank0",06,d2,ec,0a),-500,650,((Float)1.7),((Float)1.5),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_19,1),null());
HXLINE( 710)			this->foregroundSprites->add(fgTank0).StaticCast<  ::BGSprite >();
HXLINE( 712)			 ::BGSprite fgTank1 =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tank1",07,d2,ec,0a),-300,750,2,((Float)0.2),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_20,1),null());
HXLINE( 713)			this->foregroundSprites->add(fgTank1).StaticCast<  ::BGSprite >();
HXLINE( 716)			 ::BGSprite fgTank2 =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tank2",08,d2,ec,0a),450,940,((Float)1.5),((Float)1.5),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_21,1),null());
HXLINE( 717)			this->foregroundSprites->add(fgTank2).StaticCast<  ::BGSprite >();
HXLINE( 719)			 ::BGSprite fgTank4 =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tank4",0a,d2,ec,0a),1300,900,((Float)1.5),((Float)1.5),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_22,1),null());
HXLINE( 720)			this->foregroundSprites->add(fgTank4).StaticCast<  ::BGSprite >();
HXLINE( 722)			 ::BGSprite fgTank5 =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tank5",0b,d2,ec,0a),1620,700,((Float)1.5),((Float)1.5),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_23,1),null());
HXLINE( 723)			this->foregroundSprites->add(fgTank5).StaticCast<  ::BGSprite >();
HXLINE( 725)			 ::BGSprite fgTank3 =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("tank3",09,d2,ec,0a),1300,1200,((Float)3.5),((Float)2.5),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_24,1),null());
HXLINE( 726)			this->foregroundSprites->add(fgTank3).StaticCast<  ::BGSprite >();
HXLINE( 655)			goto _hx_goto_8;
            		}
            		/* default */{
HXLINE( 753)			this->defaultCamZoom = ((Float)0.9);
HXLINE( 754)			::PlayState_obj::curStage = HX_("stage",be,6a,0b,84);
HXLINE( 755)			 ::flixel::FlxSprite bg10 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-200,null());
HXDLIN( 755)			::String library21 = null();
HXDLIN( 755)			 ::flixel::FlxSprite bg11 = bg10->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stageback",e5,7b,3b,06)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library21),null(),null(),null(),null(),null());
HXLINE( 756)			bg11->set_antialiasing(true);
HXLINE( 757)			bg11->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 758)			bg11->set_active(false);
HXLINE( 759)			this->add(bg11);
HXLINE( 761)			 ::flixel::FlxSprite stageFront2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,600,null());
HXDLIN( 761)			::String library22 = null();
HXDLIN( 761)			 ::flixel::FlxSprite stageFront3 = stageFront2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagefront",2b,fd,b0,c6)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library22),null(),null(),null(),null(),null());
HXLINE( 762)			stageFront3->setGraphicSize(::Std_obj::_hx_int((stageFront3->get_width() * ((Float)1.1))),null());
HXLINE( 763)			stageFront3->updateHitbox();
HXLINE( 764)			stageFront3->set_antialiasing(true);
HXLINE( 765)			stageFront3->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE( 766)			stageFront3->set_active(false);
HXLINE( 767)			this->add(stageFront3);
HXLINE( 769)			 ::flixel::FlxSprite stageCurtains2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-300,null());
HXDLIN( 769)			::String library23 = null();
HXDLIN( 769)			 ::flixel::FlxSprite stageCurtains3 = stageCurtains2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("stagecurtains",df,ec,1a,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library23),null(),null(),null(),null(),null());
HXLINE( 770)			stageCurtains3->setGraphicSize(::Std_obj::_hx_int((stageCurtains3->get_width() * ((Float)0.9))),null());
HXLINE( 771)			stageCurtains3->updateHitbox();
HXLINE( 772)			stageCurtains3->set_antialiasing(true);
HXLINE( 773)			stageCurtains3->scrollFactor->set(((Float)1.3),((Float)1.3));
HXLINE( 774)			stageCurtains3->set_active(false);
HXLINE( 776)			this->add(stageCurtains3);
            		}
            		_hx_goto_8:;
HXLINE( 779)		::String gfVersion = HX_("gf",1f,5a,00,00);
HXLINE( 781)		::String _hx_switch_3 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
            		if (  (_hx_switch_3==HX_("gf-car",a6,63,ab,07)) ){
HXLINE( 784)			gfVersion = HX_("gf-car",a6,63,ab,07);
HXDLIN( 784)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_3==HX_("gf-christmas",94,26,b1,6d)) ){
HXLINE( 786)			gfVersion = HX_("gf-christmas",94,26,b1,6d);
HXDLIN( 786)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_3==HX_("gf-pixel",98,3e,8c,55)) ){
HXLINE( 788)			gfVersion = HX_("gf-pixel",98,3e,8c,55);
HXDLIN( 788)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_3==HX_("gf-tankmen",fe,a1,7c,b5)) ){
HXLINE( 790)			gfVersion = HX_("gf-tankmen",fe,a1,7c,b5);
HXDLIN( 790)			goto _hx_goto_9;
            		}
            		if (  (_hx_switch_3==HX_("pico-speaker",57,7a,55,5e)) ){
HXLINE( 792)			gfVersion = HX_("pico-speaker",57,7a,55,5e);
HXDLIN( 792)			goto _hx_goto_9;
            		}
            		/* default */{
HXLINE( 794)			gfVersion = HX_("gf",1f,5a,00,00);
            		}
            		_hx_goto_9:;
HXLINE( 797)		::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),gfVersion,null());
HXLINE( 798)		::PlayState_obj::gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 800)		::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 802)		Float camPos = ::PlayState_obj::dad->getGraphicMidpoint(null())->x;
HXDLIN( 802)		 ::flixel::math::FlxPoint camPos1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,camPos,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 804)		::String _hx_switch_4 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            		if (  (_hx_switch_4==HX_("dad",47,36,4c,00)) ){
HXLINE( 822)			camPos1->set_x((camPos1->x + 400));
HXDLIN( 822)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("gf",1f,5a,00,00)) ){
HXLINE( 807)			::PlayState_obj::dad->setPosition(::PlayState_obj::gf->x,::PlayState_obj::gf->y);
HXLINE( 808)			::PlayState_obj::gf->set_visible(false);
HXLINE( 809)			if (::PlayState_obj::isStoryMode) {
HXLINE( 811)				camPos1->set_x((camPos1->x + 600));
HXLINE( 812)				this->tweenCamIn();
            			}
HXLINE( 806)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("monster",1a,54,b0,b8)) ){
HXLINE( 818)			 ::Character fh = ::PlayState_obj::dad;
HXDLIN( 818)			fh->set_y((fh->y + 100));
HXLINE( 817)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 820)			 ::Character fh1 = ::PlayState_obj::dad;
HXDLIN( 820)			fh1->set_y((fh1->y + 130));
HXLINE( 819)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("parents-christmas",fe,94,c5,32)) ){
HXLINE( 827)			 ::Character fh2 = ::PlayState_obj::dad;
HXDLIN( 827)			fh2->set_x((fh2->x - ( (Float)(500) )));
HXLINE( 826)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 824)			camPos1->set_x((camPos1->x + 600));
HXLINE( 825)			 ::Character fh3 = ::PlayState_obj::dad;
HXDLIN( 825)			fh3->set_y((fh3->y + 300));
HXLINE( 823)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 829)			 ::Character fh4 = ::PlayState_obj::dad;
HXDLIN( 829)			fh4->set_x((fh4->x + 150));
HXLINE( 830)			 ::Character fh5 = ::PlayState_obj::dad;
HXDLIN( 830)			fh5->set_y((fh5->y + 360));
HXLINE( 831)			Float _hx_tmp22 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 831)			camPos1->set(_hx_tmp22,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 828)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 833)			 ::Character fh6 = ::PlayState_obj::dad;
HXDLIN( 833)			fh6->set_x((fh6->x + 150));
HXLINE( 834)			 ::Character fh7 = ::PlayState_obj::dad;
HXDLIN( 834)			fh7->set_y((fh7->y + 360));
HXLINE( 835)			Float _hx_tmp23 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 835)			camPos1->set(_hx_tmp23,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 832)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 837)			 ::Character fh8 = ::PlayState_obj::dad;
HXDLIN( 837)			fh8->set_x((fh8->x - ( (Float)(150) )));
HXLINE( 838)			 ::Character fh9 = ::PlayState_obj::dad;
HXDLIN( 838)			fh9->set_y((fh9->y + 100));
HXLINE( 839)			Float _hx_tmp24 = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 839)			camPos1->set(_hx_tmp24,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 836)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE( 816)			 ::Character fh10 = ::PlayState_obj::dad;
HXDLIN( 816)			fh10->set_y((fh10->y + 200));
HXLINE( 815)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_4==HX_("tankman",f0,7d,78,3d)) ){
HXLINE( 841)			 ::Character fh11 = ::PlayState_obj::dad;
HXDLIN( 841)			fh11->set_y((fh11->y + 180));
HXLINE( 840)			goto _hx_goto_10;
            		}
            		_hx_goto_10:;
HXLINE( 844)		::String _hx_tmp25;
HXDLIN( 844)		bool _hx_tmp26;
HXDLIN( 844)		if (!(::PlayState_obj::isStoryMode)) {
HXLINE( 844)			_hx_tmp26 = ::PlayState_obj::freeplayChar;
            		}
            		else {
HXLINE( 844)			_hx_tmp26 = false;
            		}
HXDLIN( 844)		if (_hx_tmp26) {
HXLINE( 844)			_hx_tmp25 = ::PlayState_obj::selectedBF;
            		}
            		else {
HXLINE( 844)			_hx_tmp25 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) );
            		}
HXDLIN( 844)		::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),_hx_tmp25);
HXLINE( 847)		::String _hx_switch_5 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_5==HX_("limo",1f,17,b3,47)) ){
HXLINE( 850)			 ::Boyfriend fh12 = ::PlayState_obj::boyfriend;
HXDLIN( 850)			fh12->set_y((fh12->y - ( (Float)(220) )));
HXLINE( 851)			 ::Boyfriend fh13 = ::PlayState_obj::boyfriend;
HXDLIN( 851)			fh13->set_x((fh13->x + 260));
HXLINE( 853)			this->resetFastCar();
HXLINE( 854)			this->add(this->fastCar);
HXLINE( 849)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_5==HX_("mall",d4,3a,56,48)) ){
HXLINE( 857)			 ::Boyfriend fh14 = ::PlayState_obj::boyfriend;
HXDLIN( 857)			fh14->set_x((fh14->x + 200));
HXLINE( 856)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_5==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 860)			 ::Boyfriend fh15 = ::PlayState_obj::boyfriend;
HXDLIN( 860)			fh15->set_x((fh15->x + 320));
HXLINE( 861)			 ::Character fh16 = ::PlayState_obj::dad;
HXDLIN( 861)			fh16->set_y((fh16->y - ( (Float)(80) )));
HXLINE( 859)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_5==HX_("school",74,b8,c8,40)) ){
HXLINE( 863)			 ::Boyfriend fh17 = ::PlayState_obj::boyfriend;
HXDLIN( 863)			fh17->set_x((fh17->x + 200));
HXLINE( 864)			 ::Boyfriend fh18 = ::PlayState_obj::boyfriend;
HXDLIN( 864)			fh18->set_y((fh18->y + 220));
HXLINE( 865)			 ::Character fh19 = ::PlayState_obj::gf;
HXDLIN( 865)			fh19->set_x((fh19->x + 180));
HXLINE( 866)			 ::Character fh20 = ::PlayState_obj::gf;
HXDLIN( 866)			fh20->set_y((fh20->y + 300));
HXLINE( 862)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_5==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 870)			 ::flixel::addons::effects::FlxTrail evilTrail =  ::flixel::addons::effects::FlxTrail_obj::__alloc( HX_CTX ,::PlayState_obj::dad,null(),4,24,((Float)0.3),((Float)0.069));
HXLINE( 873)			this->add(evilTrail);
HXLINE( 876)			 ::Boyfriend fh21 = ::PlayState_obj::boyfriend;
HXDLIN( 876)			fh21->set_x((fh21->x + 200));
HXLINE( 877)			 ::Boyfriend fh22 = ::PlayState_obj::boyfriend;
HXDLIN( 877)			fh22->set_y((fh22->y + 220));
HXLINE( 878)			 ::Character fh23 = ::PlayState_obj::gf;
HXDLIN( 878)			fh23->set_x((fh23->x + 180));
HXLINE( 879)			 ::Character fh24 = ::PlayState_obj::gf;
HXDLIN( 879)			fh24->set_y((fh24->y + 300));
HXLINE( 867)			goto _hx_goto_11;
            		}
            		_hx_goto_11:;
HXLINE( 882)		this->add(::PlayState_obj::gf);
HXLINE( 885)		if ((::PlayState_obj::curStage == HX_("limo",1f,17,b3,47))) {
HXLINE( 886)			this->add(this->limo);
            		}
HXLINE( 888)		this->add(::PlayState_obj::dad);
HXLINE( 889)		this->add(::PlayState_obj::boyfriend);
HXLINE( 891)		 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,this->dialogue);
HXLINE( 894)		doof->scrollFactor->set(null(),null());
HXLINE( 895)		doof->finishThing = this->startCountdown_dyn();
HXLINE( 897)		::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE( 899)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 900)		this->strumLine->scrollFactor->set(null(),null());
HXLINE( 902)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE( 903)			this->strumLine->set_y(( (Float)((::flixel::FlxG_obj::height - 165)) ));
            		}
HXLINE( 905)		::PlayState_obj::strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 906)		this->add(::PlayState_obj::strumLineNotes);
HXLINE( 908)		this->add(this->grpNoteSplashes);
HXLINE( 910)		::PlayState_obj::playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 911)		::PlayState_obj::player2Strums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 915)		this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 919)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 921)		this->camFollow->setPosition(camPos1->x,camPos1->y);
HXLINE( 923)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollow )) {
HXLINE( 925)			this->camFollow = ::PlayState_obj::prevCamFollow;
HXLINE( 926)			::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 929)		this->add(this->camFollow);
HXLINE( 931)		::flixel::FlxG_obj::camera->follow(this->camFollow,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),((Float)0.04));
HXLINE( 933)		::flixel::FlxG_obj::camera->set_zoom(this->defaultCamZoom);
HXLINE( 934)		{
HXLINE( 934)			 ::flixel::FlxCamera _this1 = ::flixel::FlxG_obj::camera;
HXDLIN( 934)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 934)			_this1->scroll->set((point->x - (( (Float)(_this1->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this1->height) ) * ((Float)0.5))));
HXDLIN( 934)			if (point->_weak) {
HXLINE( 934)				point->put();
            			}
            		}
HXLINE( 936)		{
HXLINE( 936)			 ::flixel::math::FlxRect _this2 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 936)			_this2->x = ( (Float)(0) );
HXDLIN( 936)			_this2->y = ( (Float)(0) );
HXDLIN( 936)			_this2->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 936)			_this2->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 938)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE( 940)		 ::Dynamic _hx_tmp27;
HXDLIN( 940)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("quaverbar",0d,b0,79,a3),::hx::paccDynamic)) ))) {
HXLINE( 940)			_hx_tmp27 = 0;
            		}
            		else {
HXLINE( 940)			_hx_tmp27 = ::flixel::FlxG_obj::width;
            		}
HXDLIN( 940)		 ::Dynamic _hx_tmp28;
HXDLIN( 940)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("quaverbar",0d,b0,79,a3),::hx::paccDynamic)) ))) {
HXLINE( 940)			_hx_tmp28 = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.88));
            		}
            		else {
HXLINE( 940)			_hx_tmp28 = 0;
            		}
HXDLIN( 940)		 ::flixel::FlxSprite _hx_tmp29 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp27,_hx_tmp28,null());
HXDLIN( 940)		::String library24 = null();
HXDLIN( 940)		this->healthBarBG = _hx_tmp29->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library24),null(),null(),null(),null(),null());
HXLINE( 941)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE( 942)			this->healthBarBG->set_y(( (Float)(50) ));
            		}
HXLINE( 943)		{
HXLINE( 943)			 ::flixel::FlxSprite _this3 = this->healthBarBG;
HXDLIN( 943)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 943)			if (::hx::IsNull( axes )) {
HXLINE( 943)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 943)			bool _hx_tmp30;
HXDLIN( 943)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 943)					_hx_tmp30 = true;
            				}
            				break;
            				default:{
HXLINE( 943)					_hx_tmp30 = false;
            				}
            			}
HXDLIN( 943)			if (_hx_tmp30) {
HXLINE( 943)				int _hx_tmp31 = ::flixel::FlxG_obj::width;
HXDLIN( 943)				_this3->set_x(((( (Float)(_hx_tmp31) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 943)			bool _hx_tmp32;
HXDLIN( 943)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 943)					_hx_tmp32 = true;
            				}
            				break;
            				default:{
HXLINE( 943)					_hx_tmp32 = false;
            				}
            			}
HXDLIN( 943)			if (_hx_tmp32) {
HXLINE( 943)				int _hx_tmp33 = ::flixel::FlxG_obj::height;
HXDLIN( 943)				_this3->set_y(((( (Float)(_hx_tmp33) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 944)		this->healthBarBG->scrollFactor->set(null(),null());
HXLINE( 945)		this->add(this->healthBarBG);
HXLINE( 946)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("quaverbar",0d,b0,79,a3),::hx::paccDynamic)) )) {
HXLINE( 947)			this->healthBarBG->set_angle(( (Float)(90) ));
            		}
HXLINE( 949)		 ::Dynamic _hx_tmp34 = ::haxe::Log_obj::trace;
HXDLIN( 949)		::String _hx_tmp35 = (HX_("QUAVERBAR: ",d3,e7,8b,8f) + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("quaverbar",0d,b0,79,a3),::hx::paccDynamic))));
HXDLIN( 949)		_hx_tmp34(_hx_tmp35,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),949,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
HXLINE( 951)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("quaverbar",0d,b0,79,a3),::hx::paccDynamic)) )) {
HXLINE( 952)			this->healthBarBG->set_x(( (Float)(-290) ));
HXLINE( 953)			this->healthBarBG->set_y(( (Float)(340) ));
            		}
HXLINE( 955)		Float _hx_tmp36;
HXDLIN( 955)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("quaverbar",0d,b0,79,a3),::hx::paccDynamic)) )) {
HXLINE( 955)			_hx_tmp36 = ( (Float)(5) );
            		}
            		else {
HXLINE( 955)			_hx_tmp36 = (this->healthBarBG->x + 4);
            		}
HXDLIN( 955)		Float _hx_tmp37;
HXDLIN( 955)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("quaverbar",0d,b0,79,a3),::hx::paccDynamic)) ))) {
HXLINE( 955)			_hx_tmp37 = (this->healthBarBG->y + 4);
            		}
            		else {
HXLINE( 955)			_hx_tmp37 = ( (Float)(53) );
            		}
HXDLIN( 955)		 ::flixel::ui::FlxBarFillDirection _hx_tmp38;
HXDLIN( 955)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("quaverbar",0d,b0,79,a3),::hx::paccDynamic)) ))) {
HXLINE( 955)			_hx_tmp38 = ::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn();
            		}
            		else {
HXLINE( 955)			_hx_tmp38 = ::flixel::ui::FlxBarFillDirection_obj::BOTTOM_TO_TOP_dyn();
            		}
HXDLIN( 955)		int _hx_tmp39;
HXDLIN( 955)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("quaverbar",0d,b0,79,a3),::hx::paccDynamic)) ))) {
HXLINE( 955)			_hx_tmp39 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
            		}
            		else {
HXLINE( 955)			_hx_tmp39 = ::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) )));
            		}
HXDLIN( 955)		int _hx_tmp40;
HXDLIN( 955)		if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("quaverbar",0d,b0,79,a3),::hx::paccDynamic)) ))) {
HXLINE( 955)			_hx_tmp40 = ::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) )));
            		}
            		else {
HXLINE( 955)			_hx_tmp40 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
            		}
HXDLIN( 955)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp36,_hx_tmp37,_hx_tmp38,_hx_tmp39,_hx_tmp40,::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE( 957)		this->healthBar->scrollFactor->set(null(),null());
HXLINE( 958)		this->healthBar->createFilledBar(-65536,-10027213,null(),null());
HXLINE( 960)		this->add(this->healthBar);
HXLINE( 962)		Float _hx_tmp41 = this->healthBarBG->x;
HXDLIN( 962)		Float _hx_tmp42 = ((_hx_tmp41 + this->healthBarBG->get_width()) - ( (Float)(250) ));
HXDLIN( 962)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp42,(this->healthBarBG->y + 30),0,HX_("",00,00,00,00),20,null());
HXLINE( 963)		this->scoreTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 964)		this->scoreTxt->scrollFactor->set(null(),null());
HXLINE( 965)		this->add(this->scoreTxt);
HXLINE( 967)		this->botplayTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,400,55,(::flixel::FlxG_obj::width - 800),HX_("BOTPLAY",5b,cf,7d,e1),32,null());
HXLINE( 968)		this->botplayTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 969)		this->botplayTxt->scrollFactor->set(null(),null());
HXLINE( 970)		this->botplayTxt->set_borderSize(((Float)1.25));
HXLINE( 971)		this->botplayTxt->set_visible(this->cpuControlled);
HXLINE( 972)		this->add(this->botplayTxt);
HXLINE( 974)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),true);
HXLINE( 975)		 ::HealthIcon _hx_tmp43 = this->iconP1;
HXDLIN( 975)		Float _hx_tmp44 = this->healthBar->y;
HXDLIN( 975)		_hx_tmp43->set_y((_hx_tmp44 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE( 976)		this->add(this->iconP1);
HXLINE( 978)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),false);
HXLINE( 979)		 ::HealthIcon _hx_tmp45 = this->iconP2;
HXDLIN( 979)		Float _hx_tmp46 = this->healthBar->y;
HXDLIN( 979)		_hx_tmp45->set_y((_hx_tmp46 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE( 980)		this->add(this->iconP2);
HXLINE( 982)		this->grpNoteSplashes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 983)		::PlayState_obj::strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 984)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 985)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 986)		this->healthBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 987)		this->iconP1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 988)		this->iconP2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 989)		this->scoreTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 990)		this->botplayTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 991)		doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 998)		this->startingSong = true;
HXLINE(1000)		if (::PlayState_obj::isStoryMode) {
HXLINE(1002)			::String _hx_switch_6 = this->curSong.toLowerCase();
            			if (  (_hx_switch_6==HX_("monster",1a,54,b0,b8)) ){
HXLINE(1033)				this->startCountdown();
HXDLIN(1033)				goto _hx_goto_12;
            			}
            			if (  (_hx_switch_6==HX_("roses",04,6c,64,ed)) ){
HXLINE(1035)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp47 = ::flixel::FlxG_obj::sound;
HXDLIN(1035)				_hx_tmp47->play(::Paths_obj::sound(HX_("ANGRY",01,81,d0,a0),null()),null(),null(),null(),null(),null());
HXLINE(1036)				this->schoolIntro(doof);
HXLINE(1034)				goto _hx_goto_12;
            			}
            			if (  (_hx_switch_6==HX_("winter-horrorland",9d,39,f4,1e)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1027_create)
HXLINE(1027)							_gthis->startCountdown();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1020_create)
HXLINE(1021)						_gthis->camHUD->set_visible(true);
HXLINE(1022)						_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1023)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),_gthis->defaultCamZoom)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1011_create)
HXLINE(1012)					_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1013)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1013)					_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Turn_On",5f,e1,29,ad),null()),null(),null(),null(),null(),null());
HXLINE(1014)					_gthis->camFollow->set_y(( (Float)(-2050) ));
HXLINE(1015)					 ::flixel::FlxObject fh = _gthis->camFollow;
HXDLIN(1015)					fh->set_x((fh->x + 200));
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN(1016)						 ::flixel::math::FlxPoint point = _gthis->camFollow->getPosition(null());
HXDLIN(1016)						_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN(1016)						if (point->_weak) {
HXLINE(1016)							point->put();
            						}
            					}
HXLINE(1017)					::flixel::FlxG_obj::camera->set_zoom(((Float)1.5));
HXLINE(1019)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.8), ::Dynamic(new _hx_Closure_1(_gthis,blackScreen2)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1005)				 ::flixel::FlxSprite blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(1005)				int blackScreen1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN(1005)				 ::flixel::FlxSprite blackScreen2 = blackScreen->makeGraphic(blackScreen1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE(1006)				this->add(blackScreen2);
HXLINE(1007)				blackScreen2->scrollFactor->set(null(),null());
HXLINE(1008)				this->camHUD->set_visible(false);
HXLINE(1010)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_2(_gthis,blackScreen2)),null());
HXLINE(1004)				goto _hx_goto_12;
            			}
            			/* default */{
HXLINE(1038)				this->schoolIntro(doof);
            			}
            			_hx_goto_12:;
HXLINE(1040)			::PlayState_obj::seenCutscene = true;
            		}
            		else {
HXLINE(1044)			::String _g = this->curSong.toLowerCase();
HXLINE(1047)			this->schoolIntro(doof);
            		}
HXLINE(1051)		this->super::create();
            	}


void PlayState_obj::schoolIntro( ::DialogueBox dialogueBox){
            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,black1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1082_schoolIntro)
HXLINE(1083)			black1->set_alpha((black1->alpha - ((Float)0.15)));
HXLINE(1085)			if ((black1->alpha > 0)) {
HXLINE(1087)				tmr->reset(((Float)0.3));
            			}
            			else {
HXLINE(1091)				if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1093)					_gthis->inCutscene = true;
HXLINE(1095)					if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
            						HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer swagTimer){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1100_schoolIntro)
HXLINE(1101)							senpaiEvil->set_alpha((senpaiEvil->alpha + ((Float)0.15)));
HXLINE(1102)							if ((senpaiEvil->alpha < 1)) {
HXLINE(1104)								swagTimer->reset(null());
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(0)
            								void _hx_run(){
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(0)
            									void _hx_run(){
            										HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1115_schoolIntro)
HXLINE(1115)										_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            									}
            									HX_END_LOCAL_FUNC0((void))

            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1110_schoolIntro)
HXLINE(1111)									_gthis->remove(senpaiEvil,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1112)									_gthis->remove(red1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1113)									::flixel::FlxG_obj::camera->fade(-1,((Float)0.01),true, ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),true);
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer deadTime){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1120_schoolIntro)
HXLINE(1120)									::flixel::FlxG_obj::camera->fade(-1,((Float)1.6),false,null(),null());
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(1108)								senpaiEvil->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1109)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1109)								_hx_tmp->play(::Paths_obj::sound(HX_("Senpai_Dies",56,a2,b9,ec),null()),1,false,null(),true, ::Dynamic(new _hx_Closure_1(_gthis,dialogueBox,red1,senpaiEvil)));
HXLINE(1118)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.2), ::Dynamic(new _hx_Closure_2()),null());
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1097)						_gthis->add(senpaiEvil).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1098)						senpaiEvil->set_alpha(( (Float)(0) ));
HXLINE(1099)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_3(_gthis,dialogueBox,red1,senpaiEvil)),null());
            					}
            					else {
HXLINE(1127)						_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            				else {
HXLINE(1131)					_gthis->startCountdown();
            				}
HXLINE(1133)				_gthis->remove(black1,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1055_schoolIntro)
HXDLIN(1055)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1056)		 ::flixel::FlxSprite black =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1056)		 ::flixel::FlxSprite black1 = black->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-16777216,null(),null());
HXLINE(1057)		black1->scrollFactor->set(null(),null());
HXLINE(1058)		this->add(black1);
HXLINE(1060)		 ::flixel::FlxSprite red =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1060)		 ::flixel::FlxSprite red1 = red->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-58575,null(),null());
HXLINE(1061)		red1->scrollFactor->set(null(),null());
HXLINE(1063)		 ::flixel::FlxSprite senpaiEvil =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1064)		 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1064)		::String library = null();
HXDLIN(1064)		::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1064)		senpaiEvil1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1065)		senpaiEvil->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Senpai Pre Explosion",54,71,6e,81),24,false,null(),null());
HXLINE(1066)		 ::flixel::FlxSprite senpaiEvil2 = senpaiEvil;
HXDLIN(1066)		senpaiEvil2->setGraphicSize(::Std_obj::_hx_int((senpaiEvil->get_width() * ( (Float)(6) ))),null());
HXLINE(1067)		senpaiEvil->scrollFactor->set(null(),null());
HXLINE(1068)		senpaiEvil->updateHitbox();
HXLINE(1069)		{
HXLINE(1069)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(1069)			bool _hx_tmp1;
HXDLIN(1069)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(1069)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(1069)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(1069)			if (_hx_tmp1) {
HXLINE(1069)				 ::flixel::FlxSprite senpaiEvil3 = senpaiEvil;
HXDLIN(1069)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(1069)				senpaiEvil3->set_x(((( (Float)(_hx_tmp2) ) - senpaiEvil->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1069)			bool _hx_tmp3;
HXDLIN(1069)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(1069)					_hx_tmp3 = true;
            				}
            				break;
            				default:{
HXLINE(1069)					_hx_tmp3 = false;
            				}
            			}
HXDLIN(1069)			if (_hx_tmp3) {
HXLINE(1069)				 ::flixel::FlxSprite senpaiEvil4 = senpaiEvil;
HXDLIN(1069)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(1069)				senpaiEvil4->set_y(((( (Float)(_hx_tmp4) ) - senpaiEvil->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1071)		bool _hx_tmp5;
HXDLIN(1071)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() != HX_("roses",04,6c,64,ed))) {
HXLINE(1071)			_hx_tmp5 = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c));
            		}
            		else {
HXLINE(1071)			_hx_tmp5 = true;
            		}
HXDLIN(1071)		if (_hx_tmp5) {
HXLINE(1073)			this->remove(black1,null());
HXLINE(1075)			if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
HXLINE(1077)				this->add(red1);
            			}
            		}
HXLINE(1081)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_4(_gthis,dialogueBox,red1,black1,senpaiEvil)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,schoolIntro,(void))

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1156_startCountdown)
HXLINE(1157)			::PlayState_obj::dad->dance();
HXLINE(1158)			::PlayState_obj::gf->dance();
HXLINE(1159)			::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1161)			 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1162)			introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_36,3));
HXLINE(1163)			introAssets->set(HX_("school",74,b8,c8,40),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_37,3));
HXLINE(1164)			introAssets->set(HX_("schoolEvil",28,a1,f5,f7),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_38,3));
HXLINE(1166)			::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1167)			::String altSuffix = HX_("",00,00,00,00);
HXLINE(1169)			{
HXLINE(1169)				 ::Dynamic value = introAssets->keys();
HXDLIN(1169)				while(( (bool)(value->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1169)					::String value1 = ( (::String)(value->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1171)					if ((value1 == ::PlayState_obj::curStage)) {
HXLINE(1173)						introAlts = ( (::Array< ::String >)(introAssets->get(value1)) );
HXLINE(1174)						altSuffix = HX_("-pixel",39,03,b3,c0);
            					}
            				}
            			}
HXLINE(1178)			switch((int)(swagCounter->__get(0))){
            				case (int)0: {
HXLINE(1182)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1182)					_hx_tmp->play(::Paths_obj::sound(HX_("intro3",47,54,90,9e),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,ready1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1197_startCountdown)
HXLINE(1197)						ready1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1184)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1184)					::String library = null();
HXDLIN(1184)					 ::flixel::FlxSprite ready1 = ready->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1185)					ready1->scrollFactor->set(null(),null());
HXLINE(1186)					ready1->updateHitbox();
HXLINE(1188)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1189)						 ::flixel::FlxSprite ready2 = ready1;
HXDLIN(1189)						Float _hx_tmp1 = ready1->get_width();
HXDLIN(1189)						ready2->setGraphicSize(::Std_obj::_hx_int((_hx_tmp1 * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1191)					{
HXLINE(1191)						 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(1191)						bool _hx_tmp2;
HXDLIN(1191)						switch((int)(axes->_hx_getIndex())){
            							case (int)0: case (int)2: {
HXLINE(1191)								_hx_tmp2 = true;
            							}
            							break;
            							default:{
HXLINE(1191)								_hx_tmp2 = false;
            							}
            						}
HXDLIN(1191)						if (_hx_tmp2) {
HXLINE(1191)							 ::flixel::FlxSprite ready3 = ready1;
HXDLIN(1191)							int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(1191)							ready3->set_x(((( (Float)(_hx_tmp3) ) - ready1->get_width()) / ( (Float)(2) )));
            						}
HXDLIN(1191)						bool _hx_tmp4;
HXDLIN(1191)						switch((int)(axes->_hx_getIndex())){
            							case (int)1: case (int)2: {
HXLINE(1191)								_hx_tmp4 = true;
            							}
            							break;
            							default:{
HXLINE(1191)								_hx_tmp4 = false;
            							}
            						}
HXDLIN(1191)						if (_hx_tmp4) {
HXLINE(1191)							 ::flixel::FlxSprite ready4 = ready1;
HXDLIN(1191)							int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN(1191)							ready4->set_y(((( (Float)(_hx_tmp5) ) - ready1->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE(1192)					_gthis->add(ready1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1193)					 ::flixel::FlxSprite ready5 = ready1;
HXDLIN(1193)					 ::Dynamic _hx_tmp6 =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),ready1->set_y((ready1->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1193)					::flixel::tweens::FlxTween_obj::tween(ready5,_hx_tmp6,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(ready1)))));
HXLINE(1200)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp7 = ::flixel::FlxG_obj::sound;
HXDLIN(1200)					_hx_tmp7->play(::Paths_obj::sound(HX_("intro2",46,54,90,9e),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,set1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1214_startCountdown)
HXLINE(1214)						set1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1202)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1202)					::String library1 = null();
HXDLIN(1202)					 ::flixel::FlxSprite set1 = set->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(1203)					set1->scrollFactor->set(null(),null());
HXLINE(1205)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1206)						 ::flixel::FlxSprite set2 = set1;
HXDLIN(1206)						Float _hx_tmp8 = set1->get_width();
HXDLIN(1206)						set2->setGraphicSize(::Std_obj::_hx_int((_hx_tmp8 * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1208)					{
HXLINE(1208)						 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(1208)						bool _hx_tmp9;
HXDLIN(1208)						switch((int)(axes1->_hx_getIndex())){
            							case (int)0: case (int)2: {
HXLINE(1208)								_hx_tmp9 = true;
            							}
            							break;
            							default:{
HXLINE(1208)								_hx_tmp9 = false;
            							}
            						}
HXDLIN(1208)						if (_hx_tmp9) {
HXLINE(1208)							 ::flixel::FlxSprite set3 = set1;
HXDLIN(1208)							int _hx_tmp10 = ::flixel::FlxG_obj::width;
HXDLIN(1208)							set3->set_x(((( (Float)(_hx_tmp10) ) - set1->get_width()) / ( (Float)(2) )));
            						}
HXDLIN(1208)						bool _hx_tmp11;
HXDLIN(1208)						switch((int)(axes1->_hx_getIndex())){
            							case (int)1: case (int)2: {
HXLINE(1208)								_hx_tmp11 = true;
            							}
            							break;
            							default:{
HXLINE(1208)								_hx_tmp11 = false;
            							}
            						}
HXDLIN(1208)						if (_hx_tmp11) {
HXLINE(1208)							 ::flixel::FlxSprite set4 = set1;
HXDLIN(1208)							int _hx_tmp12 = ::flixel::FlxG_obj::height;
HXDLIN(1208)							set4->set_y(((( (Float)(_hx_tmp12) ) - set1->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE(1209)					_gthis->add(set1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1210)					 ::flixel::FlxSprite set5 = set1;
HXDLIN(1210)					 ::Dynamic _hx_tmp13 =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),set1->set_y((set1->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1210)					::flixel::tweens::FlxTween_obj::tween(set5,_hx_tmp13,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(set1)))));
HXLINE(1217)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp14 = ::flixel::FlxG_obj::sound;
HXDLIN(1217)					_hx_tmp14->play(::Paths_obj::sound(HX_("intro1",45,54,90,9e),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,go1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1233_startCountdown)
HXLINE(1233)						go1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1219)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1219)					::String library2 = null();
HXDLIN(1219)					 ::flixel::FlxSprite go1 = go->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(1220)					go1->scrollFactor->set(null(),null());
HXLINE(1222)					if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(1223)						 ::flixel::FlxSprite go2 = go1;
HXDLIN(1223)						Float _hx_tmp15 = go1->get_width();
HXDLIN(1223)						go2->setGraphicSize(::Std_obj::_hx_int((_hx_tmp15 * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1225)					go1->updateHitbox();
HXLINE(1227)					{
HXLINE(1227)						 ::flixel::util::FlxAxes axes2 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(1227)						bool _hx_tmp16;
HXDLIN(1227)						switch((int)(axes2->_hx_getIndex())){
            							case (int)0: case (int)2: {
HXLINE(1227)								_hx_tmp16 = true;
            							}
            							break;
            							default:{
HXLINE(1227)								_hx_tmp16 = false;
            							}
            						}
HXDLIN(1227)						if (_hx_tmp16) {
HXLINE(1227)							 ::flixel::FlxSprite go3 = go1;
HXDLIN(1227)							int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN(1227)							go3->set_x(((( (Float)(_hx_tmp17) ) - go1->get_width()) / ( (Float)(2) )));
            						}
HXDLIN(1227)						bool _hx_tmp18;
HXDLIN(1227)						switch((int)(axes2->_hx_getIndex())){
            							case (int)1: case (int)2: {
HXLINE(1227)								_hx_tmp18 = true;
            							}
            							break;
            							default:{
HXLINE(1227)								_hx_tmp18 = false;
            							}
            						}
HXDLIN(1227)						if (_hx_tmp18) {
HXLINE(1227)							 ::flixel::FlxSprite go4 = go1;
HXDLIN(1227)							int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN(1227)							go4->set_y(((( (Float)(_hx_tmp19) ) - go1->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE(1228)					_gthis->add(go1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1229)					 ::flixel::FlxSprite go5 = go1;
HXDLIN(1229)					 ::Dynamic _hx_tmp20 =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),go1->set_y((go1->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1229)					::flixel::tweens::FlxTween_obj::tween(go5,_hx_tmp20,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(go1)))));
HXLINE(1236)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp21 = ::flixel::FlxG_obj::sound;
HXDLIN(1236)					_hx_tmp21->play(::Paths_obj::sound(HX_("introGo",b4,7b,b9,1f),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)4: {
            				}
            				break;
            			}
HXLINE(1240)			::Array< int > swagCounter1 = swagCounter;
HXDLIN(1240)			int _hx_tmp22 = 0;
HXDLIN(1240)			swagCounter1[_hx_tmp22] = (swagCounter1->__get(_hx_tmp22) + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1142_startCountdown)
HXDLIN(1142)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1143)		this->inCutscene = false;
HXLINE(1145)		this->generateStaticArrows(0);
HXLINE(1146)		this->generateStaticArrows(1);
HXLINE(1148)		this->talking = false;
HXLINE(1149)		this->startedCountdown = true;
HXLINE(1150)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(1151)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1151)		::Conductor_obj::songPosition = (::Conductor_obj::songPosition - (::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE(1153)		::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_43,1);
HXLINE(1155)		 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1155)		this->startTimer = _hx_tmp1->start((::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_3(_gthis,swagCounter)),5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

void PlayState_obj::startSong(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1250_startSong)
HXLINE(1251)		this->startingSong = false;
HXLINE(1253)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1254)		this->lastReportedPlayheadPosition = 0;
HXLINE(1256)		if (!(this->paused)) {
HXLINE(1257)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1257)			_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),1,false,null());
            		}
HXLINE(1258)		::flixel::FlxG_obj::sound->music->onComplete = this->endSong_dyn();
HXLINE(1259)		this->vocals->play(null(),null(),null());
HXLINE(1262)		this->songLength = ::flixel::FlxG_obj::sound->music->_length;
HXLINE(1266)		::DiscordClient_obj::changePresence(( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),(((HX_("Score: ",58,c6,eb,45) + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + this->misses),this->iconRPC,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::updateLoop(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1274_updateLoop)
HXLINE(1275)			if (::PlayState_obj::isStoryMode) {
HXLINE(1277)				_gthis->detailsText = ( (::String)((HX_("Story Mode: ",d4,01,86,36) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic))) );
            			}
            			else {
HXLINE(1281)				_gthis->detailsText = ( (::String)((HX_("Free Play: ",8e,3a,1c,47) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic))) );
            			}
HXLINE(1285)			_gthis->detailsPausedText = (HX_("Paused on ",cf,a1,89,e2) + _gthis->detailsText);
HXLINE(1287)			_gthis->updateLoop();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1271_updateLoop)
HXDLIN(1271)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1273)		 ::haxe::Timer timer = ::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_0(_gthis)),5000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateLoop,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1295_generateSong)
HXLINE(1298)		 ::Dynamic songData = ::PlayState_obj::SONG;
HXLINE(1299)		::Conductor_obj::changeBPM(( (int)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(1301)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1303)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1304)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1304)			this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            		}
            		else {
HXLINE(1306)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(1308)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1310)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1311)		this->add(this->notes);
HXLINE(1313)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(1318)		int playerCounter = 0;
HXLINE(1320)		int daBeats = 0;
HXLINE(1321)		{
HXLINE(1321)			int _g = 0;
HXDLIN(1321)			while((_g < noteData->length)){
HXLINE(1321)				 ::Dynamic section = noteData->__get(_g);
HXDLIN(1321)				_g = (_g + 1);
HXLINE(1323)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE(1325)				{
HXLINE(1325)					int _g1 = 0;
HXDLIN(1325)					::cpp::VirtualArray _g2 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1325)					while((_g1 < _g2->get_length())){
HXLINE(1325)						 ::Dynamic songNotes = _g2->__get(_g1);
HXDLIN(1325)						_g1 = (_g1 + 1);
HXLINE(1327)						Float daStrumTime = ( (Float)(songNotes->__GetItem(0)) );
HXLINE(1328)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4));
HXLINE(1330)						bool gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1332)						if (::hx::IsGreater( songNotes->__GetItem(1),3 )) {
HXLINE(1334)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE(1337)						 ::Note oldNote;
HXLINE(1338)						if ((this->unspawnNotes->length > 0)) {
HXLINE(1339)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(1341)							oldNote = null();
            						}
HXLINE(1343)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,null());
HXLINE(1344)						swagNote->sustainLength = ( (Float)(songNotes->__GetItem(2)) );
HXLINE(1345)						swagNote->scrollFactor->set(0,0);
HXLINE(1347)						Float susLength = swagNote->sustainLength;
HXLINE(1349)						susLength = (susLength / ::Conductor_obj::stepCrochet);
HXLINE(1350)						this->unspawnNotes->push(swagNote);
HXLINE(1352)						{
HXLINE(1352)							int _g3 = 0;
HXDLIN(1352)							int _g4 = ::Math_obj::floor(susLength);
HXDLIN(1352)							while((_g3 < _g4)){
HXLINE(1352)								_g3 = (_g3 + 1);
HXDLIN(1352)								int susNote = (_g3 - 1);
HXLINE(1354)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE(1356)								 ::Note sustainNote =  ::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::Conductor_obj::stepCrochet),daNoteData,oldNote,true);
HXLINE(1357)								sustainNote->scrollFactor->set(null(),null());
HXLINE(1358)								this->unspawnNotes->push(sustainNote);
HXLINE(1360)								sustainNote->mustPress = gottaHitNote;
HXLINE(1362)								if (sustainNote->mustPress) {
HXLINE(1364)									sustainNote->set_x((sustainNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            							}
            						}
HXLINE(1368)						swagNote->mustPress = gottaHitNote;
HXLINE(1370)						if (swagNote->mustPress) {
HXLINE(1372)							swagNote->set_x((swagNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE(1376)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE(1382)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(1384)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1389_sortByShit)
HXDLIN(1389)		Float Value1 = Obj1->strumTime;
HXDLIN(1389)		Float Value2 = Obj2->strumTime;
HXDLIN(1389)		int result = 0;
HXDLIN(1389)		if ((Value1 < Value2)) {
HXDLIN(1389)			result = -1;
            		}
            		else {
HXDLIN(1389)			if ((Value1 > Value2)) {
HXDLIN(1389)				result = 1;
            			}
            		}
HXDLIN(1389)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1394_generateStaticArrows)
HXDLIN(1394)		int _g = 0;
HXDLIN(1394)		while((_g < 4)){
HXDLIN(1394)			_g = (_g + 1);
HXDLIN(1394)			int i = (_g - 1);
HXLINE(1397)			 ::flixel::FlxSprite babyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,this->strumLine->y,null());
HXLINE(1399)			::String _hx_switch_0 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
            			if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE(1437)				::String library = null();
HXDLIN(1437)				::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1437)				babyArrow->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1438)				babyArrow->animation->addByPrefix(HX_("green",c3,0e,ed,99),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1439)				babyArrow->animation->addByPrefix(HX_("blue",9a,42,19,41),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1440)				babyArrow->animation->addByPrefix(HX_("purple",3c,f6,89,71),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1441)				babyArrow->animation->addByPrefix(HX_("red",51,d9,56,00),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1443)				babyArrow->set_antialiasing(true);
HXLINE(1444)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
HXLINE(1446)				Float _hx_switch_1 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_1==( (Float)(0) )) ){
HXLINE(1449)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
HXLINE(1450)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1451)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("left press",aa,26,70,8e),24,false,null(),null());
HXLINE(1452)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("left confirm",e7,c7,19,fe),24,false,null(),null());
HXLINE(1448)					goto _hx_goto_55;
            				}
            				if (  (_hx_switch_1==( (Float)(1) )) ){
HXLINE(1454)					babyArrow->set_x((babyArrow->x + ::Note_obj::swagWidth));
HXLINE(1455)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1456)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("down press",45,4d,63,9c),24,false,null(),null());
HXLINE(1457)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("down confirm",42,0b,18,cc),24,false,null(),null());
HXLINE(1453)					goto _hx_goto_55;
            				}
            				if (  (_hx_switch_1==( (Float)(2) )) ){
HXLINE(1459)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
HXLINE(1460)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1461)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("up press",fe,fb,65,e9),24,false,null(),null());
HXLINE(1462)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("up confirm",3b,9a,2e,62),24,false,null(),null());
HXLINE(1458)					goto _hx_goto_55;
            				}
            				if (  (_hx_switch_1==( (Float)(3) )) ){
HXLINE(1464)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
HXLINE(1465)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1466)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("right press",3f,38,e4,c8),24,false,null(),null());
HXLINE(1467)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("right confirm",bc,28,e5,ca),24,false,null(),null());
HXLINE(1463)					goto _hx_goto_55;
            				}
            				_hx_goto_55:;
HXLINE(1436)				goto _hx_goto_54;
            			}
            			if (  (_hx_switch_0==HX_("pixel",86,c6,a3,c2)) ){
HXLINE(1402)				::String library1 = null();
HXDLIN(1402)				babyArrow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/arrows-pixels",b7,c3,c7,09)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),true,17,17,null(),null());
HXLINE(1403)				babyArrow->animation->add(HX_("green",c3,0e,ed,99),::Array_obj< int >::fromData( _hx_array_data_46c2835d_58,1),null(),null(),null(),null());
HXLINE(1404)				babyArrow->animation->add(HX_("red",51,d9,56,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_59,1),null(),null(),null(),null());
HXLINE(1405)				babyArrow->animation->add(HX_("blue",9a,42,19,41),::Array_obj< int >::fromData( _hx_array_data_46c2835d_60,1),null(),null(),null(),null());
HXLINE(1406)				babyArrow->animation->add(HX_("purplel",b0,7e,2d,e7),::Array_obj< int >::fromData( _hx_array_data_46c2835d_61,1),null(),null(),null(),null());
HXLINE(1408)				Float _hx_tmp1 = babyArrow->get_width();
HXDLIN(1408)				babyArrow->setGraphicSize(::Std_obj::_hx_int((_hx_tmp1 * ::PlayState_obj::daPixelZoom)),null());
HXLINE(1409)				babyArrow->updateHitbox();
HXLINE(1410)				babyArrow->set_antialiasing(false);
HXLINE(1412)				Float _hx_switch_2 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_2==( (Float)(0) )) ){
HXLINE(1415)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
HXLINE(1416)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_62,1),null(),null(),null(),null());
HXLINE(1417)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_63,2),12,false,null(),null());
HXLINE(1418)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_64,2),24,false,null(),null());
HXLINE(1414)					goto _hx_goto_56;
            				}
            				if (  (_hx_switch_2==( (Float)(1) )) ){
HXLINE(1420)					babyArrow->set_x((babyArrow->x + ::Note_obj::swagWidth));
HXLINE(1421)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_65,1),null(),null(),null(),null());
HXLINE(1422)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_66,2),12,false,null(),null());
HXLINE(1423)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_67,2),24,false,null(),null());
HXLINE(1419)					goto _hx_goto_56;
            				}
            				if (  (_hx_switch_2==( (Float)(2) )) ){
HXLINE(1425)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
HXLINE(1426)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_68,1),null(),null(),null(),null());
HXLINE(1427)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_69,2),12,false,null(),null());
HXLINE(1428)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_70,2),12,false,null(),null());
HXLINE(1424)					goto _hx_goto_56;
            				}
            				if (  (_hx_switch_2==( (Float)(3) )) ){
HXLINE(1430)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
HXLINE(1431)					babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::fromData( _hx_array_data_46c2835d_71,1),null(),null(),null(),null());
HXLINE(1432)					babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_46c2835d_72,2),12,false,null(),null());
HXLINE(1433)					babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::fromData( _hx_array_data_46c2835d_73,2),24,false,null(),null());
HXLINE(1429)					goto _hx_goto_56;
            				}
            				_hx_goto_56:;
HXLINE(1401)				goto _hx_goto_54;
            			}
            			/* default */{
HXLINE(1471)				::String library2 = null();
HXDLIN(1471)				::String _hx_tmp2 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2);
HXDLIN(1471)				babyArrow->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp2,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library2)));
HXLINE(1472)				babyArrow->animation->addByPrefix(HX_("green",c3,0e,ed,99),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1473)				babyArrow->animation->addByPrefix(HX_("blue",9a,42,19,41),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1474)				babyArrow->animation->addByPrefix(HX_("purple",3c,f6,89,71),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1475)				babyArrow->animation->addByPrefix(HX_("red",51,d9,56,00),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1477)				babyArrow->set_antialiasing(true);
HXLINE(1478)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
HXLINE(1480)				Float _hx_switch_3 = ::Math_obj::abs(( (Float)(i) ));
            				if (  (_hx_switch_3==( (Float)(0) )) ){
HXLINE(1483)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(0) ))));
HXLINE(1484)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowLEFT",50,62,3b,03),null(),null(),null(),null());
HXLINE(1485)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("left press",aa,26,70,8e),24,false,null(),null());
HXLINE(1486)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("left confirm",e7,c7,19,fe),24,false,null(),null());
HXLINE(1482)					goto _hx_goto_53;
            				}
            				if (  (_hx_switch_3==( (Float)(1) )) ){
HXLINE(1488)					babyArrow->set_x((babyArrow->x + ::Note_obj::swagWidth));
HXLINE(1489)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowDOWN",ab,52,f9,fd),null(),null(),null(),null());
HXLINE(1490)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("down press",45,4d,63,9c),24,false,null(),null());
HXLINE(1491)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("down confirm",42,0b,18,cc),24,false,null(),null());
HXLINE(1487)					goto _hx_goto_53;
            				}
            				if (  (_hx_switch_3==( (Float)(2) )) ){
HXLINE(1493)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(2) ))));
HXLINE(1494)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowUP",64,88,b8,43),null(),null(),null(),null());
HXLINE(1495)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("up press",fe,fb,65,e9),24,false,null(),null());
HXLINE(1496)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("up confirm",3b,9a,2e,62),24,false,null(),null());
HXLINE(1492)					goto _hx_goto_53;
            				}
            				if (  (_hx_switch_3==( (Float)(3) )) ){
HXLINE(1498)					babyArrow->set_x((babyArrow->x + (::Note_obj::swagWidth * ( (Float)(3) ))));
HXLINE(1499)					babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),HX_("arrowRIGHT",53,b1,c7,47),null(),null(),null(),null());
HXLINE(1500)					babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),HX_("right press",3f,38,e4,c8),24,false,null(),null());
HXLINE(1501)					babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),HX_("right confirm",bc,28,e5,ca),24,false,null(),null());
HXLINE(1497)					goto _hx_goto_53;
            				}
            				_hx_goto_53:;
            			}
            			_hx_goto_54:;
HXLINE(1505)			babyArrow->updateHitbox();
HXLINE(1506)			babyArrow->scrollFactor->set(null(),null());
HXLINE(1508)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(1510)				babyArrow->set_y((babyArrow->y - ( (Float)(10) )));
HXLINE(1511)				babyArrow->set_alpha(( (Float)(0) ));
HXLINE(1512)				::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("y",79,00,00,00),(babyArrow->y + 10))
            					->setFixed(1,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            			}
HXLINE(1515)			babyArrow->ID = i;
HXLINE(1517)			if ((player == 1)) {
HXLINE(1519)				::PlayState_obj::playerStrums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            			}
            			else {
HXLINE(1521)				::PlayState_obj::player2Strums->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE(1524)			babyArrow->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
HXLINE(1525)			babyArrow->set_x((babyArrow->x + 50));
HXLINE(1526)			babyArrow->set_x((babyArrow->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
HXLINE(1528)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) )) {
HXLINE(1529)				babyArrow->set_x((babyArrow->x - ( (Float)(275) )));
HXLINE(1530)				if ((player != 1)) {
HXLINE(1531)					babyArrow->set_visible(false);
            				}
            			}
HXLINE(1535)			::PlayState_obj::strumLineNotes->add(babyArrow).StaticCast<  ::flixel::FlxSprite >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::tweenCamIn(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1541_tweenCamIn)
HXDLIN(1541)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1545_openSubState)
HXLINE(1546)		if (this->paused) {
HXLINE(1548)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1550)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1551)				this->vocals->pause();
            			}
HXLINE(1555)			::DiscordClient_obj::changePresence(( (::String)(((((HX_("PAUSED on ",af,49,21,f3) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),(((HX_("Score: ",58,c6,eb,45) + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + this->misses),this->iconRPC,null(),null());
HXLINE(1557)			if (!(this->startTimer->finished)) {
HXLINE(1558)				this->startTimer->active = false;
            			}
            		}
HXLINE(1561)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1565_closeSubState)
HXLINE(1566)		if (this->paused) {
HXLINE(1568)			bool _hx_tmp;
HXDLIN(1568)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1568)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(1568)				_hx_tmp = false;
            			}
HXDLIN(1568)			if (_hx_tmp) {
HXLINE(1570)				this->resyncVocals();
            			}
HXLINE(1573)			if (!(this->startTimer->finished)) {
HXLINE(1574)				this->startTimer->active = true;
            			}
HXLINE(1575)			this->paused = false;
HXLINE(1579)			if (this->startTimer->finished) {
HXLINE(1581)				::DiscordClient_obj::changePresence(( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),(((HX_("Score: ",58,c6,eb,45) + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + this->misses),this->iconRPC,true,(this->songLength - ::Conductor_obj::songPosition));
            			}
            			else {
HXLINE(1585)				::DiscordClient_obj::changePresence(this->detailsText,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,null(),null());
            			}
            		}
HXLINE(1590)		this->super::closeSubState();
            	}


void PlayState_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1594_onFocus)
HXLINE(1596)		bool _hx_tmp;
HXDLIN(1596)		if ((this->health > 0)) {
HXLINE(1596)			_hx_tmp = !(this->paused);
            		}
            		else {
HXLINE(1596)			_hx_tmp = false;
            		}
HXDLIN(1596)		if (_hx_tmp) {
HXLINE(1598)			if ((::Conductor_obj::songPosition > ((Float)0.0))) {
HXLINE(1600)				::DiscordClient_obj::changePresence(this->detailsText,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,true,(this->songLength - ::Conductor_obj::songPosition));
            			}
            		}
HXLINE(1605)		this->super::onFocus();
            	}


void PlayState_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1609_onFocusLost)
HXLINE(1611)		bool _hx_tmp;
HXDLIN(1611)		if ((this->health > 0)) {
HXLINE(1611)			_hx_tmp = !(this->paused);
            		}
            		else {
HXLINE(1611)			_hx_tmp = false;
            		}
HXDLIN(1611)		if (_hx_tmp) {
HXLINE(1613)			::DiscordClient_obj::changePresence(this->detailsPausedText,( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),this->iconRPC,null(),null());
            		}
HXLINE(1617)		this->super::onFocusLost();
            	}


void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1621_resyncVocals)
HXLINE(1622)		this->vocals->pause();
HXLINE(1624)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1625)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1626)		this->vocals->set_time(::Conductor_obj::songPosition);
HXLINE(1627)		this->vocals->play(null(),null(),null());
HXLINE(1630)		::DiscordClient_obj::changePresence(( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) ),(((HX_("Score: ",58,c6,eb,45) + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + this->misses),this->iconRPC,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1641_update)
HXDLIN(1641)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1642)		::scripting::Script_obj::onUpdate();
HXLINE(1647)		this->perfectMode = false;
HXLINE(1650)		this->songPositionBar = ::Conductor_obj::songPosition;
HXLINE(1652)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1652)		if (_this->keyManager->checkStatusUnsafe(57,_this->status)) {
HXLINE(1654)			if ((this->iconP1->animation->_curAnim->name == HX_("bf-old",5e,ba,eb,07))) {
HXLINE(1655)				this->iconP1->animation->play(( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            			}
            			else {
HXLINE(1657)				this->iconP1->animation->play(HX_("bf-old",5e,ba,eb,07),null(),null(),null());
            			}
            		}
HXLINE(1660)		::String _hx_switch_0 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE(1663)			if (this->trainMoving) {
HXLINE(1665)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1665)				_hx_tmp->trainFrameTiming = (_hx_tmp->trainFrameTiming + elapsed);
HXLINE(1667)				if ((this->trainFrameTiming >= ((Float)0.041666666666666664))) {
HXLINE(1669)					this->updateTrainPos();
HXLINE(1670)					this->trainFrameTiming = ( (Float)(0) );
            				}
            			}
HXLINE(1663)			goto _hx_goto_80;
            		}
            		if (  (_hx_switch_0==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(1676)			::PlayState_obj::vhsShader->update(elapsed);
HXDLIN(1676)			goto _hx_goto_80;
            		}
            		if (  (_hx_switch_0==HX_("tank",ea,ba,f6,4c)) ){
HXLINE(1679)			this->moveTank();
HXDLIN(1679)			goto _hx_goto_80;
            		}
            		_hx_goto_80:;
HXLINE(1682)		this->super::update(elapsed);
HXLINE(1684)		if (this->botplayTxt->visible) {
HXLINE(1686)			 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1686)			_hx_tmp1->botplaySine = (_hx_tmp1->botplaySine + (( (Float)(180) ) * elapsed));
HXLINE(1687)			this->botplayTxt->set_alpha((( (Float)(1) ) - ::Math_obj::sin(((::Math_obj::PI * this->botplaySine) / ( (Float)(180) )))));
            		}
HXLINE(1690)		this->scoreTxt->set_text((((HX_("Score:",c8,e8,ff,79) + this->songScore) + HX_(" | Misses:",ac,fe,5e,5d)) + this->misses));
HXLINE(1692)		bool _hx_tmp2;
HXDLIN(1692)		bool _hx_tmp3;
HXDLIN(1692)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1692)		if (_this1->keyManager->checkStatusUnsafe(13,_this1->status)) {
HXLINE(1692)			_hx_tmp3 = this->startedCountdown;
            		}
            		else {
HXLINE(1692)			_hx_tmp3 = false;
            		}
HXDLIN(1692)		if (_hx_tmp3) {
HXLINE(1692)			_hx_tmp2 = this->canPause;
            		}
            		else {
HXLINE(1692)			_hx_tmp2 = false;
            		}
HXDLIN(1692)		if (_hx_tmp2) {
HXLINE(1694)			this->persistentUpdate = false;
HXLINE(1695)			this->persistentDraw = true;
HXLINE(1696)			this->paused = true;
HXLINE(1699)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < ((Float)0.1))) {
HXLINE(1702)				 ::flixel::FlxState nextState =  ::GitarooPause_obj::__alloc( HX_CTX );
HXDLIN(1702)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1702)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			else {
HXLINE(1706)				 ::flixel::math::FlxPoint boyfriendPos = ::PlayState_obj::boyfriend->getScreenPosition(null(),null());
HXLINE(1707)				 ::PauseSubState pauseSubState =  ::PauseSubState_obj::__alloc( HX_CTX ,boyfriendPos->x,boyfriendPos->y);
HXLINE(1708)				this->openSubState(pauseSubState);
HXLINE(1709)				pauseSubState->set_camera(this->camHUD);
HXLINE(1710)				boyfriendPos->put();
            			}
HXLINE(1713)			::String detailsPausedText = ( (::String)((HX_("Paused on ",cf,a1,89,e2) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic))) );
HXLINE(1716)			detailsPausedText = ( (::String)((((((HX_("Paused - ",65,2f,92,fd) + this->detailsText) + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" ",20,00,00,00)) + this->songScore)) );
            		}
HXLINE(1720)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1720)		if (_this2->keyManager->checkStatusUnsafe(54,_this2->status)) {
HXLINE(1722)			{
HXLINE(1722)				 ::flixel::FlxState nextState1 =  ::CharacterSelectState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(1722)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE(1722)					::flixel::FlxG_obj::game->_requestedState = nextState1;
            				}
            			}
HXLINE(1725)			::DiscordClient_obj::changePresence(HX_("In Character Selection Screen!",2f,82,87,37),null(),null(),true,null());
            		}
HXLINE(1729)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1729)		if (_this3->keyManager->checkStatusUnsafe(55,_this3->status)) {
HXLINE(1731)			{
HXLINE(1731)				 ::flixel::FlxState nextState2 =  ::ChartingState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(1731)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState2)) {
HXLINE(1731)					::flixel::FlxG_obj::game->_requestedState = nextState2;
            				}
            			}
HXLINE(1732)			this->canDie = false;
HXLINE(1734)			::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),null(),null(),true,null());
            		}
HXLINE(1741)		 ::HealthIcon _hx_tmp4 = this->iconP1;
HXDLIN(1741)		_hx_tmp4->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP1->get_width() - ( (Float)(150) ))))),null());
HXLINE(1742)		 ::HealthIcon _hx_tmp5 = this->iconP2;
HXDLIN(1742)		_hx_tmp5->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP2->get_width() - ( (Float)(150) ))))),null());
HXLINE(1744)		this->iconP1->updateHitbox();
HXLINE(1745)		this->iconP2->updateHitbox();
HXLINE(1747)		int iconOffset = 26;
HXLINE(1749)		 ::HealthIcon _hx_tmp6 = this->iconP1;
HXDLIN(1749)		Float _hx_tmp7 = this->healthBar->x;
HXDLIN(1749)		Float _hx_tmp8 = this->healthBar->get_width();
HXDLIN(1749)		_hx_tmp6->set_x((_hx_tmp7 + ((_hx_tmp8 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))) - ( (Float)(iconOffset) ))));
HXLINE(1750)		 ::HealthIcon _hx_tmp9 = this->iconP2;
HXDLIN(1750)		Float _hx_tmp10 = this->healthBar->x;
HXDLIN(1750)		Float _hx_tmp11 = this->healthBar->get_width();
HXDLIN(1750)		Float _hx_tmp12 = (_hx_tmp10 + (_hx_tmp11 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))));
HXDLIN(1750)		_hx_tmp9->set_x((_hx_tmp12 - (this->iconP2->get_width() - ( (Float)(iconOffset) ))));
HXLINE(1752)		if ((this->health > 2)) {
HXLINE(1753)			this->health = ( (Float)(2) );
            		}
HXLINE(1755)		if ((this->healthBar->get_percent() < 20)) {
HXLINE(1756)			this->iconP1->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(1758)			this->iconP1->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(1760)		if ((this->healthBar->get_percent() > 80)) {
HXLINE(1761)			this->iconP2->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(1763)			this->iconP2->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(1768)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1768)		if (_this4->keyManager->checkStatusUnsafe(56,_this4->status)) {
HXLINE(1769)			 ::flixel::FlxState nextState3 =  ::AnimationDebug_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXDLIN(1769)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState3)) {
HXLINE(1769)				::flixel::FlxG_obj::game->_requestedState = nextState3;
            			}
            		}
HXLINE(1771)		if (this->startingSong) {
HXLINE(1773)			if (this->startedCountdown) {
HXLINE(1775)				 ::Dynamic _hx_tmp13 = ::hx::ClassOf< ::Conductor >();
HXDLIN(1775)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(1776)				if ((::Conductor_obj::songPosition >= 0)) {
HXLINE(1777)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE(1783)			 ::Dynamic _hx_tmp14 = ::hx::ClassOf< ::Conductor >();
HXDLIN(1783)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(1785)			if (!(this->paused)) {
HXLINE(1787)				 ::PlayState _hx_tmp15 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1787)				_hx_tmp15->songTime = (_hx_tmp15->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE(1788)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1791)				if ((::Conductor_obj::lastSongPos != ::Conductor_obj::songPosition)) {
HXLINE(1793)					this->songTime = ((this->songTime + ::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE(1794)					::Conductor_obj::lastSongPos = ::Conductor_obj::songPosition;
            				}
            			}
            		}
HXLINE(1803)		bool _hx_tmp16;
HXDLIN(1803)		if (this->generatedMusic) {
HXLINE(1803)			_hx_tmp16 = ::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) )))) );
            		}
            		else {
HXLINE(1803)			_hx_tmp16 = false;
            		}
HXDLIN(1803)		if (_hx_tmp16) {
HXLINE(1805)			bool _hx_tmp17 = (::hx::Mod(this->curBeat,4) == 0);
HXLINE(1810)			bool _hx_tmp18;
HXDLIN(1810)			Float _hx_tmp19 = this->camFollow->x;
HXDLIN(1810)			if ((_hx_tmp19 != (::PlayState_obj::dad->getMidpoint(null())->x + 150))) {
HXLINE(1810)				_hx_tmp18 = !(( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(1810)				_hx_tmp18 = false;
            			}
HXDLIN(1810)			if (_hx_tmp18) {
HXLINE(1812)				 ::flixel::FlxObject _hx_tmp20 = this->camFollow;
HXDLIN(1812)				Float _hx_tmp21 = (::PlayState_obj::dad->getMidpoint(null())->x + 150);
HXDLIN(1812)				_hx_tmp20->setPosition(_hx_tmp21,(::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(100) )));
HXLINE(1815)				::String _hx_switch_1 = ::PlayState_obj::dad->curCharacter;
            				if (  (_hx_switch_1==HX_("mom",cb,16,53,00)) ){
HXLINE(1818)					 ::flixel::FlxObject _hx_tmp22 = this->camFollow;
HXDLIN(1818)					_hx_tmp22->set_y(::PlayState_obj::dad->getMidpoint(null())->y);
HXDLIN(1818)					goto _hx_goto_81;
            				}
            				if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ){
HXLINE(1820)					 ::flixel::FlxObject _hx_tmp23 = this->camFollow;
HXDLIN(1820)					_hx_tmp23->set_y((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(430) )));
HXLINE(1821)					 ::flixel::FlxObject _hx_tmp24 = this->camFollow;
HXDLIN(1821)					_hx_tmp24->set_x((::PlayState_obj::dad->getMidpoint(null())->x - ( (Float)(100) )));
HXLINE(1819)					goto _hx_goto_81;
            				}
            				if (  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE(1823)					 ::flixel::FlxObject _hx_tmp25 = this->camFollow;
HXDLIN(1823)					_hx_tmp25->set_y((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(430) )));
HXLINE(1824)					 ::flixel::FlxObject _hx_tmp26 = this->camFollow;
HXDLIN(1824)					_hx_tmp26->set_x((::PlayState_obj::dad->getMidpoint(null())->x - ( (Float)(100) )));
HXLINE(1822)					goto _hx_goto_81;
            				}
            				_hx_goto_81:;
HXLINE(1827)				if ((::PlayState_obj::dad->curCharacter == HX_("mom",cb,16,53,00))) {
HXLINE(1828)					this->vocals->set_volume(( (Float)(1) ));
            				}
HXLINE(1830)				if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(1832)					this->tweenCamIn();
            				}
            			}
HXLINE(1836)			bool _hx_tmp27;
HXDLIN(1836)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(1836)				Float _hx_tmp28 = this->camFollow->x;
HXDLIN(1836)				_hx_tmp27 = (_hx_tmp28 != (::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )));
            			}
            			else {
HXLINE(1836)				_hx_tmp27 = false;
            			}
HXDLIN(1836)			if (_hx_tmp27) {
HXLINE(1838)				 ::flixel::FlxObject _hx_tmp29 = this->camFollow;
HXDLIN(1838)				Float _hx_tmp30 = (::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN(1838)				_hx_tmp29->setPosition(_hx_tmp30,(::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(100) )));
HXLINE(1840)				::String _hx_switch_2 = ::PlayState_obj::curStage;
            				if (  (_hx_switch_2==HX_("limo",1f,17,b3,47)) ){
HXLINE(1843)					 ::flixel::FlxObject _hx_tmp31 = this->camFollow;
HXDLIN(1843)					_hx_tmp31->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(300) )));
HXDLIN(1843)					goto _hx_goto_82;
            				}
            				if (  (_hx_switch_2==HX_("mall",d4,3a,56,48)) ){
HXLINE(1845)					 ::flixel::FlxObject _hx_tmp32 = this->camFollow;
HXDLIN(1845)					_hx_tmp32->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXDLIN(1845)					goto _hx_goto_82;
            				}
            				if (  (_hx_switch_2==HX_("school",74,b8,c8,40)) ){
HXLINE(1847)					 ::flixel::FlxObject _hx_tmp33 = this->camFollow;
HXDLIN(1847)					_hx_tmp33->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(1848)					 ::flixel::FlxObject _hx_tmp34 = this->camFollow;
HXDLIN(1848)					_hx_tmp34->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(1846)					goto _hx_goto_82;
            				}
            				if (  (_hx_switch_2==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(1850)					 ::flixel::FlxObject _hx_tmp35 = this->camFollow;
HXDLIN(1850)					_hx_tmp35->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(1851)					 ::flixel::FlxObject _hx_tmp36 = this->camFollow;
HXDLIN(1851)					_hx_tmp36->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(1849)					goto _hx_goto_82;
            				}
            				_hx_goto_82:;
HXLINE(1854)				if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(1856)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),1)),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())));
            				}
            			}
            		}
HXLINE(1861)		if (this->camZooming) {
HXLINE(1863)			Float a = this->defaultCamZoom;
HXDLIN(1863)			::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(1864)			this->camHUD->set_zoom((1 + (((Float)0.95) * (this->camHUD->zoom - ( (Float)(1) )))));
            		}
HXLINE(1870)		if ((this->curSong == HX_("Fresh",4e,f6,b3,99))) {
HXLINE(1872)			switch((int)(this->curBeat)){
            				case (int)16: {
HXLINE(1875)					this->camZooming = true;
HXLINE(1876)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)48: {
HXLINE(1878)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)80: {
HXLINE(1880)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)112: {
HXLINE(1882)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)163: {
            				}
            				break;
            			}
            		}
HXLINE(1889)		if ((this->curSong == HX_("Bopeebo",90,29,16,da))) {
HXLINE(1891)			switch((int)(this->curBeat)){
            				case (int)128: case (int)129: case (int)130: {
HXLINE(1894)					this->vocals->set_volume(( (Float)(0) ));
            				}
            				break;
            			}
            		}
HXLINE(1902)		if (::PlayerSettings_obj::player1->controls->_reset->check()) {
HXLINE(1904)			this->health = ( (Float)(0) );
HXLINE(1905)			::haxe::Log_obj::trace(HX_("RESET = True",82,e0,2a,fe),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),1905,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
            		}
HXLINE(1909)		if (::PlayerSettings_obj::player1->controls->_cheat->check()) {
HXLINE(1911)			 ::PlayState _hx_tmp37 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1911)			_hx_tmp37->health = (_hx_tmp37->health + 1);
HXLINE(1912)			::haxe::Log_obj::trace(HX_("User is cheating!",b1,80,7f,1b),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),1912,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
            		}
HXLINE(1915)		bool _hx_tmp38;
HXDLIN(1915)		bool _hx_tmp39;
HXDLIN(1915)		if ((this->health <= 0)) {
HXLINE(1915)			_hx_tmp39 = !(::PlayState_obj::practiceMode);
            		}
            		else {
HXLINE(1915)			_hx_tmp39 = false;
            		}
HXDLIN(1915)		if (_hx_tmp39) {
HXLINE(1915)			_hx_tmp38 = this->canDie;
            		}
            		else {
HXLINE(1915)			_hx_tmp38 = false;
            		}
HXDLIN(1915)		if (_hx_tmp38) {
HXLINE(1917)			::scripting::Script_obj::onPlayerDeath();
HXLINE(1919)			::PlayState_obj::boyfriend->stunned = true;
HXLINE(1921)			this->persistentUpdate = false;
HXLINE(1922)			this->persistentDraw = false;
HXLINE(1923)			this->paused = true;
HXLINE(1925)			{
HXLINE(1925)				 ::flixel::_hx_system::FlxSound _this5 = this->vocals;
HXDLIN(1925)				_this5->cleanup(_this5->autoDestroy,true);
            			}
HXLINE(1926)			{
HXLINE(1926)				 ::flixel::_hx_system::FlxSound _this6 = ::flixel::FlxG_obj::sound->music;
HXDLIN(1926)				_this6->cleanup(_this6->autoDestroy,true);
            			}
HXLINE(1928)			 ::Dynamic _hx_tmp40 = ::hx::ClassOf< ::PlayState >();
HXDLIN(1928)			::PlayState_obj::deathCounter = (::PlayState_obj::deathCounter + 1);
HXLINE(1930)			Float _hx_tmp41 = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(1930)			this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp41,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
HXLINE(1936)			::DiscordClient_obj::changePresence(this->detailsText,( (::String)((((((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")\nScore: ",b7,0c,8e,4a)) + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + this->misses)) ),this->iconRPC,null(),null());
            		}
HXLINE(1940)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE(1942)			if (((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < 1500)) {
HXLINE(1944)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE(1945)				this->notes->add(dunceNote).StaticCast<  ::Note >();
HXLINE(1947)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(1948)				this->unspawnNotes->removeRange(index,1);
            			}
            		}
HXLINE(1952)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1955_update)
HXLINE(1957)				if (daNote->tooLate) {
HXLINE(1959)					daNote->set_active(false);
HXLINE(1960)					daNote->set_visible(false);
            				}
            				else {
HXLINE(1964)					daNote->set_visible(true);
HXLINE(1965)					daNote->set_active(true);
            				}
HXLINE(1968)				 ::Note daNote1 = daNote;
HXDLIN(1968)				Float _gthis1 = _gthis->strumLine->y;
HXDLIN(1968)				Float _hx_tmp = (::Conductor_obj::songPosition - daNote->strumTime);
HXDLIN(1968)				daNote1->set_y((_gthis1 - (_hx_tmp * (((Float)0.45) * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2)))));
HXLINE(1971)				bool _hx_tmp1;
HXDLIN(1971)				bool _hx_tmp2;
HXDLIN(1971)				if (daNote->isSustainNote) {
HXLINE(1971)					_hx_tmp2 = ((daNote->y + daNote->offset->y) <= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            				}
            				else {
HXLINE(1971)					_hx_tmp2 = false;
            				}
HXDLIN(1971)				if (_hx_tmp2) {
HXLINE(1973)					if (daNote->mustPress) {
HXLINE(1973)						if (!(daNote->wasGoodHit)) {
HXLINE(1973)							if (daNote->prevNote->wasGoodHit) {
HXLINE(1971)								_hx_tmp1 = !(daNote->canBeHit);
            							}
            							else {
HXLINE(1971)								_hx_tmp1 = false;
            							}
            						}
            						else {
HXLINE(1971)							_hx_tmp1 = true;
            						}
            					}
            					else {
HXLINE(1971)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE(1971)					_hx_tmp1 = false;
            				}
HXDLIN(1971)				if (_hx_tmp1) {
HXLINE(1975)					Float swagRect = ((_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y);
HXDLIN(1975)					Float swagRect1 = (daNote->get_width() * ( (Float)(2) ));
HXDLIN(1975)					 ::flixel::math::FlxRect swagRect2 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,swagRect,swagRect1,(daNote->get_height() * ( (Float)(2) )));
HXLINE(1976)					 ::flixel::math::FlxRect swagRect3 = swagRect2;
HXDLIN(1976)					swagRect3->y = (swagRect3->y / daNote->scale->y);
HXLINE(1977)					 ::flixel::math::FlxRect swagRect4 = swagRect2;
HXDLIN(1977)					swagRect4->height = (swagRect4->height - swagRect2->y);
HXLINE(1979)					daNote->set_clipRect(swagRect2);
            				}
HXLINE(1982)				bool _hx_tmp3;
HXDLIN(1982)				if (!(daNote->mustPress)) {
HXLINE(1982)					_hx_tmp3 = daNote->wasGoodHit;
            				}
            				else {
HXLINE(1982)					_hx_tmp3 = false;
            				}
HXDLIN(1982)				if (_hx_tmp3) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            					void _hx_run( ::flixel::FlxSprite spr){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2009_update)
HXLINE(2009)						if ((::Math_obj::abs(( (Float)(daNote->noteData) )) == spr->ID)) {
HXLINE(2011)							spr->animation->play(HX_("confirm",00,9d,39,10),null(),null(),null());
HXLINE(2012)							_gthis->sustain2(spr->ID,spr,daNote);
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1984)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) )) {
HXLINE(1985)						_gthis->camZooming = true;
            					}
HXLINE(1987)					::String altAnim = HX_("",00,00,00,00);
HXLINE(1989)					if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(_gthis->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(1991)						if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(_gthis->curStep) ) / ( (Float)(16) ))))->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) )) {
HXLINE(1992)							altAnim = HX_("-alt",1c,93,08,1e);
            						}
            					}
HXLINE(1995)					Float _hx_switch_3 = ::Math_obj::abs(( (Float)(daNote->noteData) ));
            					if (  (_hx_switch_3==( (Float)(0) )) ){
HXLINE(1998)						::PlayState_obj::dad->playAnim((HX_("singLEFT",d6,39,ef,3b) + altAnim),true,null(),null());
HXDLIN(1998)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_3==( (Float)(1) )) ){
HXLINE(2000)						::PlayState_obj::dad->playAnim((HX_("singDOWN",31,2a,ad,36) + altAnim),true,null(),null());
HXDLIN(2000)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_3==( (Float)(2) )) ){
HXLINE(2002)						::PlayState_obj::dad->playAnim((HX_("singUP",6a,52,21,b9) + altAnim),true,null(),null());
HXDLIN(2002)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_3==( (Float)(3) )) ){
HXLINE(2004)						::PlayState_obj::dad->playAnim((HX_("singRIGHT",0d,6f,70,ac) + altAnim),true,null(),null());
HXDLIN(2004)						goto _hx_goto_83;
            					}
            					_hx_goto_83:;
HXLINE(2007)					::PlayState_obj::player2Strums->forEach( ::Dynamic(new _hx_Closure_0(_gthis,daNote)),null());
HXLINE(2020)					::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(2022)					if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(2023)						_gthis->vocals->set_volume(( (Float)(1) ));
            					}
HXLINE(2025)					daNote->kill();
HXLINE(2026)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(2027)					daNote->destroy();
            				}
HXLINE(2030)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) )) {
HXLINE(2031)					 ::Note daNote2 = daNote;
HXDLIN(2031)					Float _gthis2 = _gthis->strumLine->y;
HXDLIN(2031)					Float _hx_tmp4 = (::Conductor_obj::songPosition - daNote->strumTime);
HXDLIN(2031)					daNote2->set_y((_gthis2 - (_hx_tmp4 * (((Float)-0.45) * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2)))));
            				}
            				else {
HXLINE(2033)					 ::Note daNote3 = daNote;
HXDLIN(2033)					Float _gthis3 = _gthis->strumLine->y;
HXDLIN(2033)					Float _hx_tmp5 = (::Conductor_obj::songPosition - daNote->strumTime);
HXDLIN(2033)					daNote3->set_y((_gthis3 - (_hx_tmp5 * (((Float)0.45) * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2)))));
            				}
HXLINE(2037)				bool _hx_tmp6;
HXDLIN(2037)				bool _hx_tmp7;
HXDLIN(2037)				Float daNote4 = daNote->y;
HXDLIN(2037)				if ((daNote4 < -(daNote->get_height()))) {
HXLINE(2037)					_hx_tmp7 = !(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) ));
            				}
            				else {
HXLINE(2037)					_hx_tmp7 = false;
            				}
HXDLIN(2037)				if (!(_hx_tmp7)) {
HXLINE(2037)					if ((daNote->y >= (_gthis->strumLine->y + 106))) {
HXLINE(2037)						_hx_tmp6 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) );
            					}
            					else {
HXLINE(2037)						_hx_tmp6 = false;
            					}
            				}
            				else {
HXLINE(2037)					_hx_tmp6 = true;
            				}
HXDLIN(2037)				if (_hx_tmp6) {
HXLINE(2039)					bool _hx_tmp8;
HXDLIN(2039)					if (daNote->isSustainNote) {
HXLINE(2039)						_hx_tmp8 = daNote->wasGoodHit;
            					}
            					else {
HXLINE(2039)						_hx_tmp8 = false;
            					}
HXDLIN(2039)					if (_hx_tmp8) {
HXLINE(2041)						daNote->kill();
HXLINE(2042)						_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(2043)						daNote->destroy();
            					}
            					else {
HXLINE(2047)						bool daNote5 = daNote->isSustainNote;
HXLINE(2051)						if ((_gthis->health < 0)) {
HXLINE(2052)							_gthis->health = ( (Float)(0) );
            						}
HXLINE(2054)						if ((_gthis->health > 0)) {
HXLINE(2055)							 ::PlayState _gthis4 = _gthis;
HXDLIN(2055)							_gthis4->health = (_gthis4->health - ((Float)0.075));
            						}
HXLINE(2056)						_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(2057)						_gthis->noteMiss(daNote->noteData,daNote);
            					}
HXLINE(2060)					daNote->set_active(false);
HXLINE(2061)					daNote->set_visible(false);
HXLINE(2063)					daNote->kill();
HXLINE(2064)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(2065)					daNote->destroy();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2070_update)
HXLINE(2071)				if (_gthis->strumming2->__get(spr->ID)) {
HXLINE(2073)					spr->animation->play(HX_("confirm",00,9d,39,10),null(),null(),null());
            				}
HXLINE(2076)				bool _hx_tmp;
HXDLIN(2076)				if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(2076)					_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)));
            				}
            				else {
HXLINE(2076)					_hx_tmp = false;
            				}
HXDLIN(2076)				if (_hx_tmp) {
HXLINE(2078)					spr->centerOffsets(null());
HXLINE(2079)					 ::flixel::math::FlxPoint fh = spr->offset;
HXDLIN(2079)					fh->set_x((fh->x - ( (Float)(13) )));
HXLINE(2080)					 ::flixel::math::FlxPoint fh1 = spr->offset;
HXDLIN(2080)					fh1->set_y((fh1->y - ( (Float)(13) )));
            				}
            				else {
HXLINE(2083)					spr->centerOffsets(null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1954)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(_gthis)),null());
HXLINE(2069)			::PlayState_obj::player2Strums->forEach( ::Dynamic(new _hx_Closure_2(_gthis)),null());
            		}
HXLINE(2087)		if (!(this->inCutscene)) {
HXLINE(2088)			this->keyShit();
            		}
            	}


void PlayState_obj::sustain2(int strum, ::flixel::FlxSprite spr, ::Note note){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2097_sustain2)
HXDLIN(2097)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2098)		Float length = note->sustainLength;
HXLINE(2100)		if ((length > 0)) {
HXLINE(2102)			this->strumming2[strum] = true;
            		}
HXLINE(2105)		Float bps = (( (Float)(::Conductor_obj::bpm) ) / ( (Float)(60) ));
HXLINE(2106)		Float spb = (( (Float)(1) ) / bps);
HXLINE(2108)		if (!(note->isSustainNote)) {
            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,spr, ::PlayState,_gthis,Float,length,int,strum) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2113_sustain2)
HXLINE(2113)				if (!(_gthis->strumming2->__get(strum))) {
HXLINE(2115)					spr->animation->play(HX_("static",ae,dc,fb,05),true,null(),null());
            				}
            				else {
HXLINE(2116)					if ((length > 0)) {
HXLINE(2117)						_gthis->strumming2[strum] = false;
HXLINE(2118)						spr->animation->play(HX_("static",ae,dc,fb,05),true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2111)			Float _hx_tmp;
HXDLIN(2111)			if ((length == 0)) {
HXLINE(2111)				_hx_tmp = ((Float)0.2);
            			}
            			else {
HXLINE(2111)				_hx_tmp = (((length / ::Conductor_obj::crochet) * spb) + ((Float)0.1));
            			}
HXDLIN(2111)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(_hx_tmp, ::Dynamic(new _hx_Closure_0(spr,_gthis,length,strum)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,sustain2,(void))

void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2126_endSong)
HXLINE(2127)		::PlayState_obj::deathCounter = 0;
HXLINE(2129)		this->canPause = false;
HXLINE(2130)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(2131)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(2132)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(2135)			::Highscore_obj::saveScore(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),this->songScore,::PlayState_obj::storyDifficulty);
            		}
HXLINE(2139)		if (::PlayState_obj::isStoryMode) {
HXLINE(2141)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN(2141)			::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + this->songScore);
HXLINE(2143)			::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2145)			if ((::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(2147)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(2147)				::String library = null();
HXDLIN(2147)				_hx_tmp1->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(2149)				this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(2150)				this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(2152)				{
HXLINE(2152)					 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2152)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2152)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE(2154)				::flixel::FlxG_obj::save->data->__SetField(HX_("weekUnlocked",37,64,c4,a5),::StoryMenuState_obj::weekUnlocked,::hx::paccDynamic);
HXLINE(2155)				::flixel::FlxG_obj::save->flush(null(),null());
            			}
            			else {
HXLINE(2159)				::String difficulty = HX_("",00,00,00,00);
HXLINE(2161)				if ((::PlayState_obj::storyDifficulty == 0)) {
HXLINE(2162)					difficulty = HX_("-easy",af,a6,14,2c);
            				}
HXLINE(2164)				if ((::PlayState_obj::storyDifficulty == 2)) {
HXLINE(2165)					difficulty = HX_("-hard",98,49,10,2e);
            				}
HXLINE(2167)				::haxe::Log_obj::trace(HX_("LOADING NEXT SONG",5e,07,d0,ca),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2167,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2168)				 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(2168)				::String _hx_tmp3 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN(2168)				_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2168,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2170)				if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("eggnog",61,04,ba,f4))) {
HXLINE(2172)					 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(2172)					 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(2174)					blackShit1->scrollFactor->set(null(),null());
HXLINE(2175)					this->add(blackShit1);
HXLINE(2176)					this->camHUD->set_visible(false);
HXLINE(2178)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN(2178)					_hx_tmp4->play(::Paths_obj::sound(HX_("Lights_Shut_off",86,a9,43,29),null()),null(),null(),null(),null(),null());
            				}
HXLINE(2181)				::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(2182)				::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(2183)				::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(2185)				::String _hx_tmp5 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN(2185)				::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp5,::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2186)				{
HXLINE(2186)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2186)					_this->cleanup(_this->autoDestroy,true);
            				}
            			}
            		}
            		else {
HXLINE(2191)			::haxe::Log_obj::trace(HX_("WENT BACK TO FREEPLAY??",58,1b,be,6a),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2191,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(2192)			{
HXLINE(2192)				 ::flixel::FlxState nextState1 =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2192)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE(2192)					::flixel::FlxG_obj::game->_requestedState = nextState1;
            				}
            			}
HXLINE(2193)			::PlayState_obj::changedDifficulty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

void PlayState_obj::popUpScore(Float strumtime, ::Note daNote){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::flixel::text::FlxText,coolText, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween tween){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2355_popUpScore)
HXLINE(2356)			coolText->destroy();
HXLINE(2357)			comboSpr1->destroy();
HXLINE(2359)			rating->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2200_popUpScore)
HXLINE(2201)		Float noteDiff = ::Math_obj::abs((strumtime - ::Conductor_obj::songPosition));
HXLINE(2203)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(2205)		::String placement = ::Std_obj::string(this->combo);
HXLINE(2207)		 ::flixel::text::FlxText coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,placement,32,null());
HXLINE(2208)		{
HXLINE(2208)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(2208)			bool _hx_tmp;
HXDLIN(2208)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(2208)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(2208)					_hx_tmp = false;
            				}
            			}
HXDLIN(2208)			if (_hx_tmp) {
HXLINE(2208)				 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN(2208)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(2208)				coolText1->set_x(((( (Float)(_hx_tmp1) ) - coolText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2208)			bool _hx_tmp2;
HXDLIN(2208)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(2208)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE(2208)					_hx_tmp2 = false;
            				}
            			}
HXDLIN(2208)			if (_hx_tmp2) {
HXLINE(2208)				 ::flixel::text::FlxText coolText2 = coolText;
HXDLIN(2208)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(2208)				coolText2->set_y(((( (Float)(_hx_tmp3) ) - coolText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2209)		coolText->set_x((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.55)));
HXLINE(2212)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(2213)		int score = 350;
HXLINE(2215)		::String daRating = HX_("sick",be,8c,53,4c);
HXLINE(2217)		bool isSick = true;
HXLINE(2219)		if ((noteDiff > (::Conductor_obj::safeZoneOffset * ((Float)0.9)))) {
HXLINE(2221)			daRating = HX_("shit",c0,cf,52,4c);
HXLINE(2222)			score = 50;
HXLINE(2223)			isSick = false;
            		}
            		else {
HXLINE(2225)			if ((noteDiff > (::Conductor_obj::safeZoneOffset * ((Float)0.75)))) {
HXLINE(2227)				daRating = HX_("bad",c5,b1,4a,00);
HXLINE(2228)				score = 100;
HXLINE(2229)				isSick = false;
            			}
            			else {
HXLINE(2231)				if ((noteDiff > (::Conductor_obj::safeZoneOffset * ((Float)0.2)))) {
HXLINE(2233)					daRating = HX_("good",3d,95,69,44);
HXLINE(2234)					score = 200;
HXLINE(2235)					isSick = false;
            				}
            			}
            		}
HXLINE(2238)		if (isSick) {
HXLINE(2240)			 ::NoteSplash noteSplash =  ::NoteSplash_obj::__alloc( HX_CTX ,daNote->x,daNote->y,daNote->noteData);
HXLINE(2241)			this->add(noteSplash);
HXLINE(2243)			noteSplash->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(2246)		 ::PlayState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2246)		_hx_tmp4->songScore = (_hx_tmp4->songScore + score);
HXLINE(2256)		::String pixelShitPart1 = HX_("",00,00,00,00);
HXLINE(2257)		::String pixelShitPart2 = HX_("",00,00,00,00);
HXLINE(2259)		if (::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE(2261)			pixelShitPart1 = HX_("weeb/pixelUI/",79,62,e4,09);
HXLINE(2262)			pixelShitPart2 = HX_("-pixel",39,03,b3,c0);
            		}
HXLINE(2265)		 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2265)		::String library = null();
HXDLIN(2265)		rating1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + daRating) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(2266)		{
HXLINE(2266)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(2266)			bool _hx_tmp5;
HXDLIN(2266)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(2266)					_hx_tmp5 = true;
            				}
            				break;
            				default:{
HXLINE(2266)					_hx_tmp5 = false;
            				}
            			}
HXDLIN(2266)			if (_hx_tmp5) {
HXLINE(2266)				 ::flixel::FlxSprite rating2 = rating;
HXDLIN(2266)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN(2266)				rating2->set_x(((( (Float)(_hx_tmp6) ) - rating->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2266)			bool _hx_tmp7;
HXDLIN(2266)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(2266)					_hx_tmp7 = true;
            				}
            				break;
            				default:{
HXLINE(2266)					_hx_tmp7 = false;
            				}
            			}
HXDLIN(2266)			if (_hx_tmp7) {
HXLINE(2266)				 ::flixel::FlxSprite rating3 = rating;
HXDLIN(2266)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN(2266)				rating3->set_y(((( (Float)(_hx_tmp8) ) - rating->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2267)		rating->set_x((coolText->x - ( (Float)(40) )));
HXLINE(2268)		rating->set_y((rating->y - ( (Float)(60) )));
HXLINE(2269)		rating->acceleration->set_y(( (Float)(550) ));
HXLINE(2270)		 ::flixel::math::FlxPoint fh = rating->velocity;
HXDLIN(2270)		Float fh1 = fh->y;
HXDLIN(2270)		fh->set_y((fh1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,175,null())) )));
HXLINE(2271)		 ::flixel::math::FlxPoint fh2 = rating->velocity;
HXDLIN(2271)		Float fh3 = fh2->x;
HXDLIN(2271)		fh2->set_x((fh3 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(0,10,null())) )));
HXLINE(2273)		 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2273)		::String library1 = null();
HXDLIN(2273)		 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(2274)		{
HXLINE(2274)			 ::flixel::util::FlxAxes axes2 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(2274)			bool _hx_tmp9;
HXDLIN(2274)			switch((int)(axes2->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(2274)					_hx_tmp9 = true;
            				}
            				break;
            				default:{
HXLINE(2274)					_hx_tmp9 = false;
            				}
            			}
HXDLIN(2274)			if (_hx_tmp9) {
HXLINE(2274)				 ::flixel::FlxSprite comboSpr2 = comboSpr1;
HXDLIN(2274)				int _hx_tmp10 = ::flixel::FlxG_obj::width;
HXDLIN(2274)				comboSpr2->set_x(((( (Float)(_hx_tmp10) ) - comboSpr1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2274)			bool _hx_tmp11;
HXDLIN(2274)			switch((int)(axes2->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(2274)					_hx_tmp11 = true;
            				}
            				break;
            				default:{
HXLINE(2274)					_hx_tmp11 = false;
            				}
            			}
HXDLIN(2274)			if (_hx_tmp11) {
HXLINE(2274)				 ::flixel::FlxSprite comboSpr3 = comboSpr1;
HXDLIN(2274)				int _hx_tmp12 = ::flixel::FlxG_obj::height;
HXDLIN(2274)				comboSpr3->set_y(((( (Float)(_hx_tmp12) ) - comboSpr1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2275)		comboSpr1->set_x(coolText->x);
HXLINE(2276)		comboSpr1->set_y((comboSpr1->y + 200));
HXLINE(2277)		comboSpr1->acceleration->set_y(( (Float)(600) ));
HXLINE(2278)		 ::flixel::math::FlxPoint fh4 = comboSpr1->velocity;
HXDLIN(2278)		fh4->set_y((fh4->y - ( (Float)(150) )));
HXLINE(2280)		 ::flixel::math::FlxPoint fh5 = comboSpr1->velocity;
HXDLIN(2280)		Float fh6 = fh5->x;
HXDLIN(2280)		fh5->set_x((fh6 + ::flixel::FlxG_obj::random->_hx_int(1,10,null())));
HXLINE(2281)		this->add(rating);
HXLINE(2283)		if (!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)))) {
HXLINE(2285)			 ::flixel::FlxSprite rating4 = rating;
HXDLIN(2285)			rating4->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE(2286)			rating->set_antialiasing(true);
HXLINE(2287)			 ::flixel::FlxSprite comboSpr4 = comboSpr1;
HXDLIN(2287)			comboSpr4->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
HXLINE(2288)			comboSpr1->set_antialiasing(true);
            		}
            		else {
HXLINE(2292)			 ::flixel::FlxSprite rating5 = rating;
HXDLIN(2292)			Float _hx_tmp13 = rating->get_width();
HXDLIN(2292)			rating5->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp13 * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
HXLINE(2293)			 ::flixel::FlxSprite comboSpr5 = comboSpr1;
HXDLIN(2293)			Float _hx_tmp14 = comboSpr1->get_width();
HXDLIN(2293)			comboSpr5->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp14 * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
            		}
HXLINE(2296)		comboSpr1->updateHitbox();
HXLINE(2297)		rating->updateHitbox();
HXLINE(2299)		::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE(2301)		seperatedScore->push(::Math_obj::floor((( (Float)(this->combo) ) / ( (Float)(100) ))));
HXLINE(2302)		seperatedScore->push(::Math_obj::floor((( (Float)((this->combo - (seperatedScore->__get(0) * 100))) ) / ( (Float)(10) ))));
HXLINE(2303)		seperatedScore->push(::hx::Mod(this->combo,10));
HXLINE(2305)		int daLoop = 0;
HXLINE(2306)		{
HXLINE(2306)			int _g = 0;
HXDLIN(2306)			while((_g < seperatedScore->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,numScore1) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2334_popUpScore)
HXLINE(2334)					numScore1->destroy();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2306)				int i = seperatedScore->__get(_g);
HXDLIN(2306)				_g = (_g + 1);
HXLINE(2308)				 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2308)				::String library2 = null();
HXDLIN(2308)				 ::flixel::FlxSprite numScore1 = numScore->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (((pixelShitPart1 + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(2309)				{
HXLINE(2309)					 ::flixel::util::FlxAxes axes3 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(2309)					bool _hx_tmp15;
HXDLIN(2309)					switch((int)(axes3->_hx_getIndex())){
            						case (int)0: case (int)2: {
HXLINE(2309)							_hx_tmp15 = true;
            						}
            						break;
            						default:{
HXLINE(2309)							_hx_tmp15 = false;
            						}
            					}
HXDLIN(2309)					if (_hx_tmp15) {
HXLINE(2309)						 ::flixel::FlxSprite numScore2 = numScore1;
HXDLIN(2309)						int _hx_tmp16 = ::flixel::FlxG_obj::width;
HXDLIN(2309)						numScore2->set_x(((( (Float)(_hx_tmp16) ) - numScore1->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(2309)					bool _hx_tmp17;
HXDLIN(2309)					switch((int)(axes3->_hx_getIndex())){
            						case (int)1: case (int)2: {
HXLINE(2309)							_hx_tmp17 = true;
            						}
            						break;
            						default:{
HXLINE(2309)							_hx_tmp17 = false;
            						}
            					}
HXDLIN(2309)					if (_hx_tmp17) {
HXLINE(2309)						 ::flixel::FlxSprite numScore3 = numScore1;
HXDLIN(2309)						int _hx_tmp18 = ::flixel::FlxG_obj::height;
HXDLIN(2309)						numScore3->set_y(((( (Float)(_hx_tmp18) ) - numScore1->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(2310)				numScore1->set_x(((coolText->x + (43 * daLoop)) - ( (Float)(90) )));
HXLINE(2311)				numScore1->set_y((numScore1->y + 280));
HXLINE(2313)				if (!(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)))) {
HXLINE(2315)					numScore1->set_antialiasing(true);
HXLINE(2316)					 ::flixel::FlxSprite numScore4 = numScore1;
HXDLIN(2316)					numScore4->setGraphicSize(::Std_obj::_hx_int((numScore1->get_width() * ((Float)0.5))),null());
            				}
            				else {
HXLINE(2320)					 ::flixel::FlxSprite numScore5 = numScore1;
HXDLIN(2320)					Float _hx_tmp19 = numScore1->get_width();
HXDLIN(2320)					numScore5->setGraphicSize(::Std_obj::_hx_int((_hx_tmp19 * ::PlayState_obj::daPixelZoom)),null());
            				}
HXLINE(2322)				numScore1->updateHitbox();
HXLINE(2324)				 ::flixel::math::FlxPoint numScore6 = numScore1->acceleration;
HXDLIN(2324)				numScore6->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(200,300,null())) ));
HXLINE(2325)				 ::flixel::math::FlxPoint fh7 = numScore1->velocity;
HXDLIN(2325)				Float fh8 = fh7->y;
HXDLIN(2325)				fh7->set_y((fh8 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,160,null())) )));
HXLINE(2326)				 ::flixel::math::FlxPoint numScore7 = numScore1->velocity;
HXDLIN(2326)				numScore7->set_x(::flixel::FlxG_obj::random->_hx_float(-5,5,null()));
HXLINE(2328)				bool _hx_tmp20;
HXDLIN(2328)				if ((this->combo < 10)) {
HXLINE(2328)					_hx_tmp20 = (this->combo == 0);
            				}
            				else {
HXLINE(2328)					_hx_tmp20 = true;
            				}
HXDLIN(2328)				if (_hx_tmp20) {
HXLINE(2329)					this->add(numScore1);
            				}
HXLINE(2331)				::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.002)))
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(numScore1)))));
HXLINE(2339)				daLoop = (daLoop + 1);
            			}
            		}
HXLINE(2346)		 ::flixel::text::FlxText coolText3 = coolText;
HXDLIN(2346)		coolText3->set_text(::Std_obj::string(seperatedScore));
HXLINE(2349)		::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))));
HXLINE(2353)		::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(coolText,comboSpr1,rating)))));
HXLINE(2364)		 ::PlayState _hx_tmp21 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2364)		_hx_tmp21->curSection = (_hx_tmp21->curSection + 1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,popUpScore,(void))

void PlayState_obj::keyShit(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2536_keyShit)
HXLINE(2536)			bool _hx_tmp = (daNote->y < _gthis->strumLine->y);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4,::Array< bool >,pressArray3,::Array< bool >,holdArray3) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2550_keyShit)
HXLINE(2551)			bool _hx_tmp;
HXDLIN(2551)			if (pressArray3->__get(spr->ID)) {
HXLINE(2551)				_hx_tmp = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            			}
            			else {
HXLINE(2551)				_hx_tmp = false;
            			}
HXDLIN(2551)			if (_hx_tmp) {
HXLINE(2552)				spr->animation->play(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            			}
HXLINE(2553)			if (!(holdArray3->__get(spr->ID))) {
HXLINE(2554)				spr->animation->play(HX_("static",ae,dc,fb,05),null(),null(),null());
            			}
HXLINE(2556)			bool _hx_tmp1;
HXDLIN(2556)			if ((spr->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(2556)				_hx_tmp1 = !(::StringTools_obj::startsWith(::PlayState_obj::curStage,HX_("school",74,b8,c8,40)));
            			}
            			else {
HXLINE(2556)				_hx_tmp1 = false;
            			}
HXDLIN(2556)			if (_hx_tmp1) {
HXLINE(2558)				spr->centerOffsets(null());
HXLINE(2559)				 ::flixel::math::FlxPoint fh = spr->offset;
HXDLIN(2559)				fh->set_x((fh->x - ( (Float)(13) )));
HXLINE(2560)				 ::flixel::math::FlxPoint fh1 = spr->offset;
HXDLIN(2560)				fh1->set_y((fh1->y - ( (Float)(13) )));
            			}
            			else {
HXLINE(2563)				spr->centerOffsets(null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2368_keyShit)
HXDLIN(2368)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2387)		bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(2387)		bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(2387)		bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(2387)		::Array< bool > holdArray3 = ::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check());
HXLINE(2389)		bool pressArray = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXLINE(2390)		bool pressArray1 = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE(2391)		bool pressArray2 = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE(2388)		::Array< bool > pressArray3 = ::Array_obj< bool >::__new(4)->init(0,pressArray)->init(1,pressArray1)->init(2,pressArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightP->check());
HXLINE(2394)		bool releaseArray_0 = ::PlayerSettings_obj::player1->controls->_leftR->check();
HXDLIN(2394)		bool releaseArray_1 = ::PlayerSettings_obj::player1->controls->_downR->check();
HXDLIN(2394)		bool releaseArray_2 = ::PlayerSettings_obj::player1->controls->_upR->check();
HXDLIN(2394)		bool releaseArray_3 = ::PlayerSettings_obj::player1->controls->_rightR->check();
HXLINE(2403)		bool _hx_tmp;
HXDLIN(2403)		if (holdArray3->contains(true)) {
HXLINE(2403)			_hx_tmp = this->generatedMusic;
            		}
            		else {
HXLINE(2403)			_hx_tmp = false;
            		}
HXDLIN(2403)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,::Array< bool >,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2407_keyShit)
HXLINE(2407)				bool _hx_tmp;
HXDLIN(2407)				bool _hx_tmp1;
HXDLIN(2407)				bool _hx_tmp2;
HXDLIN(2407)				if (daNote->isSustainNote) {
HXLINE(2407)					_hx_tmp2 = daNote->canBeHit;
            				}
            				else {
HXLINE(2407)					_hx_tmp2 = false;
            				}
HXDLIN(2407)				if (_hx_tmp2) {
HXLINE(2407)					_hx_tmp1 = daNote->mustPress;
            				}
            				else {
HXLINE(2407)					_hx_tmp1 = false;
            				}
HXDLIN(2407)				if (_hx_tmp1) {
HXLINE(2407)					_hx_tmp = holdArray3->__get(daNote->noteData);
            				}
            				else {
HXLINE(2407)					_hx_tmp = false;
            				}
HXDLIN(2407)				if (_hx_tmp) {
HXLINE(2408)					_gthis->goodNoteHit(daNote);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2405)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,holdArray3)),null());
            		}
HXLINE(2413)		bool _hx_tmp1;
HXDLIN(2413)		if (pressArray3->contains(true)) {
HXLINE(2413)			_hx_tmp1 = this->generatedMusic;
            		}
            		else {
HXLINE(2413)			_hx_tmp1 = false;
            		}
HXDLIN(2413)		if (_hx_tmp1) {
            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes,::Array< ::Dynamic>,dumbNotes,::Array< int >,directionList,::Array< bool >,directionsAccounted) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2424_keyShit)
HXLINE(2424)				bool _hx_tmp;
HXDLIN(2424)				bool _hx_tmp1;
HXDLIN(2424)				bool _hx_tmp2;
HXDLIN(2424)				if (daNote->canBeHit) {
HXLINE(2424)					_hx_tmp2 = daNote->mustPress;
            				}
            				else {
HXLINE(2424)					_hx_tmp2 = false;
            				}
HXDLIN(2424)				if (_hx_tmp2) {
HXLINE(2424)					_hx_tmp1 = !(daNote->tooLate);
            				}
            				else {
HXLINE(2424)					_hx_tmp1 = false;
            				}
HXDLIN(2424)				if (_hx_tmp1) {
HXLINE(2424)					_hx_tmp = !(daNote->wasGoodHit);
            				}
            				else {
HXLINE(2424)					_hx_tmp = false;
            				}
HXDLIN(2424)				if (_hx_tmp) {
HXLINE(2426)					if (!(directionsAccounted->__get(daNote->noteData))) {
HXLINE(2428)						if (directionList->contains(daNote->noteData)) {
HXLINE(2430)							directionsAccounted[daNote->noteData] = true;
HXLINE(2431)							{
HXLINE(2431)								int _g = 0;
HXDLIN(2431)								while((_g < possibleNotes->length)){
HXLINE(2431)									 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(2431)									_g = (_g + 1);
HXLINE(2433)									bool _hx_tmp3;
HXDLIN(2433)									if ((coolNote->noteData == daNote->noteData)) {
HXLINE(2433)										_hx_tmp3 = (::Math_obj::abs((daNote->strumTime - coolNote->strumTime)) < 10);
            									}
            									else {
HXLINE(2433)										_hx_tmp3 = false;
            									}
HXDLIN(2433)									if (_hx_tmp3) {
HXLINE(2436)										dumbNotes->push(daNote);
HXLINE(2437)										goto _hx_goto_95;
            									}
            									else {
HXLINE(2439)										bool _hx_tmp4;
HXDLIN(2439)										if ((coolNote->noteData == daNote->noteData)) {
HXLINE(2439)											_hx_tmp4 = (daNote->strumTime < coolNote->strumTime);
            										}
            										else {
HXLINE(2439)											_hx_tmp4 = false;
            										}
HXDLIN(2439)										if (_hx_tmp4) {
HXLINE(2441)											possibleNotes->remove(coolNote);
HXLINE(2442)											possibleNotes->push(daNote);
HXLINE(2443)											goto _hx_goto_95;
            										}
            									}
            								}
            								_hx_goto_95:;
            							}
            						}
            						else {
HXLINE(2449)							possibleNotes->push(daNote);
HXLINE(2450)							directionList->push(daNote->noteData);
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            			int _hx_run( ::Note a, ::Note b){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2464_keyShit)
HXLINE(2464)				return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2415)			::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(2417)			::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2418)			::Array< int > directionList = ::Array_obj< int >::__new(0);
HXLINE(2419)			::Array< ::Dynamic> dumbNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2420)			::Array< bool > directionsAccounted = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_106,4);
HXLINE(2422)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes,dumbNotes,directionList,directionsAccounted)),null());
HXLINE(2456)			{
HXLINE(2456)				int _g = 0;
HXDLIN(2456)				while((_g < dumbNotes->length)){
HXLINE(2456)					 ::Note note = dumbNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(2456)					_g = (_g + 1);
HXLINE(2459)					note->kill();
HXLINE(2460)					this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(2461)					note->destroy();
            				}
            			}
HXLINE(2464)			possibleNotes->sort( ::Dynamic(new _hx_Closure_2()));
HXLINE(2465)			bool dontCheck = false;
HXLINE(2467)			{
HXLINE(2467)				int _g1 = 0;
HXDLIN(2467)				int _g2 = pressArray3->length;
HXDLIN(2467)				while((_g1 < _g2)){
HXLINE(2467)					_g1 = (_g1 + 1);
HXDLIN(2467)					int i = (_g1 - 1);
HXLINE(2469)					bool _hx_tmp2;
HXDLIN(2469)					if (pressArray3->__get(i)) {
HXLINE(2469)						_hx_tmp2 = !(directionList->contains(i));
            					}
            					else {
HXLINE(2469)						_hx_tmp2 = false;
            					}
HXDLIN(2469)					if (_hx_tmp2) {
HXLINE(2470)						dontCheck = true;
            					}
            				}
            			}
HXLINE(2473)			if (this->perfectMode) {
HXLINE(2474)				this->goodNoteHit(possibleNotes->__get(0).StaticCast<  ::Note >());
            			}
            			else {
HXLINE(2475)				bool _hx_tmp3;
HXDLIN(2475)				if ((possibleNotes->length > 0)) {
HXLINE(2475)					_hx_tmp3 = !(dontCheck);
            				}
            				else {
HXLINE(2475)					_hx_tmp3 = false;
            				}
HXDLIN(2475)				if (_hx_tmp3) {
HXLINE(2477)					{
HXLINE(2477)						int _g3 = 0;
HXDLIN(2477)						int _g4 = pressArray3->length;
HXDLIN(2477)						while((_g3 < _g4)){
HXLINE(2477)							_g3 = (_g3 + 1);
HXDLIN(2477)							int shit = (_g3 - 1);
HXLINE(2479)							bool _hx_tmp4;
HXDLIN(2479)							if (pressArray3->__get(shit)) {
HXLINE(2479)								_hx_tmp4 = !(directionList->contains(shit));
            							}
            							else {
HXLINE(2479)								_hx_tmp4 = false;
            							}
HXDLIN(2479)							if (_hx_tmp4) {
HXLINE(2480)								this->noteMiss(shit,null());
            							}
            						}
            					}
HXLINE(2483)					{
HXLINE(2483)						int _g5 = 0;
HXDLIN(2483)						while((_g5 < possibleNotes->length)){
HXLINE(2483)							 ::Note coolNote = possibleNotes->__get(_g5).StaticCast<  ::Note >();
HXDLIN(2483)							_g5 = (_g5 + 1);
HXLINE(2485)							if (pressArray3->__get(coolNote->noteData)) {
HXLINE(2487)								this->scoreTxt->set_color(-1);
HXLINE(2488)								this->goodNoteHit(coolNote);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(2534)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_3(_gthis)),null());
HXLINE(2541)		bool _hx_tmp5;
HXDLIN(2541)		if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(2541)			_hx_tmp5 = !(holdArray3->contains(true));
            		}
            		else {
HXLINE(2541)			_hx_tmp5 = false;
            		}
HXDLIN(2541)		if (_hx_tmp5) {
HXLINE(2543)			bool _hx_tmp6;
HXDLIN(2543)			if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(2543)				_hx_tmp6 = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            			}
            			else {
HXLINE(2543)				_hx_tmp6 = false;
            			}
HXDLIN(2543)			if (_hx_tmp6) {
HXLINE(2545)				::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
            			}
            		}
HXLINE(2549)		::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_4(pressArray3,holdArray3)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShit,(void))

void PlayState_obj::noteMiss(::hx::Null< int >  __o_direction, ::Note daNote){
            		int direction = __o_direction.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2568_noteMiss)
HXLINE(2569)		::scripting::Script_obj::onNoteMiss();
HXLINE(2570)		if (!(::PlayState_obj::boyfriend->stunned)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2597_noteMiss)
HXLINE(2597)				::PlayState_obj::boyfriend->stunned = false;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2572)			this->misses++;
HXLINE(2574)			if ((this->health < 0)) {
HXLINE(2575)				this->health = ( (Float)(0) );
            			}
HXLINE(2577)			if ((this->health > 0)) {
HXLINE(2578)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2578)				_hx_tmp->health = (_hx_tmp->health - ((Float)0.04));
            			}
HXLINE(2580)			bool _hx_tmp1;
HXDLIN(2580)			if ((this->combo > 5)) {
HXLINE(2580)				_hx_tmp1 = ::PlayState_obj::gf->animOffsets->exists(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(2580)				_hx_tmp1 = false;
            			}
HXDLIN(2580)			if (_hx_tmp1) {
HXLINE(2582)				::PlayState_obj::gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
            			}
HXLINE(2584)			this->combo = 0;
HXLINE(2586)			if (!(::PlayState_obj::practiceMode)) {
HXLINE(2586)				 ::PlayState _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2586)				_hx_tmp2->songScore = (_hx_tmp2->songScore - 10);
            			}
HXLINE(2588)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(2588)			::String library = null();
HXDLIN(2588)			::String _hx_tmp4 = ::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN(2588)			_hx_tmp3->play(_hx_tmp4,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
HXLINE(2592)			::PlayState_obj::boyfriend->stunned = true;
HXLINE(2595)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.083333333333333329), ::Dynamic(new _hx_Closure_0()),null());
HXLINE(2600)			switch((int)(direction)){
            				case (int)0: {
HXLINE(2603)					::PlayState_obj::boyfriend->playAnim(HX_("singLEFTmiss",d2,2f,9c,b6),true,null(),null());
            				}
            				break;
            				case (int)1: {
HXLINE(2605)					::PlayState_obj::boyfriend->playAnim(HX_("singDOWNmiss",ad,e9,88,e4),true,null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE(2607)					::PlayState_obj::boyfriend->playAnim(HX_("singUPmiss",66,22,08,8a),true,null(),null());
            				}
            				break;
            				case (int)3: {
HXLINE(2609)					::PlayState_obj::boyfriend->playAnim(HX_("singRIGHTmiss",89,cc,65,e3),true,null(),null());
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteMiss,(void))

void PlayState_obj::noteCheck(::Array< bool > controlArray, ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2637_noteCheck)
HXDLIN(2637)		if (controlArray->__get(note->noteData)) {
HXLINE(2638)			this->goodNoteHit(note);
            		}
            		else {
HXLINE(2641)			this->noteMiss(note->noteData,note);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteCheck,(void))

void PlayState_obj::goodNoteHit( ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2646_goodNoteHit)
HXLINE(2647)		::scripting::Script_obj::onNoteHit();
HXLINE(2649)		if (!(note->wasGoodHit)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Note,note) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2677_goodNoteHit)
HXLINE(2677)				if ((::Math_obj::abs(( (Float)(note->noteData) )) == spr->ID)) {
HXLINE(2679)					spr->animation->play(HX_("confirm",00,9d,39,10),true,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2651)			if (!(note->isSustainNote)) {
HXLINE(2653)				this->popUpScore(note->strumTime,note);
HXLINE(2654)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2654)				_hx_tmp->combo = (_hx_tmp->combo + 1);
            			}
HXLINE(2658)			if ((note->noteData >= 0)) {
HXLINE(2659)				 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2659)				_hx_tmp1->health = (_hx_tmp1->health + ((Float)0.023));
            			}
            			else {
HXLINE(2661)				 ::PlayState _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2661)				_hx_tmp2->health = (_hx_tmp2->health + ((Float)0.004));
            			}
HXLINE(2663)			switch((int)(note->noteData)){
            				case (int)0: {
HXLINE(2666)					::PlayState_obj::boyfriend->playAnim(HX_("singLEFT",d6,39,ef,3b),true,null(),null());
            				}
            				break;
            				case (int)1: {
HXLINE(2668)					::PlayState_obj::boyfriend->playAnim(HX_("singDOWN",31,2a,ad,36),true,null(),null());
            				}
            				break;
            				case (int)2: {
HXLINE(2670)					::PlayState_obj::boyfriend->playAnim(HX_("singUP",6a,52,21,b9),true,null(),null());
            				}
            				break;
            				case (int)3: {
HXLINE(2672)					::PlayState_obj::boyfriend->playAnim(HX_("singRIGHT",0d,6f,70,ac),true,null(),null());
            				}
            				break;
            			}
HXLINE(2675)			::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_0(note)),null());
HXLINE(2683)			note->wasGoodHit = true;
HXLINE(2684)			this->vocals->set_volume(( (Float)(1) ));
HXLINE(2686)			if (!(note->isSustainNote)) {
HXLINE(2688)				note->kill();
HXLINE(2689)				this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(2690)				note->destroy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::resetFastCar(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2698_resetFastCar)
HXLINE(2699)		this->fastCar->set_x(( (Float)(-12600) ));
HXLINE(2700)		 ::flixel::FlxSprite _hx_tmp = this->fastCar;
HXDLIN(2700)		_hx_tmp->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(140,250,null())) ));
HXLINE(2701)		this->fastCar->velocity->set_x(( (Float)(0) ));
HXLINE(2702)		this->fastCarCanDrive = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resetFastCar,(void))

void PlayState_obj::fastCarDrive(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2713_fastCarDrive)
HXLINE(2713)			_gthis->resetFastCar();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2706_fastCarDrive)
HXDLIN(2706)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2707)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2707)		::String library = null();
HXDLIN(2707)		_hx_tmp->play(::Paths_obj::sound((HX_("carPass",05,1f,44,b6) + ::flixel::FlxG_obj::random->_hx_int(0,1,null())),library),((Float)0.7),null(),null(),null(),null());
HXLINE(2709)		 ::flixel::math::FlxPoint _hx_tmp1 = this->fastCar->velocity;
HXDLIN(2709)		int _hx_tmp2 = ::flixel::FlxG_obj::random->_hx_int(170,220,null());
HXDLIN(2709)		_hx_tmp1->set_x(((( (Float)(_hx_tmp2) ) / ::flixel::FlxG_obj::elapsed) * ( (Float)(3) )));
HXLINE(2710)		this->fastCarCanDrive = false;
HXLINE(2711)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,fastCarDrive,(void))

void PlayState_obj::moveTank(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2719_moveTank)
HXDLIN(2719)		if (!(this->inCutscene)) {
HXLINE(2721)			Float daAngleOffset = ( (Float)(1) );
HXLINE(2722)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2722)			_hx_tmp->tankAngle = (_hx_tmp->tankAngle + (::flixel::FlxG_obj::elapsed * this->tankSpeed));
HXLINE(2723)			this->tankGround->set_angle(((this->tankAngle - ( (Float)(90) )) + 15));
HXLINE(2725)			this->tankGround->set_x((this->tankX + (::Math_obj::cos((((this->tankAngle * daAngleOffset) + 180) * (::Math_obj::PI / ( (Float)(180) )))) * ( (Float)(1500) ))));
HXLINE(2726)			this->tankGround->set_y((1300 + (::Math_obj::sin((((this->tankAngle * daAngleOffset) + 180) * (::Math_obj::PI / ( (Float)(180) )))) * ( (Float)(1100) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,moveTank,(void))

void PlayState_obj::trainStart(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2744_trainStart)
HXLINE(2745)		this->trainMoving = true;
HXLINE(2746)		if (::hx::IsNull( this->trainSound->_channel )) {
HXLINE(2747)			this->trainSound->play(true,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainStart,(void))

void PlayState_obj::updateTrainPos(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2753_updateTrainPos)
HXLINE(2754)		if ((this->trainSound->_time >= 4700)) {
HXLINE(2756)			this->startedMoving = true;
HXLINE(2757)			::PlayState_obj::gf->playAnim(HX_("hairBlow",b4,c9,39,c9),null(),null(),null());
            		}
HXLINE(2760)		if (this->startedMoving) {
HXLINE(2762)			 ::flixel::FlxSprite fh = this->phillyTrain;
HXDLIN(2762)			fh->set_x((fh->x - ( (Float)(400) )));
HXLINE(2764)			bool _hx_tmp;
HXDLIN(2764)			if ((this->phillyTrain->x < -2000)) {
HXLINE(2764)				_hx_tmp = !(this->trainFinishing);
            			}
            			else {
HXLINE(2764)				_hx_tmp = false;
            			}
HXDLIN(2764)			if (_hx_tmp) {
HXLINE(2766)				this->phillyTrain->set_x(( (Float)(-1150) ));
HXLINE(2767)				 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2767)				_hx_tmp1->trainCars = (_hx_tmp1->trainCars - 1);
HXLINE(2769)				if ((this->trainCars <= 0)) {
HXLINE(2770)					this->trainFinishing = true;
            				}
            			}
HXLINE(2773)			bool _hx_tmp2;
HXDLIN(2773)			if ((this->phillyTrain->x < -4000)) {
HXLINE(2773)				_hx_tmp2 = this->trainFinishing;
            			}
            			else {
HXLINE(2773)				_hx_tmp2 = false;
            			}
HXDLIN(2773)			if (_hx_tmp2) {
HXLINE(2774)				this->trainReset();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateTrainPos,(void))

void PlayState_obj::trainReset(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2779_trainReset)
HXLINE(2780)		::PlayState_obj::gf->playAnim(HX_("hairFall",bd,48,d6,cb),null(),null(),null());
HXLINE(2781)		this->phillyTrain->set_x(( (Float)((::flixel::FlxG_obj::width + 200)) ));
HXLINE(2782)		this->trainMoving = false;
HXLINE(2785)		this->trainCars = 8;
HXLINE(2786)		this->trainFinishing = false;
HXLINE(2787)		this->startedMoving = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainReset,(void))

void PlayState_obj::lightningStrikeShit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2791_lightningStrikeShit)
HXLINE(2792)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2792)		::String library = null();
HXDLIN(2792)		_hx_tmp->play(::Paths_obj::sound((HX_("thunder_",bb,58,cf,2f) + ::flixel::FlxG_obj::random->_hx_int(1,2,null())),library),null(),null(),null(),null(),null());
HXLINE(2793)		this->halloweenBG->animation->play(HX_("lightning",0a,39,4a,d7),null(),null(),null());
HXLINE(2795)		this->lightningStrikeBeat = this->curBeat;
HXLINE(2796)		this->lightningOffset = ::flixel::FlxG_obj::random->_hx_int(8,24,null());
HXLINE(2798)		::PlayState_obj::boyfriend->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
HXLINE(2799)		::PlayState_obj::gf->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,lightningStrikeShit,(void))

void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2803_stepHit)
HXLINE(2804)		this->super::stepHit();
HXLINE(2805)		bool _hx_tmp;
HXDLIN(2805)		if (!((::flixel::FlxG_obj::sound->music->_time > (::Conductor_obj::songPosition + 20)))) {
HXLINE(2805)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time < (::Conductor_obj::songPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE(2805)			_hx_tmp = true;
            		}
HXDLIN(2805)		if (_hx_tmp) {
HXLINE(2807)			this->resyncVocals();
            		}
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2815_beatHit)
HXLINE(2816)		this->super::beatHit();
HXLINE(2817)		bool _hx_tmp;
HXDLIN(2817)		if ((this->curSong.toLowerCase() == HX_("ugh",d6,21,59,00))) {
HXLINE(2817)			_hx_tmp = (this->curStep == 70);
            		}
            		else {
HXLINE(2817)			_hx_tmp = false;
            		}
HXDLIN(2817)		if (_hx_tmp) {
HXLINE(2819)			::PlayState_obj::dad->playAnim(HX_("ughAnim",07,77,08,3d),true,null(),null());
            		}
HXLINE(2822)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::Note a2, ::Note a3){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2824_beatHit)
HXLINE(2824)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2824)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(2824)			int a1 = 1;
HXDLIN(2824)			 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(2824)			this->notes->members->sort(_hx_tmp1);
            		}
HXLINE(2827)		if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(2829)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(2831)				::Conductor_obj::changeBPM(( (int)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            			}
HXLINE(2838)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(2839)				::PlayState_obj::dad->dance();
            			}
            		}
HXLINE(2842)		this->wiggleShit->update(::Conductor_obj::crochet);
HXLINE(2845)		bool _hx_tmp2;
HXDLIN(2845)		bool _hx_tmp3;
HXDLIN(2845)		bool _hx_tmp4;
HXDLIN(2845)		bool _hx_tmp5;
HXDLIN(2845)		if ((this->curSong.toLowerCase() == HX_("milf",d6,4c,5c,48))) {
HXLINE(2845)			_hx_tmp5 = (this->curBeat >= 168);
            		}
            		else {
HXLINE(2845)			_hx_tmp5 = false;
            		}
HXDLIN(2845)		if (_hx_tmp5) {
HXLINE(2845)			_hx_tmp4 = (this->curBeat < 200);
            		}
            		else {
HXLINE(2845)			_hx_tmp4 = false;
            		}
HXDLIN(2845)		if (_hx_tmp4) {
HXLINE(2845)			_hx_tmp3 = this->camZooming;
            		}
            		else {
HXLINE(2845)			_hx_tmp3 = false;
            		}
HXDLIN(2845)		if (_hx_tmp3) {
HXLINE(2845)			_hx_tmp2 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            		}
            		else {
HXLINE(2845)			_hx_tmp2 = false;
            		}
HXDLIN(2845)		if (_hx_tmp2) {
HXLINE(2847)			 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN(2847)			fh->set_zoom((fh->zoom + ((Float)0.015)));
HXLINE(2848)			 ::flixel::FlxCamera fh1 = this->camHUD;
HXDLIN(2848)			fh1->set_zoom((fh1->zoom + ((Float)0.03)));
            		}
HXLINE(2851)		bool _hx_tmp6;
HXDLIN(2851)		bool _hx_tmp7;
HXDLIN(2851)		if (this->camZooming) {
HXLINE(2851)			_hx_tmp7 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            		}
            		else {
HXLINE(2851)			_hx_tmp7 = false;
            		}
HXDLIN(2851)		if (_hx_tmp7) {
HXLINE(2851)			_hx_tmp6 = (::hx::Mod(this->curBeat,4) == 0);
            		}
            		else {
HXLINE(2851)			_hx_tmp6 = false;
            		}
HXDLIN(2851)		if (_hx_tmp6) {
HXLINE(2853)			 ::flixel::FlxCamera fh2 = ::flixel::FlxG_obj::camera;
HXDLIN(2853)			fh2->set_zoom((fh2->zoom + ((Float)0.015)));
HXLINE(2854)			 ::flixel::FlxCamera fh3 = this->camHUD;
HXDLIN(2854)			fh3->set_zoom((fh3->zoom + ((Float)0.03)));
            		}
HXLINE(2857)		 ::HealthIcon _hx_tmp8 = this->iconP1;
HXDLIN(2857)		_hx_tmp8->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 30)),null());
HXLINE(2858)		 ::HealthIcon _hx_tmp9 = this->iconP2;
HXDLIN(2858)		_hx_tmp9->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 30)),null());
HXLINE(2860)		this->iconP1->updateHitbox();
HXLINE(2861)		this->iconP2->updateHitbox();
HXLINE(2863)		this->dancingLeft = !(this->dancingLeft);
HXLINE(2865)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("iconbops",09,1d,4a,83),::hx::paccDynamic)) )) {
HXLINE(2866)			if (this->dancingLeft) {
HXLINE(2868)				this->iconP1->set_angle(( (Float)(8) ));
HXDLIN(2868)				this->iconP2->set_angle(( (Float)(8) ));
            			}
            			else {
HXLINE(2872)				this->iconP1->set_angle(( (Float)(-8) ));
HXDLIN(2872)				this->iconP2->set_angle(( (Float)(-8) ));
            			}
            		}
HXLINE(2875)		if ((::hx::Mod(this->curBeat,this->gfSpeed) == 0)) {
HXLINE(2877)			::PlayState_obj::gf->dance();
            		}
HXLINE(2880)		if (!(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)))) {
HXLINE(2882)			::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
HXLINE(2885)		bool _hx_tmp10;
HXDLIN(2885)		if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2885)			_hx_tmp10 = (this->curSong == HX_("Bopeebo",90,29,16,da));
            		}
            		else {
HXLINE(2885)			_hx_tmp10 = false;
            		}
HXDLIN(2885)		if (_hx_tmp10) {
HXLINE(2887)			::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
            		}
HXLINE(2890)		bool _hx_tmp11;
HXDLIN(2890)		bool _hx_tmp12;
HXDLIN(2890)		bool _hx_tmp13;
HXDLIN(2890)		bool _hx_tmp14;
HXDLIN(2890)		if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(2890)			_hx_tmp14 = ::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) );
            		}
            		else {
HXLINE(2890)			_hx_tmp14 = false;
            		}
HXDLIN(2890)		if (_hx_tmp14) {
HXLINE(2890)			_hx_tmp13 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            		}
            		else {
HXLINE(2890)			_hx_tmp13 = false;
            		}
HXDLIN(2890)		if (_hx_tmp13) {
HXLINE(2890)			_hx_tmp12 = (this->curBeat > 16);
            		}
            		else {
HXLINE(2890)			_hx_tmp12 = false;
            		}
HXDLIN(2890)		if (_hx_tmp12) {
HXLINE(2890)			_hx_tmp11 = (this->curBeat < 48);
            		}
            		else {
HXLINE(2890)			_hx_tmp11 = false;
            		}
HXDLIN(2890)		if (_hx_tmp11) {
HXLINE(2892)			::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(2893)			::PlayState_obj::dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
            		}
HXLINE(2896)		::String _hx_switch_0 = ::PlayState_obj::curStage;
            		if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::BackgroundDancer dancer){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2909_beatHit)
HXLINE(2909)				dancer->dance();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2907)			this->grpLimoDancers->forEach( ::Dynamic(new _hx_Closure_1()),null());
HXLINE(2912)			bool _hx_tmp15;
HXDLIN(2912)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10)) {
HXLINE(2912)				_hx_tmp15 = this->fastCarCanDrive;
            			}
            			else {
HXLINE(2912)				_hx_tmp15 = false;
            			}
HXDLIN(2912)			if (_hx_tmp15) {
HXLINE(2913)				this->fastCarDrive();
            			}
HXLINE(2906)			goto _hx_goto_121;
            		}
            		if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE(2902)			this->upperBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(2903)			this->bottomBoppers->animation->play(HX_("bop",03,be,4a,00),true,null(),null());
HXLINE(2904)			this->santa->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
HXLINE(2901)			goto _hx_goto_121;
            		}
            		if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE(2915)			if (!(this->trainMoving)) {
HXLINE(2916)				 ::PlayState _hx_tmp16 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2916)				_hx_tmp16->trainCooldown = (_hx_tmp16->trainCooldown + 1);
            			}
HXLINE(2918)			if ((::hx::Mod(this->curBeat,4) == 0)) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            				void _hx_run( ::flixel::FlxSprite light){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2922_beatHit)
HXLINE(2922)					light->set_visible(false);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2920)				this->phillyCityLights->forEach( ::Dynamic(new _hx_Closure_2()),null());
HXLINE(2925)				this->curLight = ::flixel::FlxG_obj::random->_hx_int(0,(this->phillyCityLights->length - 1),null());
HXLINE(2927)				Dynamic( this->phillyCityLights->members->__get(this->curLight)).StaticCast<  ::flixel::FlxSprite >()->set_visible(true);
            			}
HXLINE(2931)			bool _hx_tmp17;
HXDLIN(2931)			bool _hx_tmp18;
HXDLIN(2931)			bool _hx_tmp19;
HXDLIN(2931)			if ((::hx::Mod(this->curBeat,8) == 4)) {
HXLINE(2931)				_hx_tmp19 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 30);
            			}
            			else {
HXLINE(2931)				_hx_tmp19 = false;
            			}
HXDLIN(2931)			if (_hx_tmp19) {
HXLINE(2931)				_hx_tmp18 = !(this->trainMoving);
            			}
            			else {
HXLINE(2931)				_hx_tmp18 = false;
            			}
HXDLIN(2931)			if (_hx_tmp18) {
HXLINE(2931)				_hx_tmp17 = (this->trainCooldown > 8);
            			}
            			else {
HXLINE(2931)				_hx_tmp17 = false;
            			}
HXDLIN(2931)			if (_hx_tmp17) {
HXLINE(2933)				this->trainCooldown = ::flixel::FlxG_obj::random->_hx_int(-4,0,null());
HXLINE(2934)				this->trainStart();
            			}
HXLINE(2914)			goto _hx_goto_121;
            		}
            		if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE(2899)			this->bgGirls->dance();
HXDLIN(2899)			goto _hx_goto_121;
            		}
            		_hx_goto_121:;
HXLINE(2938)		bool _hx_tmp20;
HXDLIN(2938)		bool _hx_tmp21;
HXDLIN(2938)		if (this->isHalloween) {
HXLINE(2938)			_hx_tmp21 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10);
            		}
            		else {
HXLINE(2938)			_hx_tmp21 = false;
            		}
HXDLIN(2938)		if (_hx_tmp21) {
HXLINE(2938)			_hx_tmp20 = (this->curBeat > (this->lightningStrikeBeat + this->lightningOffset));
            		}
            		else {
HXLINE(2938)			_hx_tmp20 = false;
            		}
HXDLIN(2938)		if (_hx_tmp20) {
HXLINE(2940)			this->lightningStrikeShit();
            		}
            	}


::String PlayState_obj::curStage;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

int PlayState_obj::deathCounter;

bool PlayState_obj::changedDifficulty;

::String PlayState_obj::selectedBF;

bool PlayState_obj::freeplayChar;

 ::PlayState PlayState_obj::instance;

bool PlayState_obj::seenCutscene;

bool PlayState_obj::hasPlayedOnce;

 ::Character PlayState_obj::dad;

 ::Character PlayState_obj::gf;

 ::Boyfriend PlayState_obj::boyfriend;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

 ::flixel::group::FlxTypedGroup PlayState_obj::strumLineNotes;

 ::flixel::group::FlxTypedGroup PlayState_obj::playerStrums;

 ::flixel::group::FlxTypedGroup PlayState_obj::player2Strums;

bool PlayState_obj::practiceMode;

int PlayState_obj::campaignScore;

Float PlayState_obj::daPixelZoom;

 ::shaders::VHSShader PlayState_obj::vhsShader;

 ::shaders::ChromaticAberrationShader PlayState_obj::chromaticAbberation;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(iconRPC,"iconRPC");
	HX_MARK_MEMBER_NAME(detailsText,"detailsText");
	HX_MARK_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(strumming2,"strumming2");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(dancingLeft,"dancingLeft");
	HX_MARK_MEMBER_NAME(cpuControlled,"cpuControlled");
	HX_MARK_MEMBER_NAME(botplaySine,"botplaySine");
	HX_MARK_MEMBER_NAME(botplayTxt,"botplayTxt");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(halloweenBG,"halloweenBG");
	HX_MARK_MEMBER_NAME(isHalloween,"isHalloween");
	HX_MARK_MEMBER_NAME(phillyCityLights,"phillyCityLights");
	HX_MARK_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_MARK_MEMBER_NAME(trainSound,"trainSound");
	HX_MARK_MEMBER_NAME(foregroundSprites,"foregroundSprites");
	HX_MARK_MEMBER_NAME(limo,"limo");
	HX_MARK_MEMBER_NAME(grpLimoDancers,"grpLimoDancers");
	HX_MARK_MEMBER_NAME(fastCar,"fastCar");
	HX_MARK_MEMBER_NAME(upperBoppers,"upperBoppers");
	HX_MARK_MEMBER_NAME(bottomBoppers,"bottomBoppers");
	HX_MARK_MEMBER_NAME(santa,"santa");
	HX_MARK_MEMBER_NAME(bgGirls,"bgGirls");
	HX_MARK_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_MARK_MEMBER_NAME(tankmanRun,"tankmanRun");
	HX_MARK_MEMBER_NAME(gfCutsceneLayer,"gfCutsceneLayer");
	HX_MARK_MEMBER_NAME(bfTankCutsceneLayer,"bfTankCutsceneLayer");
	HX_MARK_MEMBER_NAME(tankWatchtower,"tankWatchtower");
	HX_MARK_MEMBER_NAME(tankGround,"tankGround");
	HX_MARK_MEMBER_NAME(talking,"talking");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(misses,"misses");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_MARK_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(canDie,"canDie");
	HX_MARK_MEMBER_NAME(scanline,"scanline");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(perfectMode,"perfectMode");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(debugNum,"debugNum");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(stopUpdate,"stopUpdate");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_MARK_MEMBER_NAME(tankResetShit,"tankResetShit");
	HX_MARK_MEMBER_NAME(tankMoving,"tankMoving");
	HX_MARK_MEMBER_NAME(tankAngle,"tankAngle");
	HX_MARK_MEMBER_NAME(tankSpeed,"tankSpeed");
	HX_MARK_MEMBER_NAME(tankX,"tankX");
	HX_MARK_MEMBER_NAME(trainMoving,"trainMoving");
	HX_MARK_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_MARK_MEMBER_NAME(trainCars,"trainCars");
	HX_MARK_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_MARK_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_MARK_MEMBER_NAME(startedMoving,"startedMoving");
	HX_MARK_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_MARK_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_MARK_MEMBER_NAME(curLight,"curLight");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(halloweenLevel,"halloweenLevel");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(iconRPC,"iconRPC");
	HX_VISIT_MEMBER_NAME(detailsText,"detailsText");
	HX_VISIT_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(strumming2,"strumming2");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(dancingLeft,"dancingLeft");
	HX_VISIT_MEMBER_NAME(cpuControlled,"cpuControlled");
	HX_VISIT_MEMBER_NAME(botplaySine,"botplaySine");
	HX_VISIT_MEMBER_NAME(botplayTxt,"botplayTxt");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(halloweenBG,"halloweenBG");
	HX_VISIT_MEMBER_NAME(isHalloween,"isHalloween");
	HX_VISIT_MEMBER_NAME(phillyCityLights,"phillyCityLights");
	HX_VISIT_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_VISIT_MEMBER_NAME(trainSound,"trainSound");
	HX_VISIT_MEMBER_NAME(foregroundSprites,"foregroundSprites");
	HX_VISIT_MEMBER_NAME(limo,"limo");
	HX_VISIT_MEMBER_NAME(grpLimoDancers,"grpLimoDancers");
	HX_VISIT_MEMBER_NAME(fastCar,"fastCar");
	HX_VISIT_MEMBER_NAME(upperBoppers,"upperBoppers");
	HX_VISIT_MEMBER_NAME(bottomBoppers,"bottomBoppers");
	HX_VISIT_MEMBER_NAME(santa,"santa");
	HX_VISIT_MEMBER_NAME(bgGirls,"bgGirls");
	HX_VISIT_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_VISIT_MEMBER_NAME(tankmanRun,"tankmanRun");
	HX_VISIT_MEMBER_NAME(gfCutsceneLayer,"gfCutsceneLayer");
	HX_VISIT_MEMBER_NAME(bfTankCutsceneLayer,"bfTankCutsceneLayer");
	HX_VISIT_MEMBER_NAME(tankWatchtower,"tankWatchtower");
	HX_VISIT_MEMBER_NAME(tankGround,"tankGround");
	HX_VISIT_MEMBER_NAME(talking,"talking");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(misses,"misses");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_VISIT_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(canDie,"canDie");
	HX_VISIT_MEMBER_NAME(scanline,"scanline");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(perfectMode,"perfectMode");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(debugNum,"debugNum");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(stopUpdate,"stopUpdate");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_VISIT_MEMBER_NAME(tankResetShit,"tankResetShit");
	HX_VISIT_MEMBER_NAME(tankMoving,"tankMoving");
	HX_VISIT_MEMBER_NAME(tankAngle,"tankAngle");
	HX_VISIT_MEMBER_NAME(tankSpeed,"tankSpeed");
	HX_VISIT_MEMBER_NAME(tankX,"tankX");
	HX_VISIT_MEMBER_NAME(trainMoving,"trainMoving");
	HX_VISIT_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_VISIT_MEMBER_NAME(trainCars,"trainCars");
	HX_VISIT_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_VISIT_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_VISIT_MEMBER_NAME(startedMoving,"startedMoving");
	HX_VISIT_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_VISIT_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_VISIT_MEMBER_NAME(curLight,"curLight");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"limo") ) { return ::hx::Val( limo ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		if (HX_FIELD_EQ(inName,"santa") ) { return ::hx::Val( santa ); }
		if (HX_FIELD_EQ(inName,"tankX") ) { return ::hx::Val( tankX ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"misses") ) { return ::hx::Val( misses ); }
		if (HX_FIELD_EQ(inName,"canDie") ) { return ::hx::Val( canDie ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { return ::hx::Val( iconRPC ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"fastCar") ) { return ::hx::Val( fastCar ); }
		if (HX_FIELD_EQ(inName,"bgGirls") ) { return ::hx::Val( bgGirls ); }
		if (HX_FIELD_EQ(inName,"talking") ) { return ::hx::Val( talking ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShit") ) { return ::hx::Val( keyShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"scanline") ) { return ::hx::Val( scanline ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		if (HX_FIELD_EQ(inName,"debugNum") ) { return ::hx::Val( debugNum ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"sustain2") ) { return ::hx::Val( sustain2_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveTank") ) { return ::hx::Val( moveTank_dyn() ); }
		if (HX_FIELD_EQ(inName,"curLight") ) { return ::hx::Val( curLight ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"addObject") ) { return ::hx::Val( addObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteCheck") ) { return ::hx::Val( noteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"tankAngle") ) { return ::hx::Val( tankAngle ); }
		if (HX_FIELD_EQ(inName,"tankSpeed") ) { return ::hx::Val( tankSpeed ); }
		if (HX_FIELD_EQ(inName,"trainCars") ) { return ::hx::Val( trainCars ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"strumming2") ) { return ::hx::Val( strumming2 ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"botplayTxt") ) { return ::hx::Val( botplayTxt ); }
		if (HX_FIELD_EQ(inName,"trainSound") ) { return ::hx::Val( trainSound ); }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { return ::hx::Val( wiggleShit ); }
		if (HX_FIELD_EQ(inName,"tankmanRun") ) { return ::hx::Val( tankmanRun ); }
		if (HX_FIELD_EQ(inName,"tankGround") ) { return ::hx::Val( tankGround ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"updateLoop") ) { return ::hx::Val( updateLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopUpdate") ) { return ::hx::Val( stopUpdate ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"tankMoving") ) { return ::hx::Val( tankMoving ); }
		if (HX_FIELD_EQ(inName,"trainStart") ) { return ::hx::Val( trainStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainReset") ) { return ::hx::Val( trainReset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { return ::hx::Val( detailsText ); }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"dancingLeft") ) { return ::hx::Val( dancingLeft ); }
		if (HX_FIELD_EQ(inName,"botplaySine") ) { return ::hx::Val( botplaySine ); }
		if (HX_FIELD_EQ(inName,"halloweenBG") ) { return ::hx::Val( halloweenBG ); }
		if (HX_FIELD_EQ(inName,"isHalloween") ) { return ::hx::Val( isHalloween ); }
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { return ::hx::Val( phillyTrain ); }
		if (HX_FIELD_EQ(inName,"schoolIntro") ) { return ::hx::Val( schoolIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { return ::hx::Val( perfectMode ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { return ::hx::Val( trainMoving ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"upperBoppers") ) { return ::hx::Val( upperBoppers ); }
		if (HX_FIELD_EQ(inName,"removeObject") ) { return ::hx::Val( removeObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetFastCar") ) { return ::hx::Val( resetFastCar_dyn() ); }
		if (HX_FIELD_EQ(inName,"fastCarDrive") ) { return ::hx::Val( fastCarDrive_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cpuControlled") ) { return ::hx::Val( cpuControlled ); }
		if (HX_FIELD_EQ(inName,"bottomBoppers") ) { return ::hx::Val( bottomBoppers ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"tankResetShit") ) { return ::hx::Val( tankResetShit ); }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { return ::hx::Val( trainCooldown ); }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { return ::hx::Val( startedMoving ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { return ::hx::Val( halloweenLevel ); }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"grpLimoDancers") ) { return ::hx::Val( grpLimoDancers ); }
		if (HX_FIELD_EQ(inName,"tankWatchtower") ) { return ::hx::Val( tankWatchtower ); }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { return ::hx::Val( defaultCamZoom ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { return ::hx::Val( trainFinishing ); }
		if (HX_FIELD_EQ(inName,"updateTrainPos") ) { return ::hx::Val( updateTrainPos_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { return ::hx::Val( songPositionBar ); }
		if (HX_FIELD_EQ(inName,"gfCutsceneLayer") ) { return ::hx::Val( gfCutsceneLayer ); }
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { return ::hx::Val( grpNoteSplashes ); }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { return ::hx::Val( fastCarCanDrive ); }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { return ::hx::Val( lightningOffset ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"phillyCityLights") ) { return ::hx::Val( phillyCityLights ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { return ::hx::Val( trainFrameTiming ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { return ::hx::Val( detailsPausedText ); }
		if (HX_FIELD_EQ(inName,"foregroundSprites") ) { return ::hx::Val( foregroundSprites ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		if (HX_FIELD_EQ(inName,"bfTankCutsceneLayer") ) { return ::hx::Val( bfTankCutsceneLayer ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeShit") ) { return ::hx::Val( lightningStrikeShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { return ::hx::Val( lightningStrikeBeat ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { outValue = ( gf ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { outValue = ( dad ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { outValue = ( curStage ); return true; }
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { outValue = ( boyfriend ); return true; }
		if (HX_FIELD_EQ(inName,"vhsShader") ) { outValue = ( vhsShader ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectedBF") ) { outValue = ( selectedBF ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deathCounter") ) { outValue = ( deathCounter ); return true; }
		if (HX_FIELD_EQ(inName,"freeplayChar") ) { outValue = ( freeplayChar ); return true; }
		if (HX_FIELD_EQ(inName,"seenCutscene") ) { outValue = ( seenCutscene ); return true; }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { outValue = ( playerStrums ); return true; }
		if (HX_FIELD_EQ(inName,"practiceMode") ) { outValue = ( practiceMode ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"hasPlayedOnce") ) { outValue = ( hasPlayedOnce ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"player2Strums") ) { outValue = ( player2Strums ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { outValue = ( strumLineNotes ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"changedDifficulty") ) { outValue = ( changedDifficulty ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"chromaticAbberation") ) { outValue = ( chromaticAbberation ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"limo") ) { limo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"santa") ) { santa=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankX") ) { tankX=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"misses") ) { misses=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canDie") ) { canDie=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { iconRPC=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCar") ) { fastCar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgGirls") ) { bgGirls=inValue.Cast<  ::BackgroundGirls >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talking") ) { talking=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scanline") ) { scanline=inValue.Cast<  ::shaders::ScanlineShader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugNum") ) { debugNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curLight") ) { curLight=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankAngle") ) { tankAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankSpeed") ) { tankSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCars") ) { trainCars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumming2") ) { strumming2=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botplayTxt") ) { botplayTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainSound") ) { trainSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { wiggleShit=inValue.Cast<  ::WiggleEffect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankmanRun") ) { tankmanRun=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankGround") ) { tankGround=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stopUpdate") ) { stopUpdate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankMoving") ) { tankMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { detailsText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dancingLeft") ) { dancingLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botplaySine") ) { botplaySine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"halloweenBG") ) { halloweenBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isHalloween") ) { isHalloween=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { phillyTrain=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { perfectMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { trainMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upperBoppers") ) { upperBoppers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cpuControlled") ) { cpuControlled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomBoppers") ) { bottomBoppers=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankResetShit") ) { tankResetShit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { trainCooldown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { startedMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"halloweenLevel") ) { halloweenLevel=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpLimoDancers") ) { grpLimoDancers=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tankWatchtower") ) { tankWatchtower=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { trainFinishing=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { songPositionBar=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfCutsceneLayer") ) { gfCutsceneLayer=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { grpNoteSplashes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { fastCarCanDrive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { lightningOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"phillyCityLights") ) { phillyCityLights=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { trainFrameTiming=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"foregroundSprites") ) { foregroundSprites=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bfTankCutsceneLayer") ) { bfTankCutsceneLayer=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { lightningStrikeBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::PlayState >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=ioValue.Cast<  ::Boyfriend >(); return true; }
		if (HX_FIELD_EQ(inName,"vhsShader") ) { vhsShader=ioValue.Cast<  ::shaders::VHSShader >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"selectedBF") ) { selectedBF=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deathCounter") ) { deathCounter=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"freeplayChar") ) { freeplayChar=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"seenCutscene") ) { seenCutscene=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"practiceMode") ) { practiceMode=ioValue.Cast< bool >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"hasPlayedOnce") ) { hasPlayedOnce=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"player2Strums") ) { player2Strums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"changedDifficulty") ) { changedDifficulty=ioValue.Cast< bool >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"chromaticAbberation") ) { chromaticAbberation=ioValue.Cast<  ::shaders::ChromaticAberrationShader >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("halloweenLevel",b7,ca,23,07));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("iconRPC",ec,c8,10,d6));
	outFields->push(HX_("detailsText",8f,5e,84,21));
	outFields->push(HX_("detailsPausedText",dd,4f,70,44));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("strumming2",14,4e,ec,0d));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("songPositionBar",d5,62,6e,a6));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("dancingLeft",57,eb,b4,7f));
	outFields->push(HX_("cpuControlled",d6,1f,47,9e));
	outFields->push(HX_("botplaySine",68,97,39,87));
	outFields->push(HX_("botplayTxt",b5,49,12,88));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("halloweenBG",92,b2,88,5c));
	outFields->push(HX_("isHalloween",43,72,b9,2e));
	outFields->push(HX_("phillyCityLights",30,e0,12,1f));
	outFields->push(HX_("phillyTrain",80,9b,65,bb));
	outFields->push(HX_("trainSound",e7,b3,e5,da));
	outFields->push(HX_("foregroundSprites",4b,a6,ec,f3));
	outFields->push(HX_("limo",1f,17,b3,47));
	outFields->push(HX_("grpLimoDancers",70,18,93,51));
	outFields->push(HX_("fastCar",d8,f2,1f,de));
	outFields->push(HX_("upperBoppers",37,47,71,21));
	outFields->push(HX_("bottomBoppers",ce,2c,ba,6e));
	outFields->push(HX_("santa",8d,45,86,77));
	outFields->push(HX_("bgGirls",92,16,2b,41));
	outFields->push(HX_("wiggleShit",0b,07,40,33));
	outFields->push(HX_("tankmanRun",3b,77,15,bc));
	outFields->push(HX_("gfCutsceneLayer",48,ef,db,fd));
	outFields->push(HX_("bfTankCutsceneLayer",39,59,33,92));
	outFields->push(HX_("tankWatchtower",e4,90,73,b1));
	outFields->push(HX_("tankGround",11,5d,19,55));
	outFields->push(HX_("talking",36,57,a8,16));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("misses",6a,62,54,56));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("grpNoteSplashes",2c,f3,de,7b));
	outFields->push(HX_("defaultCamZoom",01,50,2a,0b));
	outFields->push(HX_("canDie",10,6b,1c,b8));
	outFields->push(HX_("scanline",f1,17,db,2c));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("perfectMode",10,4f,4c,f3));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("debugNum",b3,39,d8,90));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("stopUpdate",ab,d7,b4,b0));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("fastCarCanDrive",d2,f1,13,ee));
	outFields->push(HX_("tankResetShit",e5,50,85,77));
	outFields->push(HX_("tankMoving",18,2d,a1,05));
	outFields->push(HX_("tankAngle",89,28,f9,9d));
	outFields->push(HX_("tankSpeed",3d,7c,80,fc));
	outFields->push(HX_("tankX",2e,d2,ec,0a));
	outFields->push(HX_("trainMoving",76,00,99,48));
	outFields->push(HX_("trainFrameTiming",af,67,10,1b));
	outFields->push(HX_("trainCars",c7,61,9c,4d));
	outFields->push(HX_("trainFinishing",87,15,8c,24));
	outFields->push(HX_("trainCooldown",93,a3,58,0c));
	outFields->push(HX_("startedMoving",af,76,97,fb));
	outFields->push(HX_("lightningStrikeBeat",72,e2,3d,b6));
	outFields->push(HX_("lightningOffset",3d,a8,e5,e6));
	outFields->push(HX_("curLight",36,8b,aa,bc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(PlayState_obj,halloweenLevel),HX_("halloweenLevel",b7,ca,23,07)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,iconRPC),HX_("iconRPC",ec,c8,10,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsText),HX_("detailsText",8f,5e,84,21)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsPausedText),HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,strumming2),HX_("strumming2",14,4e,ec,0d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPositionBar),HX_("songPositionBar",d5,62,6e,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,dancingLeft),HX_("dancingLeft",57,eb,b4,7f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,cpuControlled),HX_("cpuControlled",d6,1f,47,9e)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,botplaySine),HX_("botplaySine",68,97,39,87)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,botplayTxt),HX_("botplayTxt",b5,49,12,88)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,halloweenBG),HX_("halloweenBG",92,b2,88,5c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isHalloween),HX_("isHalloween",43,72,b9,2e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,phillyCityLights),HX_("phillyCityLights",30,e0,12,1f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,phillyTrain),HX_("phillyTrain",80,9b,65,bb)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,trainSound),HX_("trainSound",e7,b3,e5,da)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,foregroundSprites),HX_("foregroundSprites",4b,a6,ec,f3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,limo),HX_("limo",1f,17,b3,47)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpLimoDancers),HX_("grpLimoDancers",70,18,93,51)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,fastCar),HX_("fastCar",d8,f2,1f,de)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,upperBoppers),HX_("upperBoppers",37,47,71,21)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,bottomBoppers),HX_("bottomBoppers",ce,2c,ba,6e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,santa),HX_("santa",8d,45,86,77)},
	{::hx::fsObject /*  ::BackgroundGirls */ ,(int)offsetof(PlayState_obj,bgGirls),HX_("bgGirls",92,16,2b,41)},
	{::hx::fsObject /*  ::WiggleEffect */ ,(int)offsetof(PlayState_obj,wiggleShit),HX_("wiggleShit",0b,07,40,33)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,tankmanRun),HX_("tankmanRun",3b,77,15,bc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,gfCutsceneLayer),HX_("gfCutsceneLayer",48,ef,db,fd)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,bfTankCutsceneLayer),HX_("bfTankCutsceneLayer",39,59,33,92)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,tankWatchtower),HX_("tankWatchtower",e4,90,73,b1)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,tankGround),HX_("tankGround",11,5d,19,55)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,talking),HX_("talking",36,57,a8,16)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,misses),HX_("misses",6a,62,54,56)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpNoteSplashes),HX_("grpNoteSplashes",2c,f3,de,7b)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,defaultCamZoom),HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canDie),HX_("canDie",10,6b,1c,b8)},
	{::hx::fsObject /*  ::shaders::ScanlineShader */ ,(int)offsetof(PlayState_obj,scanline),HX_("scanline",f1,17,db,2c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,perfectMode),HX_("perfectMode",10,4f,4c,f3)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,debugNum),HX_("debugNum",b3,39,d8,90)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,stopUpdate),HX_("stopUpdate",ab,d7,b4,b0)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fastCarCanDrive),HX_("fastCarCanDrive",d2,f1,13,ee)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,tankResetShit),HX_("tankResetShit",e5,50,85,77)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,tankMoving),HX_("tankMoving",18,2d,a1,05)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,tankAngle),HX_("tankAngle",89,28,f9,9d)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,tankSpeed),HX_("tankSpeed",3d,7c,80,fc)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,tankX),HX_("tankX",2e,d2,ec,0a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainMoving),HX_("trainMoving",76,00,99,48)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,trainFrameTiming),HX_("trainFrameTiming",af,67,10,1b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCars),HX_("trainCars",c7,61,9c,4d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainFinishing),HX_("trainFinishing",87,15,8c,24)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCooldown),HX_("trainCooldown",93,a3,58,0c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedMoving),HX_("startedMoving",af,76,97,fb)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningStrikeBeat),HX_("lightningStrikeBeat",72,e2,3d,b6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningOffset),HX_("lightningOffset",3d,a8,e5,e6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curLight),HX_("curLight",36,8b,aa,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PlayState_obj::curStage,HX_("curStage",1e,65,b9,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsInt,(void *) &PlayState_obj::deathCounter,HX_("deathCounter",28,56,4b,1f)},
	{::hx::fsBool,(void *) &PlayState_obj::changedDifficulty,HX_("changedDifficulty",4f,3c,c6,3f)},
	{::hx::fsString,(void *) &PlayState_obj::selectedBF,HX_("selectedBF",df,f0,d0,c6)},
	{::hx::fsBool,(void *) &PlayState_obj::freeplayChar,HX_("freeplayChar",96,eb,c3,dd)},
	{::hx::fsObject /*  ::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsBool,(void *) &PlayState_obj::seenCutscene,HX_("seenCutscene",25,d1,95,b5)},
	{::hx::fsBool,(void *) &PlayState_obj::hasPlayedOnce,HX_("hasPlayedOnce",6e,f2,2e,b7)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::dad,HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::gf,HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(void *) &PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::strumLineNotes,HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::playerStrums,HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::player2Strums,HX_("player2Strums",9b,9b,26,0f)},
	{::hx::fsBool,(void *) &PlayState_obj::practiceMode,HX_("practiceMode",be,79,8f,7f)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsObject /*  ::shaders::VHSShader */ ,(void *) &PlayState_obj::vhsShader,HX_("vhsShader",06,4f,9e,77)},
	{::hx::fsObject /*  ::shaders::ChromaticAberrationShader */ ,(void *) &PlayState_obj::chromaticAbberation,HX_("chromaticAbberation",9f,84,d1,52)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("halloweenLevel",b7,ca,23,07),
	HX_("songLength",9b,3a,8c,fa),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("iconRPC",ec,c8,10,d6),
	HX_("detailsText",8f,5e,84,21),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("vocals",5e,10,51,59),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSection",45,58,c1,68),
	HX_("camFollow",e0,6e,47,22),
	HX_("strumming2",14,4e,ec,0d),
	HX_("camZooming",60,3b,bf,d6),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("songPositionBar",d5,62,6e,a6),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("startingSong",b5,31,61,33),
	HX_("dancingLeft",57,eb,b4,7f),
	HX_("cpuControlled",d6,1f,47,9e),
	HX_("botplaySine",68,97,39,87),
	HX_("botplayTxt",b5,49,12,88),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("dialogue",18,2d,94,a7),
	HX_("halloweenBG",92,b2,88,5c),
	HX_("isHalloween",43,72,b9,2e),
	HX_("phillyCityLights",30,e0,12,1f),
	HX_("phillyTrain",80,9b,65,bb),
	HX_("trainSound",e7,b3,e5,da),
	HX_("foregroundSprites",4b,a6,ec,f3),
	HX_("limo",1f,17,b3,47),
	HX_("grpLimoDancers",70,18,93,51),
	HX_("fastCar",d8,f2,1f,de),
	HX_("upperBoppers",37,47,71,21),
	HX_("bottomBoppers",ce,2c,ba,6e),
	HX_("santa",8d,45,86,77),
	HX_("bgGirls",92,16,2b,41),
	HX_("wiggleShit",0b,07,40,33),
	HX_("tankmanRun",3b,77,15,bc),
	HX_("gfCutsceneLayer",48,ef,db,fd),
	HX_("bfTankCutsceneLayer",39,59,33,92),
	HX_("tankWatchtower",e4,90,73,b1),
	HX_("tankGround",11,5d,19,55),
	HX_("talking",36,57,a8,16),
	HX_("songScore",3d,bb,53,a8),
	HX_("misses",6a,62,54,56),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("grpNoteSplashes",2c,f3,de,7b),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("canDie",10,6b,1c,b8),
	HX_("scanline",f1,17,db,2c),
	HX_("inCutscene",8f,21,01,56),
	HX_("add",21,f2,49,00),
	HX_("addObject",c0,b3,63,cd),
	HX_("removeObject",23,1a,6d,84),
	HX_("create",fc,66,0f,7c),
	HX_("schoolIntro",58,5d,50,47),
	HX_("startTimer",03,98,4c,2c),
	HX_("perfectMode",10,4f,4c,f3),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("startSong",57,9d,4b,05),
	HX_("updateLoop",0d,91,6c,00),
	HX_("debugNum",b3,39,d8,90),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("onFocus",39,fe,c6,9a),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("stopUpdate",ab,d7,b4,b0),
	HX_("update",09,86,05,87),
	HX_("sustain2",2f,12,ec,b8),
	HX_("endSong",50,dd,7c,2e),
	HX_("endingSong",5c,73,d7,67),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("keyShit",ff,40,2c,a6),
	HX_("noteMiss",0e,78,8f,57),
	HX_("noteCheck",76,e3,43,83),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("fastCarCanDrive",d2,f1,13,ee),
	HX_("resetFastCar",c9,38,fe,4f),
	HX_("fastCarDrive",12,97,d2,be),
	HX_("moveTank",9b,26,ae,ef),
	HX_("tankResetShit",e5,50,85,77),
	HX_("tankMoving",18,2d,a1,05),
	HX_("tankAngle",89,28,f9,9d),
	HX_("tankSpeed",3d,7c,80,fc),
	HX_("tankX",2e,d2,ec,0a),
	HX_("trainMoving",76,00,99,48),
	HX_("trainFrameTiming",af,67,10,1b),
	HX_("trainCars",c7,61,9c,4d),
	HX_("trainFinishing",87,15,8c,24),
	HX_("trainCooldown",93,a3,58,0c),
	HX_("trainStart",7a,9b,24,de),
	HX_("startedMoving",af,76,97,fb),
	HX_("updateTrainPos",d5,01,38,2b),
	HX_("trainReset",e7,70,e1,40),
	HX_("lightningStrikeShit",bc,d0,7c,c1),
	HX_("stepHit",67,ae,41,81),
	HX_("lightningStrikeBeat",72,e2,3d,b6),
	HX_("lightningOffset",3d,a8,e5,e6),
	HX_("beatHit",7d,ea,04,74),
	HX_("curLight",36,8b,aa,bc),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::deathCounter,"deathCounter");
	HX_MARK_MEMBER_NAME(PlayState_obj::changedDifficulty,"changedDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::selectedBF,"selectedBF");
	HX_MARK_MEMBER_NAME(PlayState_obj::freeplayChar,"freeplayChar");
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::seenCutscene,"seenCutscene");
	HX_MARK_MEMBER_NAME(PlayState_obj::hasPlayedOnce,"hasPlayedOnce");
	HX_MARK_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_MARK_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_MARK_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::player2Strums,"player2Strums");
	HX_MARK_MEMBER_NAME(PlayState_obj::practiceMode,"practiceMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::vhsShader,"vhsShader");
	HX_MARK_MEMBER_NAME(PlayState_obj::chromaticAbberation,"chromaticAbberation");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::deathCounter,"deathCounter");
	HX_VISIT_MEMBER_NAME(PlayState_obj::changedDifficulty,"changedDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::selectedBF,"selectedBF");
	HX_VISIT_MEMBER_NAME(PlayState_obj::freeplayChar,"freeplayChar");
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::seenCutscene,"seenCutscene");
	HX_VISIT_MEMBER_NAME(PlayState_obj::hasPlayedOnce,"hasPlayedOnce");
	HX_VISIT_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_VISIT_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_VISIT_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::player2Strums,"player2Strums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::practiceMode,"practiceMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::vhsShader,"vhsShader");
	HX_VISIT_MEMBER_NAME(PlayState_obj::chromaticAbberation,"chromaticAbberation");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("curStage",1e,65,b9,cb),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("deathCounter",28,56,4b,1f),
	HX_("changedDifficulty",4f,3c,c6,3f),
	HX_("selectedBF",df,f0,d0,c6),
	HX_("freeplayChar",96,eb,c3,dd),
	HX_("instance",95,1f,e1,59),
	HX_("seenCutscene",25,d1,95,b5),
	HX_("hasPlayedOnce",6e,f2,2e,b7),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("player2Strums",9b,9b,26,0f),
	HX_("practiceMode",be,79,8f,7f),
	HX_("campaignScore",22,22,d6,07),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("vhsShader",06,4f,9e,77),
	HX_("chromaticAbberation",9f,84,d1,52),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_70_boot)
HXDLIN(  70)		curStage = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_72_boot)
HXDLIN(  72)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_73_boot)
HXDLIN(  73)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_74_boot)
HXDLIN(  74)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_75_boot)
HXDLIN(  75)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_76_boot)
HXDLIN(  76)		deathCounter = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_77_boot)
HXDLIN(  77)		changedDifficulty = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_78_boot)
HXDLIN(  78)		selectedBF = HX_("bf",c4,55,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_79_boot)
HXDLIN(  79)		freeplayChar = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_81_boot)
HXDLIN(  81)		seenCutscene = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_83_boot)
HXDLIN(  83)		hasPlayedOnce = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_113_boot)
HXDLIN( 113)		strumLineNotes = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_114_boot)
HXDLIN( 114)		playerStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_115_boot)
HXDLIN( 115)		player2Strums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_181_boot)
HXDLIN( 181)		practiceMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_183_boot)
HXDLIN( 183)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_190_boot)
HXDLIN( 190)		daPixelZoom = ((Float)6);
            	}
}

