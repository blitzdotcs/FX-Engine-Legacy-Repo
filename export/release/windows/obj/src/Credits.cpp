// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Credits
#include <Credits.h>
#endif
#ifndef INCLUDED_CreditsMetadata
#include <CreditsMetadata.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c903b124f000b8a3_25_new,"Credits","new",0xb1d65bec,"Credits.new","Credits.hx",25,0x24628504)
HX_LOCAL_STACK_FRAME(_hx_pos_c903b124f000b8a3_38_create,"Credits","create",0x64ff9af0,"Credits.create","Credits.hx",38,0x24628504)
HX_LOCAL_STACK_FRAME(_hx_pos_c903b124f000b8a3_120_update,"Credits","update",0x6ff5b9fd,"Credits.update","Credits.hx",120,0x24628504)
HX_LOCAL_STACK_FRAME(_hx_pos_c903b124f000b8a3_154_changeSelection,"Credits","changeSelection",0xdea14648,"Credits.changeSelection","Credits.hx",154,0x24628504)
HX_LOCAL_STACK_FRAME(_hx_pos_c903b124f000b8a3_29_boot,"Credits","boot",0xe1d31326,"Credits.boot","Credits.hx",29,0x24628504)

void Credits_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_c903b124f000b8a3_25_new)
HXLINE(  27)		this->credits = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  25)		super::__construct(TransIn,TransOut);
            	}

Dynamic Credits_obj::__CreateEmpty() { return new Credits_obj; }

void *Credits_obj::_hx_vtable = 0;

Dynamic Credits_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Credits_obj > _hx_result = new Credits_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Credits_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x152a27aa) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x152a27aa;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void Credits_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_c903b124f000b8a3_38_create)
HXLINE(  39)		::String library = null();
HXDLIN(  39)		::Array< ::String > initCreditlist = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("creditsList",98,6b,74,e1)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  41)		::String library1 = null();
HXDLIN(  41)		if (::openfl::utils::Assets_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("creditsList",98,6b,74,e1)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library1),null())) {
HXLINE(  43)			::String library = null();
HXDLIN(  43)			initCreditlist = ::StringTools_obj::trim(::openfl::utils::Assets_obj::getText(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("creditsList",98,6b,74,e1)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library))).split(HX_("\n",0a,00,00,00));
HXLINE(  45)			{
HXLINE(  45)				int _g = 0;
HXDLIN(  45)				int _g1 = initCreditlist->length;
HXDLIN(  45)				while((_g < _g1)){
HXLINE(  45)					_g = (_g + 1);
HXDLIN(  45)					int i = (_g - 1);
HXLINE(  47)					initCreditlist[i] = ::StringTools_obj::trim(initCreditlist->__get(i));
            				}
            			}
            		}
            		else {
HXLINE(  52)			::haxe::Log_obj::trace(HX_("Cannot find 'creditsList' in data directory.",d0,53,25,3e),::hx::SourceInfo(HX_("source/Credits.hx",f8,4c,c7,b0),52,HX_("Credits",fa,35,af,e0),HX_("create",fc,66,0f,7c)));
HXLINE(  53)			::haxe::Log_obj::trace(HX_("Replacing it with normal credits...",d9,7f,fc,26),::hx::SourceInfo(HX_("source/Credits.hx",f8,4c,c7,b0),53,HX_("Credits",fa,35,af,e0),HX_("create",fc,66,0f,7c)));
HXLINE(  54)			initCreditlist = ::StringTools_obj::trim(HX_("TyDev:Main FX Engine Programmer\n\r\n            Chocolate Engine Team:Modding System + Better Credits\n\r\n            Funkin' Team:Original Game Devs\n\r\n            Kade Engine Team:I Stole some code\n\r\n            Psych Engine Team:I stole some code",54,db,6b,a6)).split(HX_("\n",0a,00,00,00));
HXLINE(  61)			{
HXLINE(  61)				int _g = 0;
HXDLIN(  61)				int _g1 = initCreditlist->length;
HXDLIN(  61)				while((_g < _g1)){
HXLINE(  61)					_g = (_g + 1);
HXDLIN(  61)					int i = (_g - 1);
HXLINE(  63)					initCreditlist[i] = ::StringTools_obj::trim(initCreditlist->__get(i));
            				}
            			}
            		}
HXLINE(  69)		{
HXLINE(  69)			int _g = 0;
HXDLIN(  69)			int _g1 = initCreditlist->length;
HXDLIN(  69)			while((_g < _g1)){
HXLINE(  69)				_g = (_g + 1);
HXDLIN(  69)				int i = (_g - 1);
HXLINE(  71)				::Array< ::String > data = initCreditlist->__get(i).split(HX_(":",3a,00,00,00));
HXLINE(  72)				::Array< ::Dynamic> _hx_tmp = this->credits;
HXDLIN(  72)				_hx_tmp->push( ::CreditsMetadata_obj::__alloc( HX_CTX ,data->__get(0),data->__get(1)));
            			}
            		}
HXLINE(  77)		::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE(  80)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  80)		::String library2 = null();
HXDLIN(  80)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(  81)		this->bg->set_color(-16181);
HXLINE(  82)		this->add(this->bg);
HXLINE(  84)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,600,1180,HX_("",00,00,00,00),32,null());
HXLINE(  85)		this->descText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  86)		this->descText->scrollFactor->set(null(),null());
HXLINE(  87)		this->descText->set_text(HX_("what",44,a3,f7,4e));
HXLINE(  88)		this->descText->set_borderSize(((Float)2.4));
HXLINE(  89)		this->add(this->descText);
HXLINE(  91)		this->grpCredits =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  92)		this->add(this->grpCredits);
HXLINE(  94)		{
HXLINE(  94)			int _g2 = 0;
HXDLIN(  94)			int _g3 = this->credits->length;
HXDLIN(  94)			while((_g2 < _g3)){
HXLINE(  94)				_g2 = (_g2 + 1);
HXDLIN(  94)				int i = (_g2 - 1);
HXLINE(  96)				 ::Alphabet creditText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->credits->__get(i).StaticCast<  ::CreditsMetadata >()->modderName,true,false);
HXLINE(  97)				creditText->isMenuItem = true;
HXLINE(  98)				creditText->targetY = ( (Float)(i) );
HXLINE(  99)				this->grpCredits->add(creditText).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE( 106)		this->changeSelection(null());
HXLINE( 110)		 ::flixel::text::FlxText descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,600,1180,HX_("",00,00,00,00),32,null());
HXLINE( 111)		descText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 112)		descText->scrollFactor->set(null(),null());
HXLINE( 113)		descText->set_borderSize(((Float)2.4));
HXLINE( 114)		this->add(descText);
HXLINE( 116)		this->super::create();
            	}


void Credits_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_c903b124f000b8a3_120_update)
HXLINE( 121)		this->super::update(elapsed);
HXLINE( 123)		bool upP = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 124)		bool downP = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 125)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 126)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 126)		bool space = _this->keyManager->checkStatusUnsafe(32,_this->status);
HXLINE( 128)		int shiftMult = 1;
HXLINE( 129)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 129)		if (_this1->keyManager->checkStatusUnsafe(16,_this1->status)) {
HXLINE( 130)			shiftMult = 3;
            		}
HXLINE( 132)		if (upP) {
HXLINE( 134)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 134)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 135)			this->changeSelection(-(shiftMult));
            		}
HXLINE( 137)		if (downP) {
HXLINE( 139)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 139)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 140)			this->changeSelection(shiftMult);
            		}
HXLINE( 143)		if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 145)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 145)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 146)			this->changeSelection(-(::Std_obj::_hx_int(( (Float)(::flixel::FlxG_obj::mouse->wheel) ))));
            		}
HXLINE( 149)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 150)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 150)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 150)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


void Credits_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_c903b124f000b8a3_154_changeSelection)
HXLINE( 155)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Credits >();
HXDLIN( 155)		::Credits_obj::curSelected = (::Credits_obj::curSelected + change);
HXLINE( 157)		if ((::Credits_obj::curSelected < 0)) {
HXLINE( 158)			::Credits_obj::curSelected = (this->credits->length - 1);
            		}
HXLINE( 159)		if ((::Credits_obj::curSelected >= this->credits->length)) {
HXLINE( 160)			::Credits_obj::curSelected = 0;
            		}
HXLINE( 162)		this->descText->set_text(this->credits->__get(::Credits_obj::curSelected).StaticCast<  ::CreditsMetadata >()->desc);
HXLINE( 165)		int bullShit = 0;
HXLINE( 167)		{
HXLINE( 167)			int _g = 0;
HXDLIN( 167)			::Array< ::Dynamic> _g1 = this->grpCredits->members;
HXDLIN( 167)			while((_g < _g1->length)){
HXLINE( 167)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 167)				_g = (_g + 1);
HXLINE( 169)				item->targetY = ( (Float)((bullShit - ::Credits_obj::curSelected)) );
HXLINE( 170)				bullShit = (bullShit + 1);
HXLINE( 172)				item->set_alpha(((Float)0.6));
HXLINE( 175)				if ((item->targetY == 0)) {
HXLINE( 177)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Credits_obj,changeSelection,(void))

int Credits_obj::curSelected;


::hx::ObjectPtr< Credits_obj > Credits_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< Credits_obj > __this = new Credits_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< Credits_obj > Credits_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	Credits_obj *__this = (Credits_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Credits_obj), true, "Credits"));
	*(void **)__this = Credits_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

Credits_obj::Credits_obj()
{
}

void Credits_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Credits);
	HX_MARK_MEMBER_NAME(credits,"credits");
	HX_MARK_MEMBER_NAME(grpCredits,"grpCredits");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(colorTween,"colorTween");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Credits_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(credits,"credits");
	HX_VISIT_MEMBER_NAME(grpCredits,"grpCredits");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(colorTween,"colorTween");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Credits_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"credits") ) { return ::hx::Val( credits ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpCredits") ) { return ::hx::Val( grpCredits ); }
		if (HX_FIELD_EQ(inName,"colorTween") ) { return ::hx::Val( colorTween ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Credits_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val Credits_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"credits") ) { credits=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpCredits") ) { grpCredits=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorTween") ) { colorTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Credits_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Credits_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("credits",1a,0e,5e,13));
	outFields->push(HX_("grpCredits",b5,20,38,34));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("colorTween",08,c2,dc,3d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Credits_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Credits_obj,credits),HX_("credits",1a,0e,5e,13)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Credits_obj,grpCredits),HX_("grpCredits",b5,20,38,34)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Credits_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Credits_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(Credits_obj,colorTween),HX_("colorTween",08,c2,dc,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Credits_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Credits_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Credits_obj_sMemberFields[] = {
	HX_("credits",1a,0e,5e,13),
	HX_("grpCredits",b5,20,38,34),
	HX_("descText",9e,53,35,f3),
	HX_("bg",c5,55,00,00),
	HX_("colorTween",08,c2,dc,3d),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void Credits_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Credits_obj::curSelected,"curSelected");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Credits_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Credits_obj::curSelected,"curSelected");
};

#endif

::hx::Class Credits_obj::__mClass;

static ::String Credits_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	::String(null())
};

void Credits_obj::__register()
{
	Credits_obj _hx_dummy;
	Credits_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Credits",fa,35,af,e0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Credits_obj::__GetStatic;
	__mClass->mSetStaticField = &Credits_obj::__SetStatic;
	__mClass->mMarkFunc = Credits_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Credits_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Credits_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Credits_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Credits_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Credits_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Credits_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Credits_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c903b124f000b8a3_29_boot)
HXDLIN(  29)		curSelected = 0;
            	}
}

