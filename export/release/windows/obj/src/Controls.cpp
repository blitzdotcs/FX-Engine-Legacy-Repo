// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Control
#include <Control.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_Device
#include <Device.h>
#endif
#ifndef INCLUDED_KeyboardScheme
#include <KeyboardScheme.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionAnalog
#include <flixel/input/actions/FlxActionAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputDigital
#include <flixel/input/actions/FlxActionInputDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionManager
#include <flixel/input/actions/FlxActionManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_948b5caa279cd923_96_new,"Controls","new",0x4f8de688,"Controls.new","Controls.hx",96,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_128_get_UP,"Controls","get_UP",0xb958147c,"Controls.get_UP","Controls.hx",128,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_133_get_LEFT,"Controls","get_LEFT",0xc8e82468,"Controls.get_LEFT","Controls.hx",133,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_138_get_RIGHT,"Controls","get_RIGHT",0x7944c43b,"Controls.get_RIGHT","Controls.hx",138,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_143_get_DOWN,"Controls","get_DOWN",0xc3a614c3,"Controls.get_DOWN","Controls.hx",143,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_148_get_UP_P,"Controls","get_UP_P",0xcee37e8d,"Controls.get_UP_P","Controls.hx",148,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_153_get_LEFT_P,"Controls","get_LEFT_P",0xee886179,"Controls.get_LEFT_P","Controls.hx",153,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_158_get_RIGHT_P,"Controls","get_RIGHT_P",0xe72adc0c,"Controls.get_RIGHT_P","Controls.hx",158,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_163_get_DOWN_P,"Controls","get_DOWN_P",0x88e75e94,"Controls.get_DOWN_P","Controls.hx",163,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_168_get_UP_R,"Controls","get_UP_R",0xcee37e8f,"Controls.get_UP_R","Controls.hx",168,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_173_get_LEFT_R,"Controls","get_LEFT_R",0xee88617b,"Controls.get_LEFT_R","Controls.hx",173,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_178_get_RIGHT_R,"Controls","get_RIGHT_R",0xe72adc0e,"Controls.get_RIGHT_R","Controls.hx",178,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_183_get_DOWN_R,"Controls","get_DOWN_R",0x88e75e96,"Controls.get_DOWN_R","Controls.hx",183,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_188_get_ACCEPT,"Controls","get_ACCEPT",0x5fc72da9,"Controls.get_ACCEPT","Controls.hx",188,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_193_get_BACK,"Controls","get_BACK",0xc248f688,"Controls.get_BACK","Controls.hx",193,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_198_get_PAUSE,"Controls","get_PAUSE",0x4d388f55,"Controls.get_PAUSE","Controls.hx",198,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_203_get_RESET,"Controls","get_RESET",0x76a9022e,"Controls.get_RESET","Controls.hx",203,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_208_get_CHEAT,"Controls","get_CHEAT",0xd5974f72,"Controls.get_CHEAT","Controls.hx",208,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_272_update,"Controls","update",0x9d2db8e1,"Controls.update","Controls.hx",272,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_282_checkByName,"Controls","checkByName",0xbe587cd2,"Controls.checkByName","Controls.hx",282,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_286_getDialogueName,"Controls","getDialogueName",0xe1263f61,"Controls.getDialogueName","Controls.hx",286,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_298_getDialogueNameFromToken,"Controls","getDialogueNameFromToken",0x6458998e,"Controls.getDialogueNameFromToken","Controls.hx",298,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_303_getActionFromControl,"Controls","getActionFromControl",0xa2e9ae5f,"Controls.getActionFromControl","Controls.hx",303,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_331_forEachBound,"Controls","forEachBound",0x9a98930c,"Controls.forEachBound","Controls.hx",331,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_363_replaceBinding,"Controls","replaceBinding",0x45096449,"Controls.replaceBinding","Controls.hx",363,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_384_copyFrom,"Controls","copyFrom",0xdf1da497,"Controls.copyFrom","Controls.hx",384,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_431_copyTo,"Controls","copyTo",0xdf5b4f68,"Controls.copyTo","Controls.hx",431,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_436_mergeKeyboardScheme,"Controls","mergeKeyboardScheme",0x61e2372c,"Controls.mergeKeyboardScheme","Controls.hx",436,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_455_bindKeys,"Controls","bindKeys",0xcb8dbf29,"Controls.bindKeys","Controls.hx",455,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_468_unbindKeys,"Controls","unbindKeys",0xec4b8c82,"Controls.unbindKeys","Controls.hx",468,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_492_setKeyboardScheme,"Controls","setKeyboardScheme",0x039bdb96,"Controls.setKeyboardScheme","Controls.hx",492,0x0ab041e8)
static const int _hx_array_data_116e4296_443[] = {
	(int)78,(int)38,
};
static const int _hx_array_data_116e4296_444[] = {
	(int)88,(int)40,
};
static const int _hx_array_data_116e4296_445[] = {
	(int)90,(int)37,
};
static const int _hx_array_data_116e4296_446[] = {
	(int)77,(int)39,
};
static const int _hx_array_data_116e4296_447[] = {
	(int)32,(int)13,
};
static const int _hx_array_data_116e4296_448[] = {
	(int)8,(int)27,
};
static const int _hx_array_data_116e4296_449[] = {
	(int)80,(int)13,(int)27,
};
static const int _hx_array_data_116e4296_450[] = {
	(int)82,
};
static const int _hx_array_data_116e4296_451[] = {
	(int)87,(int)38,
};
static const int _hx_array_data_116e4296_452[] = {
	(int)83,(int)40,
};
static const int _hx_array_data_116e4296_453[] = {
	(int)65,(int)37,
};
static const int _hx_array_data_116e4296_454[] = {
	(int)68,(int)39,
};
static const int _hx_array_data_116e4296_455[] = {
	(int)71,(int)90,(int)32,(int)13,
};
static const int _hx_array_data_116e4296_456[] = {
	(int)8,(int)27,
};
static const int _hx_array_data_116e4296_457[] = {
	(int)82,
};
static const int _hx_array_data_116e4296_458[] = {
	(int)38,
};
static const int _hx_array_data_116e4296_459[] = {
	(int)40,
};
static const int _hx_array_data_116e4296_460[] = {
	(int)37,
};
static const int _hx_array_data_116e4296_461[] = {
	(int)39,
};
static const int _hx_array_data_116e4296_462[] = {
	(int)79,
};
static const int _hx_array_data_116e4296_463[] = {
	(int)80,
};
static const int _hx_array_data_116e4296_464[] = {
	(int)13,
};
static const int _hx_array_data_116e4296_465[] = {
	(int)8,
};
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_568_removeKeyboard,"Controls","removeKeyboard",0xd2dac3e3,"Controls.removeKeyboard","Controls.hx",568,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_581_addGamepad,"Controls","addGamepad",0xa2c68b58,"Controls.addGamepad","Controls.hx",581,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_594_addGamepadLiteral,"Controls","addGamepadLiteral",0x50b4e0f7,"Controls.addGamepadLiteral","Controls.hx",594,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_607_removeGamepad,"Controls","removeGamepad",0xfdf294e5,"Controls.removeGamepad","Controls.hx",607,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_625_addDefaultGamepad,"Controls","addDefaultGamepad",0xaa5e6409,"Controls.addDefaultGamepad","Controls.hx",625,0x0ab041e8)
static const int _hx_array_data_116e4296_529[] = {
	(int)0,
};
static const int _hx_array_data_116e4296_530[] = {
	(int)1,
};
static const int _hx_array_data_116e4296_531[] = {
	(int)11,(int)34,
};
static const int _hx_array_data_116e4296_532[] = {
	(int)12,(int)36,
};
static const int _hx_array_data_116e4296_533[] = {
	(int)13,(int)37,
};
static const int _hx_array_data_116e4296_534[] = {
	(int)14,(int)35,
};
static const int _hx_array_data_116e4296_535[] = {
	(int)7,
};
static const int _hx_array_data_116e4296_536[] = {
	(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_659_bindButtons,"Controls","bindButtons",0x94dee42c,"Controls.bindButtons","Controls.hx",659,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_672_unbindButtons,"Controls","unbindButtons",0x83d33473,"Controls.unbindButtons","Controls.hx",672,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_696_getInputsFor,"Controls","getInputsFor",0xa3571ac2,"Controls.getInputsFor","Controls.hx",696,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_720_removeDevice,"Controls","removeDevice",0x4c1b5cd2,"Controls.removeDevice","Controls.hx",720,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_318_init,"Controls","init",0x495487e8,"Controls.init","Controls.hx",318,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_476_addKeys,"Controls","addKeys",0xd0486edd,"Controls.addKeys","Controls.hx",476,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_481_removeKeys,"Controls","removeKeys",0x75dc9b30,"Controls.removeKeys","Controls.hx",481,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_680_addButtons,"Controls","addButtons",0xe3b5fcf8,"Controls.addButtons","Controls.hx",680,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_685_removeButtons,"Controls","removeButtons",0x3ee20685,"Controls.removeButtons","Controls.hx",685,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_731_isDevice,"Controls","isDevice",0xe09e10f8,"Controls.isDevice","Controls.hx",731,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_740_isGamepad,"Controls","isGamepad",0x5bcd81ff,"Controls.isGamepad","Controls.hx",740,0x0ab041e8)

void Controls_obj::__construct(::String name, ::KeyboardScheme __o_scheme){
            		 ::KeyboardScheme scheme = __o_scheme;
            		if (::hx::IsNull(__o_scheme)) scheme = ::KeyboardScheme_obj::None_dyn();
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_96_new)
HXLINE( 123)		this->keyboardScheme = ::KeyboardScheme_obj::None_dyn();
HXLINE( 122)		this->gamepadsAdded = ::Array_obj< int >::__new(0);
HXLINE( 117)		this->byName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 114)		this->_cheat =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("cheat",13,97,b6,45),null());
HXLINE( 113)		this->_reset =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("reset",cf,49,c8,e6),null());
HXLINE( 112)		this->_pause =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("pause",f6,d6,57,bd),null());
HXLINE( 111)		this->_back =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("back",27,da,10,41),null());
HXLINE( 110)		this->_accept =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("accept",08,93,06,0b),null());
HXLINE( 109)		this->_downR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down-release",9c,bf,5b,fc),null());
HXLINE( 108)		this->_rightR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right-release",16,dd,28,fb),null());
HXLINE( 107)		this->_leftR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left-release",41,7c,5d,2e),null());
HXLINE( 106)		this->_upR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up-release",95,4e,72,92),null());
HXLINE( 105)		this->_downP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down-press",18,fe,06,cf),null());
HXLINE( 104)		this->_rightP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right-press",12,e9,87,fb),null());
HXLINE( 103)		this->_leftP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left-press",7d,d7,13,c1),null());
HXLINE( 102)		this->_upP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up-press",d1,ac,09,1c),null());
HXLINE( 101)		this->_down =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down",62,f8,6d,42),null());
HXLINE( 100)		this->_right =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right",dc,0b,64,e9),null());
HXLINE(  99)		this->_left =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left",07,08,b0,47),null());
HXLINE(  98)		this->_up =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up",5b,66,00,00),null());
HXLINE( 213)		super::__construct(name,null(),null());
HXLINE( 215)		this->add(this->_up);
HXLINE( 216)		this->add(this->_left);
HXLINE( 217)		this->add(this->_right);
HXLINE( 218)		this->add(this->_down);
HXLINE( 219)		this->add(this->_upP);
HXLINE( 220)		this->add(this->_leftP);
HXLINE( 221)		this->add(this->_rightP);
HXLINE( 222)		this->add(this->_downP);
HXLINE( 223)		this->add(this->_upR);
HXLINE( 224)		this->add(this->_leftR);
HXLINE( 225)		this->add(this->_rightR);
HXLINE( 226)		this->add(this->_downR);
HXLINE( 227)		this->add(this->_accept);
HXLINE( 228)		this->add(this->_back);
HXLINE( 229)		this->add(this->_pause);
HXLINE( 230)		this->add(this->_reset);
HXLINE( 231)		this->add(this->_cheat);
HXLINE( 233)		{
HXLINE( 233)			int _g = 0;
HXDLIN( 233)			::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 233)			while((_g < _g1->length)){
HXLINE( 233)				 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 233)				_g = (_g + 1);
HXLINE( 234)				this->byName->set(action->name,action);
            			}
            		}
HXLINE( 236)		this->setKeyboardScheme(scheme,false);
            	}

Dynamic Controls_obj::__CreateEmpty() { return new Controls_obj; }

void *Controls_obj::_hx_vtable = 0;

Dynamic Controls_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Controls_obj > _hx_result = new Controls_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Controls_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x315ddd0d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x315ddd0d;
	} else {
		return inClassId==(int)0x6cff3556;
	}
}

bool Controls_obj::get_UP(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_128_get_UP)
HXDLIN( 128)		return this->_up->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP,return )

bool Controls_obj::get_LEFT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_133_get_LEFT)
HXDLIN( 133)		return this->_left->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT,return )

bool Controls_obj::get_RIGHT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_138_get_RIGHT)
HXDLIN( 138)		return this->_right->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT,return )

bool Controls_obj::get_DOWN(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_143_get_DOWN)
HXDLIN( 143)		return this->_down->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN,return )

bool Controls_obj::get_UP_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_148_get_UP_P)
HXDLIN( 148)		return this->_upP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP_P,return )

bool Controls_obj::get_LEFT_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_153_get_LEFT_P)
HXDLIN( 153)		return this->_leftP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT_P,return )

bool Controls_obj::get_RIGHT_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_158_get_RIGHT_P)
HXDLIN( 158)		return this->_rightP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT_P,return )

bool Controls_obj::get_DOWN_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_163_get_DOWN_P)
HXDLIN( 163)		return this->_downP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN_P,return )

bool Controls_obj::get_UP_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_168_get_UP_R)
HXDLIN( 168)		return this->_upR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP_R,return )

bool Controls_obj::get_LEFT_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_173_get_LEFT_R)
HXDLIN( 173)		return this->_leftR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT_R,return )

bool Controls_obj::get_RIGHT_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_178_get_RIGHT_R)
HXDLIN( 178)		return this->_rightR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT_R,return )

bool Controls_obj::get_DOWN_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_183_get_DOWN_R)
HXDLIN( 183)		return this->_downR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN_R,return )

bool Controls_obj::get_ACCEPT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_188_get_ACCEPT)
HXDLIN( 188)		return this->_accept->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_ACCEPT,return )

bool Controls_obj::get_BACK(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_193_get_BACK)
HXDLIN( 193)		return this->_back->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_BACK,return )

bool Controls_obj::get_PAUSE(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_198_get_PAUSE)
HXDLIN( 198)		return this->_pause->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_PAUSE,return )

bool Controls_obj::get_RESET(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_203_get_RESET)
HXDLIN( 203)		return this->_reset->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RESET,return )

bool Controls_obj::get_CHEAT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_208_get_CHEAT)
HXDLIN( 208)		return this->_cheat->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_CHEAT,return )

void Controls_obj::update(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_272_update)
HXDLIN( 272)		this->super::update();
            	}


bool Controls_obj::checkByName(::String name){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_282_checkByName)
HXDLIN( 282)		return ( ( ::flixel::input::actions::FlxActionDigital)(this->byName->get(name)) )->check();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,checkByName,return )

::String Controls_obj::getDialogueName( ::flixel::input::actions::FlxActionDigital action){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_286_getDialogueName)
HXLINE( 287)		 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(0).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 288)		 ::flixel::input::actions::FlxInputDevice _g = input->device;
HXDLIN( 288)		switch((int)(_g->_hx_getIndex())){
            			case (int)3: {
HXLINE( 290)				return ((HX_("[",5b,00,00,00) + ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get(input->inputID)) + HX_("]",5d,00,00,00));
            			}
            			break;
            			case (int)4: {
HXLINE( 291)				return ((HX_("(",28,00,00,00) + ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get(input->inputID)) + HX_(")",29,00,00,00));
            			}
            			break;
            			default:{
HXLINE( 292)				 ::flixel::input::actions::FlxInputDevice device = _g;
HXDLIN( 292)				HX_STACK_DO_THROW((HX_("unhandled device: ",f9,e1,62,a5) + ::Std_obj::string(device)));
            			}
            		}
HXLINE( 288)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getDialogueName,return )

::String Controls_obj::getDialogueNameFromToken(::String token){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_298_getDialogueNameFromToken)
HXDLIN( 298)		::cpp::VirtualArray params = null();
HXDLIN( 298)		return this->getDialogueName(this->getActionFromControl(::Type_obj::createEnum(::hx::ClassOf< ::Control >(),token.toUpperCase(),params)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getDialogueNameFromToken,return )

 ::flixel::input::actions::FlxActionDigital Controls_obj::getActionFromControl( ::Control control){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_303_getActionFromControl)
HXDLIN( 303)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXLINE( 305)				return this->_up;
            			}
            			break;
            			case (int)1: {
HXLINE( 307)				return this->_left;
            			}
            			break;
            			case (int)2: {
HXLINE( 308)				return this->_right;
            			}
            			break;
            			case (int)3: {
HXLINE( 306)				return this->_down;
            			}
            			break;
            			case (int)4: {
HXLINE( 312)				return this->_reset;
            			}
            			break;
            			case (int)5: {
HXLINE( 309)				return this->_accept;
            			}
            			break;
            			case (int)6: {
HXLINE( 310)				return this->_back;
            			}
            			break;
            			case (int)7: {
HXLINE( 311)				return this->_pause;
            			}
            			break;
            			case (int)8: {
HXLINE( 313)				return this->_cheat;
            			}
            			break;
            		}
HXLINE( 303)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getActionFromControl,return )

void Controls_obj::forEachBound( ::Control control, ::Dynamic func){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_331_forEachBound)
HXDLIN( 331)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXLINE( 334)				func(this->_up,1);
HXLINE( 335)				func(this->_upP,2);
HXLINE( 336)				func(this->_upR,-1);
            			}
            			break;
            			case (int)1: {
HXLINE( 338)				func(this->_left,1);
HXLINE( 339)				func(this->_leftP,2);
HXLINE( 340)				func(this->_leftR,-1);
            			}
            			break;
            			case (int)2: {
HXLINE( 342)				func(this->_right,1);
HXLINE( 343)				func(this->_rightP,2);
HXLINE( 344)				func(this->_rightR,-1);
            			}
            			break;
            			case (int)3: {
HXLINE( 346)				func(this->_down,1);
HXLINE( 347)				func(this->_downP,2);
HXLINE( 348)				func(this->_downR,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 356)				func(this->_reset,2);
            			}
            			break;
            			case (int)5: {
HXLINE( 350)				func(this->_accept,2);
            			}
            			break;
            			case (int)6: {
HXLINE( 352)				func(this->_back,2);
            			}
            			break;
            			case (int)7: {
HXLINE( 354)				func(this->_pause,2);
            			}
            			break;
            			case (int)8: {
HXLINE( 358)				func(this->_cheat,2);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,forEachBound,(void))

void Controls_obj::replaceBinding( ::Control control, ::Device device, ::Dynamic toAdd, ::Dynamic toRemove){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_363_replaceBinding)
HXLINE( 364)		if (::hx::IsEq( toAdd,toRemove )) {
HXLINE( 365)			return;
            		}
HXLINE( 367)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 370)				if (::hx::IsNotNull( toRemove )) {
HXLINE( 371)					this->unbindKeys(control,::Array_obj< int >::__new(1)->init(0,toRemove));
            				}
HXLINE( 372)				if (::hx::IsNotNull( toAdd )) {
HXLINE( 373)					this->bindKeys(control,::Array_obj< int >::__new(1)->init(0,toAdd));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 375)				int id = device->_hx_getInt(0);
HXDLIN( 375)				{
HXLINE( 376)					if (::hx::IsNotNull( toRemove )) {
HXLINE( 377)						this->unbindButtons(control,id,::Array_obj< int >::__new(1)->init(0,toRemove));
            					}
HXLINE( 378)					if (::hx::IsNotNull( toAdd )) {
HXLINE( 379)						this->bindButtons(control,id,::Array_obj< int >::__new(1)->init(0,toAdd));
            					}
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Controls_obj,replaceBinding,(void))

void Controls_obj::copyFrom( ::Controls controls, ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_384_copyFrom)
HXLINE( 386)		{
HXLINE( 386)			::Dynamic map = controls->byName;
HXDLIN( 386)			::Dynamic _g_map = map;
HXDLIN( 386)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 386)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 386)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 386)				 ::flixel::input::actions::FlxActionDigital _g_value = ( ( ::flixel::input::actions::FlxActionDigital)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 386)				::String _g_key = key;
HXDLIN( 386)				::String name = _g_key;
HXDLIN( 386)				 ::flixel::input::actions::FlxActionDigital action = _g_value;
HXLINE( 388)				{
HXLINE( 388)					int _g = 0;
HXDLIN( 388)					::Array< ::Dynamic> _g1 = action->inputs;
HXDLIN( 388)					while((_g < _g1->length)){
HXLINE( 388)						 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 388)						_g = (_g + 1);
HXLINE( 390)						bool _hx_tmp;
HXDLIN( 390)						if (::hx::IsNotNull( device )) {
HXLINE( 390)							_hx_tmp = ::Controls_obj::isDevice(input,device);
            						}
            						else {
HXLINE( 390)							_hx_tmp = true;
            						}
HXDLIN( 390)						if (_hx_tmp) {
HXLINE( 391)							( ( ::flixel::input::actions::FlxActionDigital)(this->byName->get(name)) )->add(( ( ::flixel::input::actions::FlxActionInputDigital)(input) ));
            						}
            					}
            				}
            			}
            		}
HXLINE( 406)		if (::hx::IsNull( device )) {
HXLINE( 411)			{
HXLINE( 411)				int _g2 = 0;
HXDLIN( 411)				::Array< int > _g3 = controls->gamepadsAdded;
HXDLIN( 411)				while((_g2 < _g3->length)){
HXLINE( 411)					int gamepad = _g3->__get(_g2);
HXDLIN( 411)					_g2 = (_g2 + 1);
HXLINE( 412)					if (!(this->gamepadsAdded->contains(gamepad))) {
HXLINE( 413)						this->gamepadsAdded->push(gamepad);
            					}
            				}
            			}
HXLINE( 420)			this->mergeKeyboardScheme(controls->keyboardScheme);
            		}
            		else {
HXLINE( 406)			switch((int)(device->_hx_getIndex())){
            				case (int)0: {
HXLINE( 425)					this->mergeKeyboardScheme(controls->keyboardScheme);
            				}
            				break;
            				case (int)1: {
HXLINE( 422)					int id = device->_hx_getInt(0);
HXLINE( 423)					this->gamepadsAdded->push(id);
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,copyFrom,(void))

void Controls_obj::copyTo( ::Controls controls, ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_431_copyTo)
HXDLIN( 431)		controls->copyFrom(::hx::ObjectPtr<OBJ_>(this),device);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,copyTo,(void))

void Controls_obj::mergeKeyboardScheme( ::KeyboardScheme scheme){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_436_mergeKeyboardScheme)
HXDLIN( 436)		if (::hx::IsPointerNotEq( scheme,::KeyboardScheme_obj::None_dyn() )) {
HXLINE( 438)			if ((this->keyboardScheme->_hx_getIndex() == 2)) {
HXLINE( 441)				this->keyboardScheme = scheme;
            			}
            			else {
HXLINE( 443)				this->keyboardScheme = ::KeyboardScheme_obj::Custom_dyn();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,mergeKeyboardScheme,(void))

void Controls_obj::bindKeys( ::Control control,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_455_bindKeys)
HXDLIN( 455)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 455)					int state = 1;
HXDLIN( 455)					int _g = 0;
HXDLIN( 455)					while((_g < keys->length)){
HXDLIN( 455)						int key = keys->__get(_g);
HXDLIN( 455)						_g = (_g + 1);
HXDLIN( 455)						action->addKey(key,state);
            					}
            				}
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 455)					int state1 = 2;
HXDLIN( 455)					int _g1 = 0;
HXDLIN( 455)					while((_g1 < keys->length)){
HXDLIN( 455)						int key1 = keys->__get(_g1);
HXDLIN( 455)						_g1 = (_g1 + 1);
HXDLIN( 455)						action1->addKey(key1,state1);
            					}
            				}
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 455)					int state2 = -1;
HXDLIN( 455)					int _g2 = 0;
HXDLIN( 455)					while((_g2 < keys->length)){
HXDLIN( 455)						int key2 = keys->__get(_g2);
HXDLIN( 455)						_g2 = (_g2 + 1);
HXDLIN( 455)						action2->addKey(key2,state2);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action3 = this->_left;
HXDLIN( 455)					int state3 = 1;
HXDLIN( 455)					int _g3 = 0;
HXDLIN( 455)					while((_g3 < keys->length)){
HXDLIN( 455)						int key3 = keys->__get(_g3);
HXDLIN( 455)						_g3 = (_g3 + 1);
HXDLIN( 455)						action3->addKey(key3,state3);
            					}
            				}
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action4 = this->_leftP;
HXDLIN( 455)					int state4 = 2;
HXDLIN( 455)					int _g4 = 0;
HXDLIN( 455)					while((_g4 < keys->length)){
HXDLIN( 455)						int key4 = keys->__get(_g4);
HXDLIN( 455)						_g4 = (_g4 + 1);
HXDLIN( 455)						action4->addKey(key4,state4);
            					}
            				}
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action5 = this->_leftR;
HXDLIN( 455)					int state5 = -1;
HXDLIN( 455)					int _g5 = 0;
HXDLIN( 455)					while((_g5 < keys->length)){
HXDLIN( 455)						int key5 = keys->__get(_g5);
HXDLIN( 455)						_g5 = (_g5 + 1);
HXDLIN( 455)						action5->addKey(key5,state5);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action6 = this->_right;
HXDLIN( 455)					int state6 = 1;
HXDLIN( 455)					int _g6 = 0;
HXDLIN( 455)					while((_g6 < keys->length)){
HXDLIN( 455)						int key6 = keys->__get(_g6);
HXDLIN( 455)						_g6 = (_g6 + 1);
HXDLIN( 455)						action6->addKey(key6,state6);
            					}
            				}
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action7 = this->_rightP;
HXDLIN( 455)					int state7 = 2;
HXDLIN( 455)					int _g7 = 0;
HXDLIN( 455)					while((_g7 < keys->length)){
HXDLIN( 455)						int key7 = keys->__get(_g7);
HXDLIN( 455)						_g7 = (_g7 + 1);
HXDLIN( 455)						action7->addKey(key7,state7);
            					}
            				}
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action8 = this->_rightR;
HXDLIN( 455)					int state8 = -1;
HXDLIN( 455)					int _g8 = 0;
HXDLIN( 455)					while((_g8 < keys->length)){
HXDLIN( 455)						int key8 = keys->__get(_g8);
HXDLIN( 455)						_g8 = (_g8 + 1);
HXDLIN( 455)						action8->addKey(key8,state8);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action9 = this->_down;
HXDLIN( 455)					int state9 = 1;
HXDLIN( 455)					int _g9 = 0;
HXDLIN( 455)					while((_g9 < keys->length)){
HXDLIN( 455)						int key9 = keys->__get(_g9);
HXDLIN( 455)						_g9 = (_g9 + 1);
HXDLIN( 455)						action9->addKey(key9,state9);
            					}
            				}
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action10 = this->_downP;
HXDLIN( 455)					int state10 = 2;
HXDLIN( 455)					int _g10 = 0;
HXDLIN( 455)					while((_g10 < keys->length)){
HXDLIN( 455)						int key10 = keys->__get(_g10);
HXDLIN( 455)						_g10 = (_g10 + 1);
HXDLIN( 455)						action10->addKey(key10,state10);
            					}
            				}
HXDLIN( 455)				{
HXDLIN( 455)					 ::flixel::input::actions::FlxActionDigital action11 = this->_downR;
HXDLIN( 455)					int state11 = -1;
HXDLIN( 455)					int _g11 = 0;
HXDLIN( 455)					while((_g11 < keys->length)){
HXDLIN( 455)						int key11 = keys->__get(_g11);
HXDLIN( 455)						_g11 = (_g11 + 1);
HXDLIN( 455)						action11->addKey(key11,state11);
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXDLIN( 455)				 ::flixel::input::actions::FlxActionDigital action12 = this->_reset;
HXDLIN( 455)				int state12 = 2;
HXDLIN( 455)				int _g12 = 0;
HXDLIN( 455)				while((_g12 < keys->length)){
HXDLIN( 455)					int key12 = keys->__get(_g12);
HXDLIN( 455)					_g12 = (_g12 + 1);
HXDLIN( 455)					action12->addKey(key12,state12);
            				}
            			}
            			break;
            			case (int)5: {
HXDLIN( 455)				 ::flixel::input::actions::FlxActionDigital action13 = this->_accept;
HXDLIN( 455)				int state13 = 2;
HXDLIN( 455)				int _g13 = 0;
HXDLIN( 455)				while((_g13 < keys->length)){
HXDLIN( 455)					int key13 = keys->__get(_g13);
HXDLIN( 455)					_g13 = (_g13 + 1);
HXDLIN( 455)					action13->addKey(key13,state13);
            				}
            			}
            			break;
            			case (int)6: {
HXDLIN( 455)				 ::flixel::input::actions::FlxActionDigital action14 = this->_back;
HXDLIN( 455)				int state14 = 2;
HXDLIN( 455)				int _g14 = 0;
HXDLIN( 455)				while((_g14 < keys->length)){
HXDLIN( 455)					int key14 = keys->__get(_g14);
HXDLIN( 455)					_g14 = (_g14 + 1);
HXDLIN( 455)					action14->addKey(key14,state14);
            				}
            			}
            			break;
            			case (int)7: {
HXDLIN( 455)				 ::flixel::input::actions::FlxActionDigital action15 = this->_pause;
HXDLIN( 455)				int state15 = 2;
HXDLIN( 455)				int _g15 = 0;
HXDLIN( 455)				while((_g15 < keys->length)){
HXDLIN( 455)					int key15 = keys->__get(_g15);
HXDLIN( 455)					_g15 = (_g15 + 1);
HXDLIN( 455)					action15->addKey(key15,state15);
            				}
            			}
            			break;
            			case (int)8: {
HXDLIN( 455)				 ::flixel::input::actions::FlxActionDigital action16 = this->_cheat;
HXDLIN( 455)				int state16 = 2;
HXDLIN( 455)				int _g16 = 0;
HXDLIN( 455)				while((_g16 < keys->length)){
HXDLIN( 455)					int key16 = keys->__get(_g16);
HXDLIN( 455)					_g16 = (_g16 + 1);
HXDLIN( 455)					action16->addKey(key16,state16);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,bindKeys,(void))

void Controls_obj::unbindKeys( ::Control control,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_468_unbindKeys)
HXDLIN( 468)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 468)				::Controls_obj::removeKeys(this->_up,keys);
HXDLIN( 468)				::Controls_obj::removeKeys(this->_upP,keys);
HXDLIN( 468)				::Controls_obj::removeKeys(this->_upR,keys);
            			}
            			break;
            			case (int)1: {
HXDLIN( 468)				::Controls_obj::removeKeys(this->_left,keys);
HXDLIN( 468)				::Controls_obj::removeKeys(this->_leftP,keys);
HXDLIN( 468)				::Controls_obj::removeKeys(this->_leftR,keys);
            			}
            			break;
            			case (int)2: {
HXDLIN( 468)				::Controls_obj::removeKeys(this->_right,keys);
HXDLIN( 468)				::Controls_obj::removeKeys(this->_rightP,keys);
HXDLIN( 468)				::Controls_obj::removeKeys(this->_rightR,keys);
            			}
            			break;
            			case (int)3: {
HXDLIN( 468)				::Controls_obj::removeKeys(this->_down,keys);
HXDLIN( 468)				::Controls_obj::removeKeys(this->_downP,keys);
HXDLIN( 468)				::Controls_obj::removeKeys(this->_downR,keys);
            			}
            			break;
            			case (int)4: {
HXDLIN( 468)				::Controls_obj::removeKeys(this->_reset,keys);
            			}
            			break;
            			case (int)5: {
HXDLIN( 468)				::Controls_obj::removeKeys(this->_accept,keys);
            			}
            			break;
            			case (int)6: {
HXDLIN( 468)				::Controls_obj::removeKeys(this->_back,keys);
            			}
            			break;
            			case (int)7: {
HXDLIN( 468)				::Controls_obj::removeKeys(this->_pause,keys);
            			}
            			break;
            			case (int)8: {
HXDLIN( 468)				::Controls_obj::removeKeys(this->_cheat,keys);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,unbindKeys,(void))

void Controls_obj::setKeyboardScheme( ::KeyboardScheme scheme,::hx::Null< bool >  __o_reset){
            		bool reset = __o_reset.Default(true);
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_492_setKeyboardScheme)
HXLINE( 493)		if (reset) {
HXLINE( 494)			this->removeKeyboard();
            		}
HXLINE( 496)		this->keyboardScheme = scheme;
HXLINE( 499)		switch((int)(scheme->_hx_getIndex())){
            			case (int)0: {
HXLINE( 502)				{
HXLINE( 502)					::Array< int > keys = ::Array_obj< int >::fromData( _hx_array_data_116e4296_443,2);
HXDLIN( 502)					switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 502)								int state = 1;
HXDLIN( 502)								int _g = 0;
HXDLIN( 502)								while((_g < keys->length)){
HXLINE( 502)									int key = keys->__get(_g);
HXDLIN( 502)									_g = (_g + 1);
HXDLIN( 502)									action->addKey(key,state);
            								}
            							}
HXDLIN( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 502)								int state1 = 2;
HXDLIN( 502)								int _g1 = 0;
HXDLIN( 502)								while((_g1 < keys->length)){
HXLINE( 502)									int key1 = keys->__get(_g1);
HXDLIN( 502)									_g1 = (_g1 + 1);
HXDLIN( 502)									action1->addKey(key1,state1);
            								}
            							}
HXDLIN( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 502)								int state2 = -1;
HXDLIN( 502)								int _g2 = 0;
HXDLIN( 502)								while((_g2 < keys->length)){
HXLINE( 502)									int key2 = keys->__get(_g2);
HXDLIN( 502)									_g2 = (_g2 + 1);
HXDLIN( 502)									action2->addKey(key2,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action3 = this->_left;
HXDLIN( 502)								int state3 = 1;
HXDLIN( 502)								int _g3 = 0;
HXDLIN( 502)								while((_g3 < keys->length)){
HXLINE( 502)									int key3 = keys->__get(_g3);
HXDLIN( 502)									_g3 = (_g3 + 1);
HXDLIN( 502)									action3->addKey(key3,state3);
            								}
            							}
HXDLIN( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action4 = this->_leftP;
HXDLIN( 502)								int state4 = 2;
HXDLIN( 502)								int _g4 = 0;
HXDLIN( 502)								while((_g4 < keys->length)){
HXLINE( 502)									int key4 = keys->__get(_g4);
HXDLIN( 502)									_g4 = (_g4 + 1);
HXDLIN( 502)									action4->addKey(key4,state4);
            								}
            							}
HXDLIN( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action5 = this->_leftR;
HXDLIN( 502)								int state5 = -1;
HXDLIN( 502)								int _g5 = 0;
HXDLIN( 502)								while((_g5 < keys->length)){
HXLINE( 502)									int key5 = keys->__get(_g5);
HXDLIN( 502)									_g5 = (_g5 + 1);
HXDLIN( 502)									action5->addKey(key5,state5);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action6 = this->_right;
HXDLIN( 502)								int state6 = 1;
HXDLIN( 502)								int _g6 = 0;
HXDLIN( 502)								while((_g6 < keys->length)){
HXLINE( 502)									int key6 = keys->__get(_g6);
HXDLIN( 502)									_g6 = (_g6 + 1);
HXDLIN( 502)									action6->addKey(key6,state6);
            								}
            							}
HXDLIN( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action7 = this->_rightP;
HXDLIN( 502)								int state7 = 2;
HXDLIN( 502)								int _g7 = 0;
HXDLIN( 502)								while((_g7 < keys->length)){
HXLINE( 502)									int key7 = keys->__get(_g7);
HXDLIN( 502)									_g7 = (_g7 + 1);
HXDLIN( 502)									action7->addKey(key7,state7);
            								}
            							}
HXDLIN( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action8 = this->_rightR;
HXDLIN( 502)								int state8 = -1;
HXDLIN( 502)								int _g8 = 0;
HXDLIN( 502)								while((_g8 < keys->length)){
HXLINE( 502)									int key8 = keys->__get(_g8);
HXDLIN( 502)									_g8 = (_g8 + 1);
HXDLIN( 502)									action8->addKey(key8,state8);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action9 = this->_down;
HXDLIN( 502)								int state9 = 1;
HXDLIN( 502)								int _g9 = 0;
HXDLIN( 502)								while((_g9 < keys->length)){
HXLINE( 502)									int key9 = keys->__get(_g9);
HXDLIN( 502)									_g9 = (_g9 + 1);
HXDLIN( 502)									action9->addKey(key9,state9);
            								}
            							}
HXDLIN( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action10 = this->_downP;
HXDLIN( 502)								int state10 = 2;
HXDLIN( 502)								int _g10 = 0;
HXDLIN( 502)								while((_g10 < keys->length)){
HXLINE( 502)									int key10 = keys->__get(_g10);
HXDLIN( 502)									_g10 = (_g10 + 1);
HXDLIN( 502)									action10->addKey(key10,state10);
            								}
            							}
HXDLIN( 502)							{
HXLINE( 502)								 ::flixel::input::actions::FlxActionDigital action11 = this->_downR;
HXDLIN( 502)								int state11 = -1;
HXDLIN( 502)								int _g11 = 0;
HXDLIN( 502)								while((_g11 < keys->length)){
HXLINE( 502)									int key11 = keys->__get(_g11);
HXDLIN( 502)									_g11 = (_g11 + 1);
HXDLIN( 502)									action11->addKey(key11,state11);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 502)							 ::flixel::input::actions::FlxActionDigital action12 = this->_reset;
HXDLIN( 502)							int state12 = 2;
HXDLIN( 502)							int _g12 = 0;
HXDLIN( 502)							while((_g12 < keys->length)){
HXLINE( 502)								int key12 = keys->__get(_g12);
HXDLIN( 502)								_g12 = (_g12 + 1);
HXDLIN( 502)								action12->addKey(key12,state12);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 502)							 ::flixel::input::actions::FlxActionDigital action13 = this->_accept;
HXDLIN( 502)							int state13 = 2;
HXDLIN( 502)							int _g13 = 0;
HXDLIN( 502)							while((_g13 < keys->length)){
HXLINE( 502)								int key13 = keys->__get(_g13);
HXDLIN( 502)								_g13 = (_g13 + 1);
HXDLIN( 502)								action13->addKey(key13,state13);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 502)							 ::flixel::input::actions::FlxActionDigital action14 = this->_back;
HXDLIN( 502)							int state14 = 2;
HXDLIN( 502)							int _g14 = 0;
HXDLIN( 502)							while((_g14 < keys->length)){
HXLINE( 502)								int key14 = keys->__get(_g14);
HXDLIN( 502)								_g14 = (_g14 + 1);
HXDLIN( 502)								action14->addKey(key14,state14);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 502)							 ::flixel::input::actions::FlxActionDigital action15 = this->_pause;
HXDLIN( 502)							int state15 = 2;
HXDLIN( 502)							int _g15 = 0;
HXDLIN( 502)							while((_g15 < keys->length)){
HXLINE( 502)								int key15 = keys->__get(_g15);
HXDLIN( 502)								_g15 = (_g15 + 1);
HXDLIN( 502)								action15->addKey(key15,state15);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 502)							 ::flixel::input::actions::FlxActionDigital action16 = this->_cheat;
HXDLIN( 502)							int state16 = 2;
HXDLIN( 502)							int _g16 = 0;
HXDLIN( 502)							while((_g16 < keys->length)){
HXLINE( 502)								int key16 = keys->__get(_g16);
HXDLIN( 502)								_g16 = (_g16 + 1);
HXDLIN( 502)								action16->addKey(key16,state16);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 503)				{
HXLINE( 503)					::Array< int > keys1 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_444,2);
HXDLIN( 503)					switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action17 = this->_up;
HXDLIN( 503)								int state17 = 1;
HXDLIN( 503)								int _g17 = 0;
HXDLIN( 503)								while((_g17 < keys1->length)){
HXLINE( 503)									int key17 = keys1->__get(_g17);
HXDLIN( 503)									_g17 = (_g17 + 1);
HXDLIN( 503)									action17->addKey(key17,state17);
            								}
            							}
HXDLIN( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action18 = this->_upP;
HXDLIN( 503)								int state18 = 2;
HXDLIN( 503)								int _g18 = 0;
HXDLIN( 503)								while((_g18 < keys1->length)){
HXLINE( 503)									int key18 = keys1->__get(_g18);
HXDLIN( 503)									_g18 = (_g18 + 1);
HXDLIN( 503)									action18->addKey(key18,state18);
            								}
            							}
HXDLIN( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action19 = this->_upR;
HXDLIN( 503)								int state19 = -1;
HXDLIN( 503)								int _g19 = 0;
HXDLIN( 503)								while((_g19 < keys1->length)){
HXLINE( 503)									int key19 = keys1->__get(_g19);
HXDLIN( 503)									_g19 = (_g19 + 1);
HXDLIN( 503)									action19->addKey(key19,state19);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action20 = this->_left;
HXDLIN( 503)								int state20 = 1;
HXDLIN( 503)								int _g20 = 0;
HXDLIN( 503)								while((_g20 < keys1->length)){
HXLINE( 503)									int key20 = keys1->__get(_g20);
HXDLIN( 503)									_g20 = (_g20 + 1);
HXDLIN( 503)									action20->addKey(key20,state20);
            								}
            							}
HXDLIN( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action21 = this->_leftP;
HXDLIN( 503)								int state21 = 2;
HXDLIN( 503)								int _g21 = 0;
HXDLIN( 503)								while((_g21 < keys1->length)){
HXLINE( 503)									int key21 = keys1->__get(_g21);
HXDLIN( 503)									_g21 = (_g21 + 1);
HXDLIN( 503)									action21->addKey(key21,state21);
            								}
            							}
HXDLIN( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action22 = this->_leftR;
HXDLIN( 503)								int state22 = -1;
HXDLIN( 503)								int _g22 = 0;
HXDLIN( 503)								while((_g22 < keys1->length)){
HXLINE( 503)									int key22 = keys1->__get(_g22);
HXDLIN( 503)									_g22 = (_g22 + 1);
HXDLIN( 503)									action22->addKey(key22,state22);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action23 = this->_right;
HXDLIN( 503)								int state23 = 1;
HXDLIN( 503)								int _g23 = 0;
HXDLIN( 503)								while((_g23 < keys1->length)){
HXLINE( 503)									int key23 = keys1->__get(_g23);
HXDLIN( 503)									_g23 = (_g23 + 1);
HXDLIN( 503)									action23->addKey(key23,state23);
            								}
            							}
HXDLIN( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action24 = this->_rightP;
HXDLIN( 503)								int state24 = 2;
HXDLIN( 503)								int _g24 = 0;
HXDLIN( 503)								while((_g24 < keys1->length)){
HXLINE( 503)									int key24 = keys1->__get(_g24);
HXDLIN( 503)									_g24 = (_g24 + 1);
HXDLIN( 503)									action24->addKey(key24,state24);
            								}
            							}
HXDLIN( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action25 = this->_rightR;
HXDLIN( 503)								int state25 = -1;
HXDLIN( 503)								int _g25 = 0;
HXDLIN( 503)								while((_g25 < keys1->length)){
HXLINE( 503)									int key25 = keys1->__get(_g25);
HXDLIN( 503)									_g25 = (_g25 + 1);
HXDLIN( 503)									action25->addKey(key25,state25);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action26 = this->_down;
HXDLIN( 503)								int state26 = 1;
HXDLIN( 503)								int _g26 = 0;
HXDLIN( 503)								while((_g26 < keys1->length)){
HXLINE( 503)									int key26 = keys1->__get(_g26);
HXDLIN( 503)									_g26 = (_g26 + 1);
HXDLIN( 503)									action26->addKey(key26,state26);
            								}
            							}
HXDLIN( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action27 = this->_downP;
HXDLIN( 503)								int state27 = 2;
HXDLIN( 503)								int _g27 = 0;
HXDLIN( 503)								while((_g27 < keys1->length)){
HXLINE( 503)									int key27 = keys1->__get(_g27);
HXDLIN( 503)									_g27 = (_g27 + 1);
HXDLIN( 503)									action27->addKey(key27,state27);
            								}
            							}
HXDLIN( 503)							{
HXLINE( 503)								 ::flixel::input::actions::FlxActionDigital action28 = this->_downR;
HXDLIN( 503)								int state28 = -1;
HXDLIN( 503)								int _g28 = 0;
HXDLIN( 503)								while((_g28 < keys1->length)){
HXLINE( 503)									int key28 = keys1->__get(_g28);
HXDLIN( 503)									_g28 = (_g28 + 1);
HXDLIN( 503)									action28->addKey(key28,state28);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 503)							 ::flixel::input::actions::FlxActionDigital action29 = this->_reset;
HXDLIN( 503)							int state29 = 2;
HXDLIN( 503)							int _g29 = 0;
HXDLIN( 503)							while((_g29 < keys1->length)){
HXLINE( 503)								int key29 = keys1->__get(_g29);
HXDLIN( 503)								_g29 = (_g29 + 1);
HXDLIN( 503)								action29->addKey(key29,state29);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 503)							 ::flixel::input::actions::FlxActionDigital action30 = this->_accept;
HXDLIN( 503)							int state30 = 2;
HXDLIN( 503)							int _g30 = 0;
HXDLIN( 503)							while((_g30 < keys1->length)){
HXLINE( 503)								int key30 = keys1->__get(_g30);
HXDLIN( 503)								_g30 = (_g30 + 1);
HXDLIN( 503)								action30->addKey(key30,state30);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 503)							 ::flixel::input::actions::FlxActionDigital action31 = this->_back;
HXDLIN( 503)							int state31 = 2;
HXDLIN( 503)							int _g31 = 0;
HXDLIN( 503)							while((_g31 < keys1->length)){
HXLINE( 503)								int key31 = keys1->__get(_g31);
HXDLIN( 503)								_g31 = (_g31 + 1);
HXDLIN( 503)								action31->addKey(key31,state31);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 503)							 ::flixel::input::actions::FlxActionDigital action32 = this->_pause;
HXDLIN( 503)							int state32 = 2;
HXDLIN( 503)							int _g32 = 0;
HXDLIN( 503)							while((_g32 < keys1->length)){
HXLINE( 503)								int key32 = keys1->__get(_g32);
HXDLIN( 503)								_g32 = (_g32 + 1);
HXDLIN( 503)								action32->addKey(key32,state32);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 503)							 ::flixel::input::actions::FlxActionDigital action33 = this->_cheat;
HXDLIN( 503)							int state33 = 2;
HXDLIN( 503)							int _g33 = 0;
HXDLIN( 503)							while((_g33 < keys1->length)){
HXLINE( 503)								int key33 = keys1->__get(_g33);
HXDLIN( 503)								_g33 = (_g33 + 1);
HXDLIN( 503)								action33->addKey(key33,state33);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 504)				{
HXLINE( 504)					::Array< int > keys2 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_445,2);
HXDLIN( 504)					switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action34 = this->_up;
HXDLIN( 504)								int state34 = 1;
HXDLIN( 504)								int _g34 = 0;
HXDLIN( 504)								while((_g34 < keys2->length)){
HXLINE( 504)									int key34 = keys2->__get(_g34);
HXDLIN( 504)									_g34 = (_g34 + 1);
HXDLIN( 504)									action34->addKey(key34,state34);
            								}
            							}
HXDLIN( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action35 = this->_upP;
HXDLIN( 504)								int state35 = 2;
HXDLIN( 504)								int _g35 = 0;
HXDLIN( 504)								while((_g35 < keys2->length)){
HXLINE( 504)									int key35 = keys2->__get(_g35);
HXDLIN( 504)									_g35 = (_g35 + 1);
HXDLIN( 504)									action35->addKey(key35,state35);
            								}
            							}
HXDLIN( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action36 = this->_upR;
HXDLIN( 504)								int state36 = -1;
HXDLIN( 504)								int _g36 = 0;
HXDLIN( 504)								while((_g36 < keys2->length)){
HXLINE( 504)									int key36 = keys2->__get(_g36);
HXDLIN( 504)									_g36 = (_g36 + 1);
HXDLIN( 504)									action36->addKey(key36,state36);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action37 = this->_left;
HXDLIN( 504)								int state37 = 1;
HXDLIN( 504)								int _g37 = 0;
HXDLIN( 504)								while((_g37 < keys2->length)){
HXLINE( 504)									int key37 = keys2->__get(_g37);
HXDLIN( 504)									_g37 = (_g37 + 1);
HXDLIN( 504)									action37->addKey(key37,state37);
            								}
            							}
HXDLIN( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action38 = this->_leftP;
HXDLIN( 504)								int state38 = 2;
HXDLIN( 504)								int _g38 = 0;
HXDLIN( 504)								while((_g38 < keys2->length)){
HXLINE( 504)									int key38 = keys2->__get(_g38);
HXDLIN( 504)									_g38 = (_g38 + 1);
HXDLIN( 504)									action38->addKey(key38,state38);
            								}
            							}
HXDLIN( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action39 = this->_leftR;
HXDLIN( 504)								int state39 = -1;
HXDLIN( 504)								int _g39 = 0;
HXDLIN( 504)								while((_g39 < keys2->length)){
HXLINE( 504)									int key39 = keys2->__get(_g39);
HXDLIN( 504)									_g39 = (_g39 + 1);
HXDLIN( 504)									action39->addKey(key39,state39);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action40 = this->_right;
HXDLIN( 504)								int state40 = 1;
HXDLIN( 504)								int _g40 = 0;
HXDLIN( 504)								while((_g40 < keys2->length)){
HXLINE( 504)									int key40 = keys2->__get(_g40);
HXDLIN( 504)									_g40 = (_g40 + 1);
HXDLIN( 504)									action40->addKey(key40,state40);
            								}
            							}
HXDLIN( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action41 = this->_rightP;
HXDLIN( 504)								int state41 = 2;
HXDLIN( 504)								int _g41 = 0;
HXDLIN( 504)								while((_g41 < keys2->length)){
HXLINE( 504)									int key41 = keys2->__get(_g41);
HXDLIN( 504)									_g41 = (_g41 + 1);
HXDLIN( 504)									action41->addKey(key41,state41);
            								}
            							}
HXDLIN( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action42 = this->_rightR;
HXDLIN( 504)								int state42 = -1;
HXDLIN( 504)								int _g42 = 0;
HXDLIN( 504)								while((_g42 < keys2->length)){
HXLINE( 504)									int key42 = keys2->__get(_g42);
HXDLIN( 504)									_g42 = (_g42 + 1);
HXDLIN( 504)									action42->addKey(key42,state42);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action43 = this->_down;
HXDLIN( 504)								int state43 = 1;
HXDLIN( 504)								int _g43 = 0;
HXDLIN( 504)								while((_g43 < keys2->length)){
HXLINE( 504)									int key43 = keys2->__get(_g43);
HXDLIN( 504)									_g43 = (_g43 + 1);
HXDLIN( 504)									action43->addKey(key43,state43);
            								}
            							}
HXDLIN( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action44 = this->_downP;
HXDLIN( 504)								int state44 = 2;
HXDLIN( 504)								int _g44 = 0;
HXDLIN( 504)								while((_g44 < keys2->length)){
HXLINE( 504)									int key44 = keys2->__get(_g44);
HXDLIN( 504)									_g44 = (_g44 + 1);
HXDLIN( 504)									action44->addKey(key44,state44);
            								}
            							}
HXDLIN( 504)							{
HXLINE( 504)								 ::flixel::input::actions::FlxActionDigital action45 = this->_downR;
HXDLIN( 504)								int state45 = -1;
HXDLIN( 504)								int _g45 = 0;
HXDLIN( 504)								while((_g45 < keys2->length)){
HXLINE( 504)									int key45 = keys2->__get(_g45);
HXDLIN( 504)									_g45 = (_g45 + 1);
HXDLIN( 504)									action45->addKey(key45,state45);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 504)							 ::flixel::input::actions::FlxActionDigital action46 = this->_reset;
HXDLIN( 504)							int state46 = 2;
HXDLIN( 504)							int _g46 = 0;
HXDLIN( 504)							while((_g46 < keys2->length)){
HXLINE( 504)								int key46 = keys2->__get(_g46);
HXDLIN( 504)								_g46 = (_g46 + 1);
HXDLIN( 504)								action46->addKey(key46,state46);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 504)							 ::flixel::input::actions::FlxActionDigital action47 = this->_accept;
HXDLIN( 504)							int state47 = 2;
HXDLIN( 504)							int _g47 = 0;
HXDLIN( 504)							while((_g47 < keys2->length)){
HXLINE( 504)								int key47 = keys2->__get(_g47);
HXDLIN( 504)								_g47 = (_g47 + 1);
HXDLIN( 504)								action47->addKey(key47,state47);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 504)							 ::flixel::input::actions::FlxActionDigital action48 = this->_back;
HXDLIN( 504)							int state48 = 2;
HXDLIN( 504)							int _g48 = 0;
HXDLIN( 504)							while((_g48 < keys2->length)){
HXLINE( 504)								int key48 = keys2->__get(_g48);
HXDLIN( 504)								_g48 = (_g48 + 1);
HXDLIN( 504)								action48->addKey(key48,state48);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 504)							 ::flixel::input::actions::FlxActionDigital action49 = this->_pause;
HXDLIN( 504)							int state49 = 2;
HXDLIN( 504)							int _g49 = 0;
HXDLIN( 504)							while((_g49 < keys2->length)){
HXLINE( 504)								int key49 = keys2->__get(_g49);
HXDLIN( 504)								_g49 = (_g49 + 1);
HXDLIN( 504)								action49->addKey(key49,state49);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 504)							 ::flixel::input::actions::FlxActionDigital action50 = this->_cheat;
HXDLIN( 504)							int state50 = 2;
HXDLIN( 504)							int _g50 = 0;
HXDLIN( 504)							while((_g50 < keys2->length)){
HXLINE( 504)								int key50 = keys2->__get(_g50);
HXDLIN( 504)								_g50 = (_g50 + 1);
HXDLIN( 504)								action50->addKey(key50,state50);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 505)				{
HXLINE( 505)					::Array< int > keys3 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_446,2);
HXDLIN( 505)					switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action51 = this->_up;
HXDLIN( 505)								int state51 = 1;
HXDLIN( 505)								int _g51 = 0;
HXDLIN( 505)								while((_g51 < keys3->length)){
HXLINE( 505)									int key51 = keys3->__get(_g51);
HXDLIN( 505)									_g51 = (_g51 + 1);
HXDLIN( 505)									action51->addKey(key51,state51);
            								}
            							}
HXDLIN( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action52 = this->_upP;
HXDLIN( 505)								int state52 = 2;
HXDLIN( 505)								int _g52 = 0;
HXDLIN( 505)								while((_g52 < keys3->length)){
HXLINE( 505)									int key52 = keys3->__get(_g52);
HXDLIN( 505)									_g52 = (_g52 + 1);
HXDLIN( 505)									action52->addKey(key52,state52);
            								}
            							}
HXDLIN( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action53 = this->_upR;
HXDLIN( 505)								int state53 = -1;
HXDLIN( 505)								int _g53 = 0;
HXDLIN( 505)								while((_g53 < keys3->length)){
HXLINE( 505)									int key53 = keys3->__get(_g53);
HXDLIN( 505)									_g53 = (_g53 + 1);
HXDLIN( 505)									action53->addKey(key53,state53);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action54 = this->_left;
HXDLIN( 505)								int state54 = 1;
HXDLIN( 505)								int _g54 = 0;
HXDLIN( 505)								while((_g54 < keys3->length)){
HXLINE( 505)									int key54 = keys3->__get(_g54);
HXDLIN( 505)									_g54 = (_g54 + 1);
HXDLIN( 505)									action54->addKey(key54,state54);
            								}
            							}
HXDLIN( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action55 = this->_leftP;
HXDLIN( 505)								int state55 = 2;
HXDLIN( 505)								int _g55 = 0;
HXDLIN( 505)								while((_g55 < keys3->length)){
HXLINE( 505)									int key55 = keys3->__get(_g55);
HXDLIN( 505)									_g55 = (_g55 + 1);
HXDLIN( 505)									action55->addKey(key55,state55);
            								}
            							}
HXDLIN( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action56 = this->_leftR;
HXDLIN( 505)								int state56 = -1;
HXDLIN( 505)								int _g56 = 0;
HXDLIN( 505)								while((_g56 < keys3->length)){
HXLINE( 505)									int key56 = keys3->__get(_g56);
HXDLIN( 505)									_g56 = (_g56 + 1);
HXDLIN( 505)									action56->addKey(key56,state56);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action57 = this->_right;
HXDLIN( 505)								int state57 = 1;
HXDLIN( 505)								int _g57 = 0;
HXDLIN( 505)								while((_g57 < keys3->length)){
HXLINE( 505)									int key57 = keys3->__get(_g57);
HXDLIN( 505)									_g57 = (_g57 + 1);
HXDLIN( 505)									action57->addKey(key57,state57);
            								}
            							}
HXDLIN( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action58 = this->_rightP;
HXDLIN( 505)								int state58 = 2;
HXDLIN( 505)								int _g58 = 0;
HXDLIN( 505)								while((_g58 < keys3->length)){
HXLINE( 505)									int key58 = keys3->__get(_g58);
HXDLIN( 505)									_g58 = (_g58 + 1);
HXDLIN( 505)									action58->addKey(key58,state58);
            								}
            							}
HXDLIN( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action59 = this->_rightR;
HXDLIN( 505)								int state59 = -1;
HXDLIN( 505)								int _g59 = 0;
HXDLIN( 505)								while((_g59 < keys3->length)){
HXLINE( 505)									int key59 = keys3->__get(_g59);
HXDLIN( 505)									_g59 = (_g59 + 1);
HXDLIN( 505)									action59->addKey(key59,state59);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action60 = this->_down;
HXDLIN( 505)								int state60 = 1;
HXDLIN( 505)								int _g60 = 0;
HXDLIN( 505)								while((_g60 < keys3->length)){
HXLINE( 505)									int key60 = keys3->__get(_g60);
HXDLIN( 505)									_g60 = (_g60 + 1);
HXDLIN( 505)									action60->addKey(key60,state60);
            								}
            							}
HXDLIN( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action61 = this->_downP;
HXDLIN( 505)								int state61 = 2;
HXDLIN( 505)								int _g61 = 0;
HXDLIN( 505)								while((_g61 < keys3->length)){
HXLINE( 505)									int key61 = keys3->__get(_g61);
HXDLIN( 505)									_g61 = (_g61 + 1);
HXDLIN( 505)									action61->addKey(key61,state61);
            								}
            							}
HXDLIN( 505)							{
HXLINE( 505)								 ::flixel::input::actions::FlxActionDigital action62 = this->_downR;
HXDLIN( 505)								int state62 = -1;
HXDLIN( 505)								int _g62 = 0;
HXDLIN( 505)								while((_g62 < keys3->length)){
HXLINE( 505)									int key62 = keys3->__get(_g62);
HXDLIN( 505)									_g62 = (_g62 + 1);
HXDLIN( 505)									action62->addKey(key62,state62);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 505)							 ::flixel::input::actions::FlxActionDigital action63 = this->_reset;
HXDLIN( 505)							int state63 = 2;
HXDLIN( 505)							int _g63 = 0;
HXDLIN( 505)							while((_g63 < keys3->length)){
HXLINE( 505)								int key63 = keys3->__get(_g63);
HXDLIN( 505)								_g63 = (_g63 + 1);
HXDLIN( 505)								action63->addKey(key63,state63);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 505)							 ::flixel::input::actions::FlxActionDigital action64 = this->_accept;
HXDLIN( 505)							int state64 = 2;
HXDLIN( 505)							int _g64 = 0;
HXDLIN( 505)							while((_g64 < keys3->length)){
HXLINE( 505)								int key64 = keys3->__get(_g64);
HXDLIN( 505)								_g64 = (_g64 + 1);
HXDLIN( 505)								action64->addKey(key64,state64);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 505)							 ::flixel::input::actions::FlxActionDigital action65 = this->_back;
HXDLIN( 505)							int state65 = 2;
HXDLIN( 505)							int _g65 = 0;
HXDLIN( 505)							while((_g65 < keys3->length)){
HXLINE( 505)								int key65 = keys3->__get(_g65);
HXDLIN( 505)								_g65 = (_g65 + 1);
HXDLIN( 505)								action65->addKey(key65,state65);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 505)							 ::flixel::input::actions::FlxActionDigital action66 = this->_pause;
HXDLIN( 505)							int state66 = 2;
HXDLIN( 505)							int _g66 = 0;
HXDLIN( 505)							while((_g66 < keys3->length)){
HXLINE( 505)								int key66 = keys3->__get(_g66);
HXDLIN( 505)								_g66 = (_g66 + 1);
HXDLIN( 505)								action66->addKey(key66,state66);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 505)							 ::flixel::input::actions::FlxActionDigital action67 = this->_cheat;
HXDLIN( 505)							int state67 = 2;
HXDLIN( 505)							int _g67 = 0;
HXDLIN( 505)							while((_g67 < keys3->length)){
HXLINE( 505)								int key67 = keys3->__get(_g67);
HXDLIN( 505)								_g67 = (_g67 + 1);
HXDLIN( 505)								action67->addKey(key67,state67);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 506)				{
HXLINE( 506)					::Array< int > keys4 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_447,2);
HXDLIN( 506)					switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action68 = this->_up;
HXDLIN( 506)								int state68 = 1;
HXDLIN( 506)								int _g68 = 0;
HXDLIN( 506)								while((_g68 < keys4->length)){
HXLINE( 506)									int key68 = keys4->__get(_g68);
HXDLIN( 506)									_g68 = (_g68 + 1);
HXDLIN( 506)									action68->addKey(key68,state68);
            								}
            							}
HXDLIN( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action69 = this->_upP;
HXDLIN( 506)								int state69 = 2;
HXDLIN( 506)								int _g69 = 0;
HXDLIN( 506)								while((_g69 < keys4->length)){
HXLINE( 506)									int key69 = keys4->__get(_g69);
HXDLIN( 506)									_g69 = (_g69 + 1);
HXDLIN( 506)									action69->addKey(key69,state69);
            								}
            							}
HXDLIN( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action70 = this->_upR;
HXDLIN( 506)								int state70 = -1;
HXDLIN( 506)								int _g70 = 0;
HXDLIN( 506)								while((_g70 < keys4->length)){
HXLINE( 506)									int key70 = keys4->__get(_g70);
HXDLIN( 506)									_g70 = (_g70 + 1);
HXDLIN( 506)									action70->addKey(key70,state70);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action71 = this->_left;
HXDLIN( 506)								int state71 = 1;
HXDLIN( 506)								int _g71 = 0;
HXDLIN( 506)								while((_g71 < keys4->length)){
HXLINE( 506)									int key71 = keys4->__get(_g71);
HXDLIN( 506)									_g71 = (_g71 + 1);
HXDLIN( 506)									action71->addKey(key71,state71);
            								}
            							}
HXDLIN( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action72 = this->_leftP;
HXDLIN( 506)								int state72 = 2;
HXDLIN( 506)								int _g72 = 0;
HXDLIN( 506)								while((_g72 < keys4->length)){
HXLINE( 506)									int key72 = keys4->__get(_g72);
HXDLIN( 506)									_g72 = (_g72 + 1);
HXDLIN( 506)									action72->addKey(key72,state72);
            								}
            							}
HXDLIN( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action73 = this->_leftR;
HXDLIN( 506)								int state73 = -1;
HXDLIN( 506)								int _g73 = 0;
HXDLIN( 506)								while((_g73 < keys4->length)){
HXLINE( 506)									int key73 = keys4->__get(_g73);
HXDLIN( 506)									_g73 = (_g73 + 1);
HXDLIN( 506)									action73->addKey(key73,state73);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action74 = this->_right;
HXDLIN( 506)								int state74 = 1;
HXDLIN( 506)								int _g74 = 0;
HXDLIN( 506)								while((_g74 < keys4->length)){
HXLINE( 506)									int key74 = keys4->__get(_g74);
HXDLIN( 506)									_g74 = (_g74 + 1);
HXDLIN( 506)									action74->addKey(key74,state74);
            								}
            							}
HXDLIN( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action75 = this->_rightP;
HXDLIN( 506)								int state75 = 2;
HXDLIN( 506)								int _g75 = 0;
HXDLIN( 506)								while((_g75 < keys4->length)){
HXLINE( 506)									int key75 = keys4->__get(_g75);
HXDLIN( 506)									_g75 = (_g75 + 1);
HXDLIN( 506)									action75->addKey(key75,state75);
            								}
            							}
HXDLIN( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action76 = this->_rightR;
HXDLIN( 506)								int state76 = -1;
HXDLIN( 506)								int _g76 = 0;
HXDLIN( 506)								while((_g76 < keys4->length)){
HXLINE( 506)									int key76 = keys4->__get(_g76);
HXDLIN( 506)									_g76 = (_g76 + 1);
HXDLIN( 506)									action76->addKey(key76,state76);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action77 = this->_down;
HXDLIN( 506)								int state77 = 1;
HXDLIN( 506)								int _g77 = 0;
HXDLIN( 506)								while((_g77 < keys4->length)){
HXLINE( 506)									int key77 = keys4->__get(_g77);
HXDLIN( 506)									_g77 = (_g77 + 1);
HXDLIN( 506)									action77->addKey(key77,state77);
            								}
            							}
HXDLIN( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action78 = this->_downP;
HXDLIN( 506)								int state78 = 2;
HXDLIN( 506)								int _g78 = 0;
HXDLIN( 506)								while((_g78 < keys4->length)){
HXLINE( 506)									int key78 = keys4->__get(_g78);
HXDLIN( 506)									_g78 = (_g78 + 1);
HXDLIN( 506)									action78->addKey(key78,state78);
            								}
            							}
HXDLIN( 506)							{
HXLINE( 506)								 ::flixel::input::actions::FlxActionDigital action79 = this->_downR;
HXDLIN( 506)								int state79 = -1;
HXDLIN( 506)								int _g79 = 0;
HXDLIN( 506)								while((_g79 < keys4->length)){
HXLINE( 506)									int key79 = keys4->__get(_g79);
HXDLIN( 506)									_g79 = (_g79 + 1);
HXDLIN( 506)									action79->addKey(key79,state79);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 506)							 ::flixel::input::actions::FlxActionDigital action80 = this->_reset;
HXDLIN( 506)							int state80 = 2;
HXDLIN( 506)							int _g80 = 0;
HXDLIN( 506)							while((_g80 < keys4->length)){
HXLINE( 506)								int key80 = keys4->__get(_g80);
HXDLIN( 506)								_g80 = (_g80 + 1);
HXDLIN( 506)								action80->addKey(key80,state80);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 506)							 ::flixel::input::actions::FlxActionDigital action81 = this->_accept;
HXDLIN( 506)							int state81 = 2;
HXDLIN( 506)							int _g81 = 0;
HXDLIN( 506)							while((_g81 < keys4->length)){
HXLINE( 506)								int key81 = keys4->__get(_g81);
HXDLIN( 506)								_g81 = (_g81 + 1);
HXDLIN( 506)								action81->addKey(key81,state81);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 506)							 ::flixel::input::actions::FlxActionDigital action82 = this->_back;
HXDLIN( 506)							int state82 = 2;
HXDLIN( 506)							int _g82 = 0;
HXDLIN( 506)							while((_g82 < keys4->length)){
HXLINE( 506)								int key82 = keys4->__get(_g82);
HXDLIN( 506)								_g82 = (_g82 + 1);
HXDLIN( 506)								action82->addKey(key82,state82);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 506)							 ::flixel::input::actions::FlxActionDigital action83 = this->_pause;
HXDLIN( 506)							int state83 = 2;
HXDLIN( 506)							int _g83 = 0;
HXDLIN( 506)							while((_g83 < keys4->length)){
HXLINE( 506)								int key83 = keys4->__get(_g83);
HXDLIN( 506)								_g83 = (_g83 + 1);
HXDLIN( 506)								action83->addKey(key83,state83);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 506)							 ::flixel::input::actions::FlxActionDigital action84 = this->_cheat;
HXDLIN( 506)							int state84 = 2;
HXDLIN( 506)							int _g84 = 0;
HXDLIN( 506)							while((_g84 < keys4->length)){
HXLINE( 506)								int key84 = keys4->__get(_g84);
HXDLIN( 506)								_g84 = (_g84 + 1);
HXDLIN( 506)								action84->addKey(key84,state84);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 507)				{
HXLINE( 507)					::Array< int > keys5 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_448,2);
HXDLIN( 507)					switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action85 = this->_up;
HXDLIN( 507)								int state85 = 1;
HXDLIN( 507)								int _g85 = 0;
HXDLIN( 507)								while((_g85 < keys5->length)){
HXLINE( 507)									int key85 = keys5->__get(_g85);
HXDLIN( 507)									_g85 = (_g85 + 1);
HXDLIN( 507)									action85->addKey(key85,state85);
            								}
            							}
HXDLIN( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action86 = this->_upP;
HXDLIN( 507)								int state86 = 2;
HXDLIN( 507)								int _g86 = 0;
HXDLIN( 507)								while((_g86 < keys5->length)){
HXLINE( 507)									int key86 = keys5->__get(_g86);
HXDLIN( 507)									_g86 = (_g86 + 1);
HXDLIN( 507)									action86->addKey(key86,state86);
            								}
            							}
HXDLIN( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action87 = this->_upR;
HXDLIN( 507)								int state87 = -1;
HXDLIN( 507)								int _g87 = 0;
HXDLIN( 507)								while((_g87 < keys5->length)){
HXLINE( 507)									int key87 = keys5->__get(_g87);
HXDLIN( 507)									_g87 = (_g87 + 1);
HXDLIN( 507)									action87->addKey(key87,state87);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action88 = this->_left;
HXDLIN( 507)								int state88 = 1;
HXDLIN( 507)								int _g88 = 0;
HXDLIN( 507)								while((_g88 < keys5->length)){
HXLINE( 507)									int key88 = keys5->__get(_g88);
HXDLIN( 507)									_g88 = (_g88 + 1);
HXDLIN( 507)									action88->addKey(key88,state88);
            								}
            							}
HXDLIN( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action89 = this->_leftP;
HXDLIN( 507)								int state89 = 2;
HXDLIN( 507)								int _g89 = 0;
HXDLIN( 507)								while((_g89 < keys5->length)){
HXLINE( 507)									int key89 = keys5->__get(_g89);
HXDLIN( 507)									_g89 = (_g89 + 1);
HXDLIN( 507)									action89->addKey(key89,state89);
            								}
            							}
HXDLIN( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action90 = this->_leftR;
HXDLIN( 507)								int state90 = -1;
HXDLIN( 507)								int _g90 = 0;
HXDLIN( 507)								while((_g90 < keys5->length)){
HXLINE( 507)									int key90 = keys5->__get(_g90);
HXDLIN( 507)									_g90 = (_g90 + 1);
HXDLIN( 507)									action90->addKey(key90,state90);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action91 = this->_right;
HXDLIN( 507)								int state91 = 1;
HXDLIN( 507)								int _g91 = 0;
HXDLIN( 507)								while((_g91 < keys5->length)){
HXLINE( 507)									int key91 = keys5->__get(_g91);
HXDLIN( 507)									_g91 = (_g91 + 1);
HXDLIN( 507)									action91->addKey(key91,state91);
            								}
            							}
HXDLIN( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action92 = this->_rightP;
HXDLIN( 507)								int state92 = 2;
HXDLIN( 507)								int _g92 = 0;
HXDLIN( 507)								while((_g92 < keys5->length)){
HXLINE( 507)									int key92 = keys5->__get(_g92);
HXDLIN( 507)									_g92 = (_g92 + 1);
HXDLIN( 507)									action92->addKey(key92,state92);
            								}
            							}
HXDLIN( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action93 = this->_rightR;
HXDLIN( 507)								int state93 = -1;
HXDLIN( 507)								int _g93 = 0;
HXDLIN( 507)								while((_g93 < keys5->length)){
HXLINE( 507)									int key93 = keys5->__get(_g93);
HXDLIN( 507)									_g93 = (_g93 + 1);
HXDLIN( 507)									action93->addKey(key93,state93);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action94 = this->_down;
HXDLIN( 507)								int state94 = 1;
HXDLIN( 507)								int _g94 = 0;
HXDLIN( 507)								while((_g94 < keys5->length)){
HXLINE( 507)									int key94 = keys5->__get(_g94);
HXDLIN( 507)									_g94 = (_g94 + 1);
HXDLIN( 507)									action94->addKey(key94,state94);
            								}
            							}
HXDLIN( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action95 = this->_downP;
HXDLIN( 507)								int state95 = 2;
HXDLIN( 507)								int _g95 = 0;
HXDLIN( 507)								while((_g95 < keys5->length)){
HXLINE( 507)									int key95 = keys5->__get(_g95);
HXDLIN( 507)									_g95 = (_g95 + 1);
HXDLIN( 507)									action95->addKey(key95,state95);
            								}
            							}
HXDLIN( 507)							{
HXLINE( 507)								 ::flixel::input::actions::FlxActionDigital action96 = this->_downR;
HXDLIN( 507)								int state96 = -1;
HXDLIN( 507)								int _g96 = 0;
HXDLIN( 507)								while((_g96 < keys5->length)){
HXLINE( 507)									int key96 = keys5->__get(_g96);
HXDLIN( 507)									_g96 = (_g96 + 1);
HXDLIN( 507)									action96->addKey(key96,state96);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 507)							 ::flixel::input::actions::FlxActionDigital action97 = this->_reset;
HXDLIN( 507)							int state97 = 2;
HXDLIN( 507)							int _g97 = 0;
HXDLIN( 507)							while((_g97 < keys5->length)){
HXLINE( 507)								int key97 = keys5->__get(_g97);
HXDLIN( 507)								_g97 = (_g97 + 1);
HXDLIN( 507)								action97->addKey(key97,state97);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 507)							 ::flixel::input::actions::FlxActionDigital action98 = this->_accept;
HXDLIN( 507)							int state98 = 2;
HXDLIN( 507)							int _g98 = 0;
HXDLIN( 507)							while((_g98 < keys5->length)){
HXLINE( 507)								int key98 = keys5->__get(_g98);
HXDLIN( 507)								_g98 = (_g98 + 1);
HXDLIN( 507)								action98->addKey(key98,state98);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 507)							 ::flixel::input::actions::FlxActionDigital action99 = this->_back;
HXDLIN( 507)							int state99 = 2;
HXDLIN( 507)							int _g99 = 0;
HXDLIN( 507)							while((_g99 < keys5->length)){
HXLINE( 507)								int key99 = keys5->__get(_g99);
HXDLIN( 507)								_g99 = (_g99 + 1);
HXDLIN( 507)								action99->addKey(key99,state99);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 507)							 ::flixel::input::actions::FlxActionDigital action100 = this->_pause;
HXDLIN( 507)							int state100 = 2;
HXDLIN( 507)							int _g100 = 0;
HXDLIN( 507)							while((_g100 < keys5->length)){
HXLINE( 507)								int key100 = keys5->__get(_g100);
HXDLIN( 507)								_g100 = (_g100 + 1);
HXDLIN( 507)								action100->addKey(key100,state100);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 507)							 ::flixel::input::actions::FlxActionDigital action101 = this->_cheat;
HXDLIN( 507)							int state101 = 2;
HXDLIN( 507)							int _g101 = 0;
HXDLIN( 507)							while((_g101 < keys5->length)){
HXLINE( 507)								int key101 = keys5->__get(_g101);
HXDLIN( 507)								_g101 = (_g101 + 1);
HXDLIN( 507)								action101->addKey(key101,state101);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 508)				{
HXLINE( 508)					::Array< int > keys6 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_449,3);
HXDLIN( 508)					switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action102 = this->_up;
HXDLIN( 508)								int state102 = 1;
HXDLIN( 508)								int _g102 = 0;
HXDLIN( 508)								while((_g102 < keys6->length)){
HXLINE( 508)									int key102 = keys6->__get(_g102);
HXDLIN( 508)									_g102 = (_g102 + 1);
HXDLIN( 508)									action102->addKey(key102,state102);
            								}
            							}
HXDLIN( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action103 = this->_upP;
HXDLIN( 508)								int state103 = 2;
HXDLIN( 508)								int _g103 = 0;
HXDLIN( 508)								while((_g103 < keys6->length)){
HXLINE( 508)									int key103 = keys6->__get(_g103);
HXDLIN( 508)									_g103 = (_g103 + 1);
HXDLIN( 508)									action103->addKey(key103,state103);
            								}
            							}
HXDLIN( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action104 = this->_upR;
HXDLIN( 508)								int state104 = -1;
HXDLIN( 508)								int _g104 = 0;
HXDLIN( 508)								while((_g104 < keys6->length)){
HXLINE( 508)									int key104 = keys6->__get(_g104);
HXDLIN( 508)									_g104 = (_g104 + 1);
HXDLIN( 508)									action104->addKey(key104,state104);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action105 = this->_left;
HXDLIN( 508)								int state105 = 1;
HXDLIN( 508)								int _g105 = 0;
HXDLIN( 508)								while((_g105 < keys6->length)){
HXLINE( 508)									int key105 = keys6->__get(_g105);
HXDLIN( 508)									_g105 = (_g105 + 1);
HXDLIN( 508)									action105->addKey(key105,state105);
            								}
            							}
HXDLIN( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action106 = this->_leftP;
HXDLIN( 508)								int state106 = 2;
HXDLIN( 508)								int _g106 = 0;
HXDLIN( 508)								while((_g106 < keys6->length)){
HXLINE( 508)									int key106 = keys6->__get(_g106);
HXDLIN( 508)									_g106 = (_g106 + 1);
HXDLIN( 508)									action106->addKey(key106,state106);
            								}
            							}
HXDLIN( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action107 = this->_leftR;
HXDLIN( 508)								int state107 = -1;
HXDLIN( 508)								int _g107 = 0;
HXDLIN( 508)								while((_g107 < keys6->length)){
HXLINE( 508)									int key107 = keys6->__get(_g107);
HXDLIN( 508)									_g107 = (_g107 + 1);
HXDLIN( 508)									action107->addKey(key107,state107);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action108 = this->_right;
HXDLIN( 508)								int state108 = 1;
HXDLIN( 508)								int _g108 = 0;
HXDLIN( 508)								while((_g108 < keys6->length)){
HXLINE( 508)									int key108 = keys6->__get(_g108);
HXDLIN( 508)									_g108 = (_g108 + 1);
HXDLIN( 508)									action108->addKey(key108,state108);
            								}
            							}
HXDLIN( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action109 = this->_rightP;
HXDLIN( 508)								int state109 = 2;
HXDLIN( 508)								int _g109 = 0;
HXDLIN( 508)								while((_g109 < keys6->length)){
HXLINE( 508)									int key109 = keys6->__get(_g109);
HXDLIN( 508)									_g109 = (_g109 + 1);
HXDLIN( 508)									action109->addKey(key109,state109);
            								}
            							}
HXDLIN( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action110 = this->_rightR;
HXDLIN( 508)								int state110 = -1;
HXDLIN( 508)								int _g110 = 0;
HXDLIN( 508)								while((_g110 < keys6->length)){
HXLINE( 508)									int key110 = keys6->__get(_g110);
HXDLIN( 508)									_g110 = (_g110 + 1);
HXDLIN( 508)									action110->addKey(key110,state110);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action111 = this->_down;
HXDLIN( 508)								int state111 = 1;
HXDLIN( 508)								int _g111 = 0;
HXDLIN( 508)								while((_g111 < keys6->length)){
HXLINE( 508)									int key111 = keys6->__get(_g111);
HXDLIN( 508)									_g111 = (_g111 + 1);
HXDLIN( 508)									action111->addKey(key111,state111);
            								}
            							}
HXDLIN( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action112 = this->_downP;
HXDLIN( 508)								int state112 = 2;
HXDLIN( 508)								int _g112 = 0;
HXDLIN( 508)								while((_g112 < keys6->length)){
HXLINE( 508)									int key112 = keys6->__get(_g112);
HXDLIN( 508)									_g112 = (_g112 + 1);
HXDLIN( 508)									action112->addKey(key112,state112);
            								}
            							}
HXDLIN( 508)							{
HXLINE( 508)								 ::flixel::input::actions::FlxActionDigital action113 = this->_downR;
HXDLIN( 508)								int state113 = -1;
HXDLIN( 508)								int _g113 = 0;
HXDLIN( 508)								while((_g113 < keys6->length)){
HXLINE( 508)									int key113 = keys6->__get(_g113);
HXDLIN( 508)									_g113 = (_g113 + 1);
HXDLIN( 508)									action113->addKey(key113,state113);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 508)							 ::flixel::input::actions::FlxActionDigital action114 = this->_reset;
HXDLIN( 508)							int state114 = 2;
HXDLIN( 508)							int _g114 = 0;
HXDLIN( 508)							while((_g114 < keys6->length)){
HXLINE( 508)								int key114 = keys6->__get(_g114);
HXDLIN( 508)								_g114 = (_g114 + 1);
HXDLIN( 508)								action114->addKey(key114,state114);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 508)							 ::flixel::input::actions::FlxActionDigital action115 = this->_accept;
HXDLIN( 508)							int state115 = 2;
HXDLIN( 508)							int _g115 = 0;
HXDLIN( 508)							while((_g115 < keys6->length)){
HXLINE( 508)								int key115 = keys6->__get(_g115);
HXDLIN( 508)								_g115 = (_g115 + 1);
HXDLIN( 508)								action115->addKey(key115,state115);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 508)							 ::flixel::input::actions::FlxActionDigital action116 = this->_back;
HXDLIN( 508)							int state116 = 2;
HXDLIN( 508)							int _g116 = 0;
HXDLIN( 508)							while((_g116 < keys6->length)){
HXLINE( 508)								int key116 = keys6->__get(_g116);
HXDLIN( 508)								_g116 = (_g116 + 1);
HXDLIN( 508)								action116->addKey(key116,state116);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 508)							 ::flixel::input::actions::FlxActionDigital action117 = this->_pause;
HXDLIN( 508)							int state117 = 2;
HXDLIN( 508)							int _g117 = 0;
HXDLIN( 508)							while((_g117 < keys6->length)){
HXLINE( 508)								int key117 = keys6->__get(_g117);
HXDLIN( 508)								_g117 = (_g117 + 1);
HXDLIN( 508)								action117->addKey(key117,state117);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 508)							 ::flixel::input::actions::FlxActionDigital action118 = this->_cheat;
HXDLIN( 508)							int state118 = 2;
HXDLIN( 508)							int _g118 = 0;
HXDLIN( 508)							while((_g118 < keys6->length)){
HXLINE( 508)								int key118 = keys6->__get(_g118);
HXDLIN( 508)								_g118 = (_g118 + 1);
HXDLIN( 508)								action118->addKey(key118,state118);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 509)				{
HXLINE( 509)					::Array< int > keys7 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_450,1);
HXDLIN( 509)					switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action119 = this->_up;
HXDLIN( 509)								int state119 = 1;
HXDLIN( 509)								int _g119 = 0;
HXDLIN( 509)								while((_g119 < keys7->length)){
HXLINE( 509)									int key119 = keys7->__get(_g119);
HXDLIN( 509)									_g119 = (_g119 + 1);
HXDLIN( 509)									action119->addKey(key119,state119);
            								}
            							}
HXDLIN( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action120 = this->_upP;
HXDLIN( 509)								int state120 = 2;
HXDLIN( 509)								int _g120 = 0;
HXDLIN( 509)								while((_g120 < keys7->length)){
HXLINE( 509)									int key120 = keys7->__get(_g120);
HXDLIN( 509)									_g120 = (_g120 + 1);
HXDLIN( 509)									action120->addKey(key120,state120);
            								}
            							}
HXDLIN( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action121 = this->_upR;
HXDLIN( 509)								int state121 = -1;
HXDLIN( 509)								int _g121 = 0;
HXDLIN( 509)								while((_g121 < keys7->length)){
HXLINE( 509)									int key121 = keys7->__get(_g121);
HXDLIN( 509)									_g121 = (_g121 + 1);
HXDLIN( 509)									action121->addKey(key121,state121);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action122 = this->_left;
HXDLIN( 509)								int state122 = 1;
HXDLIN( 509)								int _g122 = 0;
HXDLIN( 509)								while((_g122 < keys7->length)){
HXLINE( 509)									int key122 = keys7->__get(_g122);
HXDLIN( 509)									_g122 = (_g122 + 1);
HXDLIN( 509)									action122->addKey(key122,state122);
            								}
            							}
HXDLIN( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action123 = this->_leftP;
HXDLIN( 509)								int state123 = 2;
HXDLIN( 509)								int _g123 = 0;
HXDLIN( 509)								while((_g123 < keys7->length)){
HXLINE( 509)									int key123 = keys7->__get(_g123);
HXDLIN( 509)									_g123 = (_g123 + 1);
HXDLIN( 509)									action123->addKey(key123,state123);
            								}
            							}
HXDLIN( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action124 = this->_leftR;
HXDLIN( 509)								int state124 = -1;
HXDLIN( 509)								int _g124 = 0;
HXDLIN( 509)								while((_g124 < keys7->length)){
HXLINE( 509)									int key124 = keys7->__get(_g124);
HXDLIN( 509)									_g124 = (_g124 + 1);
HXDLIN( 509)									action124->addKey(key124,state124);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action125 = this->_right;
HXDLIN( 509)								int state125 = 1;
HXDLIN( 509)								int _g125 = 0;
HXDLIN( 509)								while((_g125 < keys7->length)){
HXLINE( 509)									int key125 = keys7->__get(_g125);
HXDLIN( 509)									_g125 = (_g125 + 1);
HXDLIN( 509)									action125->addKey(key125,state125);
            								}
            							}
HXDLIN( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action126 = this->_rightP;
HXDLIN( 509)								int state126 = 2;
HXDLIN( 509)								int _g126 = 0;
HXDLIN( 509)								while((_g126 < keys7->length)){
HXLINE( 509)									int key126 = keys7->__get(_g126);
HXDLIN( 509)									_g126 = (_g126 + 1);
HXDLIN( 509)									action126->addKey(key126,state126);
            								}
            							}
HXDLIN( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action127 = this->_rightR;
HXDLIN( 509)								int state127 = -1;
HXDLIN( 509)								int _g127 = 0;
HXDLIN( 509)								while((_g127 < keys7->length)){
HXLINE( 509)									int key127 = keys7->__get(_g127);
HXDLIN( 509)									_g127 = (_g127 + 1);
HXDLIN( 509)									action127->addKey(key127,state127);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action128 = this->_down;
HXDLIN( 509)								int state128 = 1;
HXDLIN( 509)								int _g128 = 0;
HXDLIN( 509)								while((_g128 < keys7->length)){
HXLINE( 509)									int key128 = keys7->__get(_g128);
HXDLIN( 509)									_g128 = (_g128 + 1);
HXDLIN( 509)									action128->addKey(key128,state128);
            								}
            							}
HXDLIN( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action129 = this->_downP;
HXDLIN( 509)								int state129 = 2;
HXDLIN( 509)								int _g129 = 0;
HXDLIN( 509)								while((_g129 < keys7->length)){
HXLINE( 509)									int key129 = keys7->__get(_g129);
HXDLIN( 509)									_g129 = (_g129 + 1);
HXDLIN( 509)									action129->addKey(key129,state129);
            								}
            							}
HXDLIN( 509)							{
HXLINE( 509)								 ::flixel::input::actions::FlxActionDigital action130 = this->_downR;
HXDLIN( 509)								int state130 = -1;
HXDLIN( 509)								int _g130 = 0;
HXDLIN( 509)								while((_g130 < keys7->length)){
HXLINE( 509)									int key130 = keys7->__get(_g130);
HXDLIN( 509)									_g130 = (_g130 + 1);
HXDLIN( 509)									action130->addKey(key130,state130);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 509)							 ::flixel::input::actions::FlxActionDigital action131 = this->_reset;
HXDLIN( 509)							int state131 = 2;
HXDLIN( 509)							int _g131 = 0;
HXDLIN( 509)							while((_g131 < keys7->length)){
HXLINE( 509)								int key131 = keys7->__get(_g131);
HXDLIN( 509)								_g131 = (_g131 + 1);
HXDLIN( 509)								action131->addKey(key131,state131);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 509)							 ::flixel::input::actions::FlxActionDigital action132 = this->_accept;
HXDLIN( 509)							int state132 = 2;
HXDLIN( 509)							int _g132 = 0;
HXDLIN( 509)							while((_g132 < keys7->length)){
HXLINE( 509)								int key132 = keys7->__get(_g132);
HXDLIN( 509)								_g132 = (_g132 + 1);
HXDLIN( 509)								action132->addKey(key132,state132);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 509)							 ::flixel::input::actions::FlxActionDigital action133 = this->_back;
HXDLIN( 509)							int state133 = 2;
HXDLIN( 509)							int _g133 = 0;
HXDLIN( 509)							while((_g133 < keys7->length)){
HXLINE( 509)								int key133 = keys7->__get(_g133);
HXDLIN( 509)								_g133 = (_g133 + 1);
HXDLIN( 509)								action133->addKey(key133,state133);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 509)							 ::flixel::input::actions::FlxActionDigital action134 = this->_pause;
HXDLIN( 509)							int state134 = 2;
HXDLIN( 509)							int _g134 = 0;
HXDLIN( 509)							while((_g134 < keys7->length)){
HXLINE( 509)								int key134 = keys7->__get(_g134);
HXDLIN( 509)								_g134 = (_g134 + 1);
HXDLIN( 509)								action134->addKey(key134,state134);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 509)							 ::flixel::input::actions::FlxActionDigital action135 = this->_cheat;
HXDLIN( 509)							int state135 = 2;
HXDLIN( 509)							int _g135 = 0;
HXDLIN( 509)							while((_g135 < keys7->length)){
HXLINE( 509)								int key135 = keys7->__get(_g135);
HXDLIN( 509)								_g135 = (_g135 + 1);
HXDLIN( 509)								action135->addKey(key135,state135);
            							}
            						}
            						break;
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 518)				if (scheme->_hx_getBool(0)) {
HXLINE( 511)					{
HXLINE( 511)						::Array< int > keys8 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_451,2);
HXDLIN( 511)						switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action136 = this->_up;
HXDLIN( 511)									int state136 = 1;
HXDLIN( 511)									int _g136 = 0;
HXDLIN( 511)									while((_g136 < keys8->length)){
HXLINE( 511)										int key136 = keys8->__get(_g136);
HXDLIN( 511)										_g136 = (_g136 + 1);
HXDLIN( 511)										action136->addKey(key136,state136);
            									}
            								}
HXDLIN( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action137 = this->_upP;
HXDLIN( 511)									int state137 = 2;
HXDLIN( 511)									int _g137 = 0;
HXDLIN( 511)									while((_g137 < keys8->length)){
HXLINE( 511)										int key137 = keys8->__get(_g137);
HXDLIN( 511)										_g137 = (_g137 + 1);
HXDLIN( 511)										action137->addKey(key137,state137);
            									}
            								}
HXDLIN( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action138 = this->_upR;
HXDLIN( 511)									int state138 = -1;
HXDLIN( 511)									int _g138 = 0;
HXDLIN( 511)									while((_g138 < keys8->length)){
HXLINE( 511)										int key138 = keys8->__get(_g138);
HXDLIN( 511)										_g138 = (_g138 + 1);
HXDLIN( 511)										action138->addKey(key138,state138);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action139 = this->_left;
HXDLIN( 511)									int state139 = 1;
HXDLIN( 511)									int _g139 = 0;
HXDLIN( 511)									while((_g139 < keys8->length)){
HXLINE( 511)										int key139 = keys8->__get(_g139);
HXDLIN( 511)										_g139 = (_g139 + 1);
HXDLIN( 511)										action139->addKey(key139,state139);
            									}
            								}
HXDLIN( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action140 = this->_leftP;
HXDLIN( 511)									int state140 = 2;
HXDLIN( 511)									int _g140 = 0;
HXDLIN( 511)									while((_g140 < keys8->length)){
HXLINE( 511)										int key140 = keys8->__get(_g140);
HXDLIN( 511)										_g140 = (_g140 + 1);
HXDLIN( 511)										action140->addKey(key140,state140);
            									}
            								}
HXDLIN( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action141 = this->_leftR;
HXDLIN( 511)									int state141 = -1;
HXDLIN( 511)									int _g141 = 0;
HXDLIN( 511)									while((_g141 < keys8->length)){
HXLINE( 511)										int key141 = keys8->__get(_g141);
HXDLIN( 511)										_g141 = (_g141 + 1);
HXDLIN( 511)										action141->addKey(key141,state141);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action142 = this->_right;
HXDLIN( 511)									int state142 = 1;
HXDLIN( 511)									int _g142 = 0;
HXDLIN( 511)									while((_g142 < keys8->length)){
HXLINE( 511)										int key142 = keys8->__get(_g142);
HXDLIN( 511)										_g142 = (_g142 + 1);
HXDLIN( 511)										action142->addKey(key142,state142);
            									}
            								}
HXDLIN( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action143 = this->_rightP;
HXDLIN( 511)									int state143 = 2;
HXDLIN( 511)									int _g143 = 0;
HXDLIN( 511)									while((_g143 < keys8->length)){
HXLINE( 511)										int key143 = keys8->__get(_g143);
HXDLIN( 511)										_g143 = (_g143 + 1);
HXDLIN( 511)										action143->addKey(key143,state143);
            									}
            								}
HXDLIN( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action144 = this->_rightR;
HXDLIN( 511)									int state144 = -1;
HXDLIN( 511)									int _g144 = 0;
HXDLIN( 511)									while((_g144 < keys8->length)){
HXLINE( 511)										int key144 = keys8->__get(_g144);
HXDLIN( 511)										_g144 = (_g144 + 1);
HXDLIN( 511)										action144->addKey(key144,state144);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action145 = this->_down;
HXDLIN( 511)									int state145 = 1;
HXDLIN( 511)									int _g145 = 0;
HXDLIN( 511)									while((_g145 < keys8->length)){
HXLINE( 511)										int key145 = keys8->__get(_g145);
HXDLIN( 511)										_g145 = (_g145 + 1);
HXDLIN( 511)										action145->addKey(key145,state145);
            									}
            								}
HXDLIN( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action146 = this->_downP;
HXDLIN( 511)									int state146 = 2;
HXDLIN( 511)									int _g146 = 0;
HXDLIN( 511)									while((_g146 < keys8->length)){
HXLINE( 511)										int key146 = keys8->__get(_g146);
HXDLIN( 511)										_g146 = (_g146 + 1);
HXDLIN( 511)										action146->addKey(key146,state146);
            									}
            								}
HXDLIN( 511)								{
HXLINE( 511)									 ::flixel::input::actions::FlxActionDigital action147 = this->_downR;
HXDLIN( 511)									int state147 = -1;
HXDLIN( 511)									int _g147 = 0;
HXDLIN( 511)									while((_g147 < keys8->length)){
HXLINE( 511)										int key147 = keys8->__get(_g147);
HXDLIN( 511)										_g147 = (_g147 + 1);
HXDLIN( 511)										action147->addKey(key147,state147);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 511)								 ::flixel::input::actions::FlxActionDigital action148 = this->_reset;
HXDLIN( 511)								int state148 = 2;
HXDLIN( 511)								int _g148 = 0;
HXDLIN( 511)								while((_g148 < keys8->length)){
HXLINE( 511)									int key148 = keys8->__get(_g148);
HXDLIN( 511)									_g148 = (_g148 + 1);
HXDLIN( 511)									action148->addKey(key148,state148);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 511)								 ::flixel::input::actions::FlxActionDigital action149 = this->_accept;
HXDLIN( 511)								int state149 = 2;
HXDLIN( 511)								int _g149 = 0;
HXDLIN( 511)								while((_g149 < keys8->length)){
HXLINE( 511)									int key149 = keys8->__get(_g149);
HXDLIN( 511)									_g149 = (_g149 + 1);
HXDLIN( 511)									action149->addKey(key149,state149);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 511)								 ::flixel::input::actions::FlxActionDigital action150 = this->_back;
HXDLIN( 511)								int state150 = 2;
HXDLIN( 511)								int _g150 = 0;
HXDLIN( 511)								while((_g150 < keys8->length)){
HXLINE( 511)									int key150 = keys8->__get(_g150);
HXDLIN( 511)									_g150 = (_g150 + 1);
HXDLIN( 511)									action150->addKey(key150,state150);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 511)								 ::flixel::input::actions::FlxActionDigital action151 = this->_pause;
HXDLIN( 511)								int state151 = 2;
HXDLIN( 511)								int _g151 = 0;
HXDLIN( 511)								while((_g151 < keys8->length)){
HXLINE( 511)									int key151 = keys8->__get(_g151);
HXDLIN( 511)									_g151 = (_g151 + 1);
HXDLIN( 511)									action151->addKey(key151,state151);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 511)								 ::flixel::input::actions::FlxActionDigital action152 = this->_cheat;
HXDLIN( 511)								int state152 = 2;
HXDLIN( 511)								int _g152 = 0;
HXDLIN( 511)								while((_g152 < keys8->length)){
HXLINE( 511)									int key152 = keys8->__get(_g152);
HXDLIN( 511)									_g152 = (_g152 + 1);
HXDLIN( 511)									action152->addKey(key152,state152);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 512)					{
HXLINE( 512)						::Array< int > keys9 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_452,2);
HXDLIN( 512)						switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action153 = this->_up;
HXDLIN( 512)									int state153 = 1;
HXDLIN( 512)									int _g153 = 0;
HXDLIN( 512)									while((_g153 < keys9->length)){
HXLINE( 512)										int key153 = keys9->__get(_g153);
HXDLIN( 512)										_g153 = (_g153 + 1);
HXDLIN( 512)										action153->addKey(key153,state153);
            									}
            								}
HXDLIN( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action154 = this->_upP;
HXDLIN( 512)									int state154 = 2;
HXDLIN( 512)									int _g154 = 0;
HXDLIN( 512)									while((_g154 < keys9->length)){
HXLINE( 512)										int key154 = keys9->__get(_g154);
HXDLIN( 512)										_g154 = (_g154 + 1);
HXDLIN( 512)										action154->addKey(key154,state154);
            									}
            								}
HXDLIN( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action155 = this->_upR;
HXDLIN( 512)									int state155 = -1;
HXDLIN( 512)									int _g155 = 0;
HXDLIN( 512)									while((_g155 < keys9->length)){
HXLINE( 512)										int key155 = keys9->__get(_g155);
HXDLIN( 512)										_g155 = (_g155 + 1);
HXDLIN( 512)										action155->addKey(key155,state155);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action156 = this->_left;
HXDLIN( 512)									int state156 = 1;
HXDLIN( 512)									int _g156 = 0;
HXDLIN( 512)									while((_g156 < keys9->length)){
HXLINE( 512)										int key156 = keys9->__get(_g156);
HXDLIN( 512)										_g156 = (_g156 + 1);
HXDLIN( 512)										action156->addKey(key156,state156);
            									}
            								}
HXDLIN( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action157 = this->_leftP;
HXDLIN( 512)									int state157 = 2;
HXDLIN( 512)									int _g157 = 0;
HXDLIN( 512)									while((_g157 < keys9->length)){
HXLINE( 512)										int key157 = keys9->__get(_g157);
HXDLIN( 512)										_g157 = (_g157 + 1);
HXDLIN( 512)										action157->addKey(key157,state157);
            									}
            								}
HXDLIN( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action158 = this->_leftR;
HXDLIN( 512)									int state158 = -1;
HXDLIN( 512)									int _g158 = 0;
HXDLIN( 512)									while((_g158 < keys9->length)){
HXLINE( 512)										int key158 = keys9->__get(_g158);
HXDLIN( 512)										_g158 = (_g158 + 1);
HXDLIN( 512)										action158->addKey(key158,state158);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action159 = this->_right;
HXDLIN( 512)									int state159 = 1;
HXDLIN( 512)									int _g159 = 0;
HXDLIN( 512)									while((_g159 < keys9->length)){
HXLINE( 512)										int key159 = keys9->__get(_g159);
HXDLIN( 512)										_g159 = (_g159 + 1);
HXDLIN( 512)										action159->addKey(key159,state159);
            									}
            								}
HXDLIN( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action160 = this->_rightP;
HXDLIN( 512)									int state160 = 2;
HXDLIN( 512)									int _g160 = 0;
HXDLIN( 512)									while((_g160 < keys9->length)){
HXLINE( 512)										int key160 = keys9->__get(_g160);
HXDLIN( 512)										_g160 = (_g160 + 1);
HXDLIN( 512)										action160->addKey(key160,state160);
            									}
            								}
HXDLIN( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action161 = this->_rightR;
HXDLIN( 512)									int state161 = -1;
HXDLIN( 512)									int _g161 = 0;
HXDLIN( 512)									while((_g161 < keys9->length)){
HXLINE( 512)										int key161 = keys9->__get(_g161);
HXDLIN( 512)										_g161 = (_g161 + 1);
HXDLIN( 512)										action161->addKey(key161,state161);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action162 = this->_down;
HXDLIN( 512)									int state162 = 1;
HXDLIN( 512)									int _g162 = 0;
HXDLIN( 512)									while((_g162 < keys9->length)){
HXLINE( 512)										int key162 = keys9->__get(_g162);
HXDLIN( 512)										_g162 = (_g162 + 1);
HXDLIN( 512)										action162->addKey(key162,state162);
            									}
            								}
HXDLIN( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action163 = this->_downP;
HXDLIN( 512)									int state163 = 2;
HXDLIN( 512)									int _g163 = 0;
HXDLIN( 512)									while((_g163 < keys9->length)){
HXLINE( 512)										int key163 = keys9->__get(_g163);
HXDLIN( 512)										_g163 = (_g163 + 1);
HXDLIN( 512)										action163->addKey(key163,state163);
            									}
            								}
HXDLIN( 512)								{
HXLINE( 512)									 ::flixel::input::actions::FlxActionDigital action164 = this->_downR;
HXDLIN( 512)									int state164 = -1;
HXDLIN( 512)									int _g164 = 0;
HXDLIN( 512)									while((_g164 < keys9->length)){
HXLINE( 512)										int key164 = keys9->__get(_g164);
HXDLIN( 512)										_g164 = (_g164 + 1);
HXDLIN( 512)										action164->addKey(key164,state164);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 512)								 ::flixel::input::actions::FlxActionDigital action165 = this->_reset;
HXDLIN( 512)								int state165 = 2;
HXDLIN( 512)								int _g165 = 0;
HXDLIN( 512)								while((_g165 < keys9->length)){
HXLINE( 512)									int key165 = keys9->__get(_g165);
HXDLIN( 512)									_g165 = (_g165 + 1);
HXDLIN( 512)									action165->addKey(key165,state165);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 512)								 ::flixel::input::actions::FlxActionDigital action166 = this->_accept;
HXDLIN( 512)								int state166 = 2;
HXDLIN( 512)								int _g166 = 0;
HXDLIN( 512)								while((_g166 < keys9->length)){
HXLINE( 512)									int key166 = keys9->__get(_g166);
HXDLIN( 512)									_g166 = (_g166 + 1);
HXDLIN( 512)									action166->addKey(key166,state166);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 512)								 ::flixel::input::actions::FlxActionDigital action167 = this->_back;
HXDLIN( 512)								int state167 = 2;
HXDLIN( 512)								int _g167 = 0;
HXDLIN( 512)								while((_g167 < keys9->length)){
HXLINE( 512)									int key167 = keys9->__get(_g167);
HXDLIN( 512)									_g167 = (_g167 + 1);
HXDLIN( 512)									action167->addKey(key167,state167);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 512)								 ::flixel::input::actions::FlxActionDigital action168 = this->_pause;
HXDLIN( 512)								int state168 = 2;
HXDLIN( 512)								int _g168 = 0;
HXDLIN( 512)								while((_g168 < keys9->length)){
HXLINE( 512)									int key168 = keys9->__get(_g168);
HXDLIN( 512)									_g168 = (_g168 + 1);
HXDLIN( 512)									action168->addKey(key168,state168);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 512)								 ::flixel::input::actions::FlxActionDigital action169 = this->_cheat;
HXDLIN( 512)								int state169 = 2;
HXDLIN( 512)								int _g169 = 0;
HXDLIN( 512)								while((_g169 < keys9->length)){
HXLINE( 512)									int key169 = keys9->__get(_g169);
HXDLIN( 512)									_g169 = (_g169 + 1);
HXDLIN( 512)									action169->addKey(key169,state169);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 513)					{
HXLINE( 513)						::Array< int > keys10 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_453,2);
HXDLIN( 513)						switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action170 = this->_up;
HXDLIN( 513)									int state170 = 1;
HXDLIN( 513)									int _g170 = 0;
HXDLIN( 513)									while((_g170 < keys10->length)){
HXLINE( 513)										int key170 = keys10->__get(_g170);
HXDLIN( 513)										_g170 = (_g170 + 1);
HXDLIN( 513)										action170->addKey(key170,state170);
            									}
            								}
HXDLIN( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action171 = this->_upP;
HXDLIN( 513)									int state171 = 2;
HXDLIN( 513)									int _g171 = 0;
HXDLIN( 513)									while((_g171 < keys10->length)){
HXLINE( 513)										int key171 = keys10->__get(_g171);
HXDLIN( 513)										_g171 = (_g171 + 1);
HXDLIN( 513)										action171->addKey(key171,state171);
            									}
            								}
HXDLIN( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action172 = this->_upR;
HXDLIN( 513)									int state172 = -1;
HXDLIN( 513)									int _g172 = 0;
HXDLIN( 513)									while((_g172 < keys10->length)){
HXLINE( 513)										int key172 = keys10->__get(_g172);
HXDLIN( 513)										_g172 = (_g172 + 1);
HXDLIN( 513)										action172->addKey(key172,state172);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action173 = this->_left;
HXDLIN( 513)									int state173 = 1;
HXDLIN( 513)									int _g173 = 0;
HXDLIN( 513)									while((_g173 < keys10->length)){
HXLINE( 513)										int key173 = keys10->__get(_g173);
HXDLIN( 513)										_g173 = (_g173 + 1);
HXDLIN( 513)										action173->addKey(key173,state173);
            									}
            								}
HXDLIN( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action174 = this->_leftP;
HXDLIN( 513)									int state174 = 2;
HXDLIN( 513)									int _g174 = 0;
HXDLIN( 513)									while((_g174 < keys10->length)){
HXLINE( 513)										int key174 = keys10->__get(_g174);
HXDLIN( 513)										_g174 = (_g174 + 1);
HXDLIN( 513)										action174->addKey(key174,state174);
            									}
            								}
HXDLIN( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action175 = this->_leftR;
HXDLIN( 513)									int state175 = -1;
HXDLIN( 513)									int _g175 = 0;
HXDLIN( 513)									while((_g175 < keys10->length)){
HXLINE( 513)										int key175 = keys10->__get(_g175);
HXDLIN( 513)										_g175 = (_g175 + 1);
HXDLIN( 513)										action175->addKey(key175,state175);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action176 = this->_right;
HXDLIN( 513)									int state176 = 1;
HXDLIN( 513)									int _g176 = 0;
HXDLIN( 513)									while((_g176 < keys10->length)){
HXLINE( 513)										int key176 = keys10->__get(_g176);
HXDLIN( 513)										_g176 = (_g176 + 1);
HXDLIN( 513)										action176->addKey(key176,state176);
            									}
            								}
HXDLIN( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action177 = this->_rightP;
HXDLIN( 513)									int state177 = 2;
HXDLIN( 513)									int _g177 = 0;
HXDLIN( 513)									while((_g177 < keys10->length)){
HXLINE( 513)										int key177 = keys10->__get(_g177);
HXDLIN( 513)										_g177 = (_g177 + 1);
HXDLIN( 513)										action177->addKey(key177,state177);
            									}
            								}
HXDLIN( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action178 = this->_rightR;
HXDLIN( 513)									int state178 = -1;
HXDLIN( 513)									int _g178 = 0;
HXDLIN( 513)									while((_g178 < keys10->length)){
HXLINE( 513)										int key178 = keys10->__get(_g178);
HXDLIN( 513)										_g178 = (_g178 + 1);
HXDLIN( 513)										action178->addKey(key178,state178);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action179 = this->_down;
HXDLIN( 513)									int state179 = 1;
HXDLIN( 513)									int _g179 = 0;
HXDLIN( 513)									while((_g179 < keys10->length)){
HXLINE( 513)										int key179 = keys10->__get(_g179);
HXDLIN( 513)										_g179 = (_g179 + 1);
HXDLIN( 513)										action179->addKey(key179,state179);
            									}
            								}
HXDLIN( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action180 = this->_downP;
HXDLIN( 513)									int state180 = 2;
HXDLIN( 513)									int _g180 = 0;
HXDLIN( 513)									while((_g180 < keys10->length)){
HXLINE( 513)										int key180 = keys10->__get(_g180);
HXDLIN( 513)										_g180 = (_g180 + 1);
HXDLIN( 513)										action180->addKey(key180,state180);
            									}
            								}
HXDLIN( 513)								{
HXLINE( 513)									 ::flixel::input::actions::FlxActionDigital action181 = this->_downR;
HXDLIN( 513)									int state181 = -1;
HXDLIN( 513)									int _g181 = 0;
HXDLIN( 513)									while((_g181 < keys10->length)){
HXLINE( 513)										int key181 = keys10->__get(_g181);
HXDLIN( 513)										_g181 = (_g181 + 1);
HXDLIN( 513)										action181->addKey(key181,state181);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 513)								 ::flixel::input::actions::FlxActionDigital action182 = this->_reset;
HXDLIN( 513)								int state182 = 2;
HXDLIN( 513)								int _g182 = 0;
HXDLIN( 513)								while((_g182 < keys10->length)){
HXLINE( 513)									int key182 = keys10->__get(_g182);
HXDLIN( 513)									_g182 = (_g182 + 1);
HXDLIN( 513)									action182->addKey(key182,state182);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 513)								 ::flixel::input::actions::FlxActionDigital action183 = this->_accept;
HXDLIN( 513)								int state183 = 2;
HXDLIN( 513)								int _g183 = 0;
HXDLIN( 513)								while((_g183 < keys10->length)){
HXLINE( 513)									int key183 = keys10->__get(_g183);
HXDLIN( 513)									_g183 = (_g183 + 1);
HXDLIN( 513)									action183->addKey(key183,state183);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 513)								 ::flixel::input::actions::FlxActionDigital action184 = this->_back;
HXDLIN( 513)								int state184 = 2;
HXDLIN( 513)								int _g184 = 0;
HXDLIN( 513)								while((_g184 < keys10->length)){
HXLINE( 513)									int key184 = keys10->__get(_g184);
HXDLIN( 513)									_g184 = (_g184 + 1);
HXDLIN( 513)									action184->addKey(key184,state184);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 513)								 ::flixel::input::actions::FlxActionDigital action185 = this->_pause;
HXDLIN( 513)								int state185 = 2;
HXDLIN( 513)								int _g185 = 0;
HXDLIN( 513)								while((_g185 < keys10->length)){
HXLINE( 513)									int key185 = keys10->__get(_g185);
HXDLIN( 513)									_g185 = (_g185 + 1);
HXDLIN( 513)									action185->addKey(key185,state185);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 513)								 ::flixel::input::actions::FlxActionDigital action186 = this->_cheat;
HXDLIN( 513)								int state186 = 2;
HXDLIN( 513)								int _g186 = 0;
HXDLIN( 513)								while((_g186 < keys10->length)){
HXLINE( 513)									int key186 = keys10->__get(_g186);
HXDLIN( 513)									_g186 = (_g186 + 1);
HXDLIN( 513)									action186->addKey(key186,state186);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 514)					{
HXLINE( 514)						::Array< int > keys11 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_454,2);
HXDLIN( 514)						switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action187 = this->_up;
HXDLIN( 514)									int state187 = 1;
HXDLIN( 514)									int _g187 = 0;
HXDLIN( 514)									while((_g187 < keys11->length)){
HXLINE( 514)										int key187 = keys11->__get(_g187);
HXDLIN( 514)										_g187 = (_g187 + 1);
HXDLIN( 514)										action187->addKey(key187,state187);
            									}
            								}
HXDLIN( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action188 = this->_upP;
HXDLIN( 514)									int state188 = 2;
HXDLIN( 514)									int _g188 = 0;
HXDLIN( 514)									while((_g188 < keys11->length)){
HXLINE( 514)										int key188 = keys11->__get(_g188);
HXDLIN( 514)										_g188 = (_g188 + 1);
HXDLIN( 514)										action188->addKey(key188,state188);
            									}
            								}
HXDLIN( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action189 = this->_upR;
HXDLIN( 514)									int state189 = -1;
HXDLIN( 514)									int _g189 = 0;
HXDLIN( 514)									while((_g189 < keys11->length)){
HXLINE( 514)										int key189 = keys11->__get(_g189);
HXDLIN( 514)										_g189 = (_g189 + 1);
HXDLIN( 514)										action189->addKey(key189,state189);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action190 = this->_left;
HXDLIN( 514)									int state190 = 1;
HXDLIN( 514)									int _g190 = 0;
HXDLIN( 514)									while((_g190 < keys11->length)){
HXLINE( 514)										int key190 = keys11->__get(_g190);
HXDLIN( 514)										_g190 = (_g190 + 1);
HXDLIN( 514)										action190->addKey(key190,state190);
            									}
            								}
HXDLIN( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action191 = this->_leftP;
HXDLIN( 514)									int state191 = 2;
HXDLIN( 514)									int _g191 = 0;
HXDLIN( 514)									while((_g191 < keys11->length)){
HXLINE( 514)										int key191 = keys11->__get(_g191);
HXDLIN( 514)										_g191 = (_g191 + 1);
HXDLIN( 514)										action191->addKey(key191,state191);
            									}
            								}
HXDLIN( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action192 = this->_leftR;
HXDLIN( 514)									int state192 = -1;
HXDLIN( 514)									int _g192 = 0;
HXDLIN( 514)									while((_g192 < keys11->length)){
HXLINE( 514)										int key192 = keys11->__get(_g192);
HXDLIN( 514)										_g192 = (_g192 + 1);
HXDLIN( 514)										action192->addKey(key192,state192);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action193 = this->_right;
HXDLIN( 514)									int state193 = 1;
HXDLIN( 514)									int _g193 = 0;
HXDLIN( 514)									while((_g193 < keys11->length)){
HXLINE( 514)										int key193 = keys11->__get(_g193);
HXDLIN( 514)										_g193 = (_g193 + 1);
HXDLIN( 514)										action193->addKey(key193,state193);
            									}
            								}
HXDLIN( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action194 = this->_rightP;
HXDLIN( 514)									int state194 = 2;
HXDLIN( 514)									int _g194 = 0;
HXDLIN( 514)									while((_g194 < keys11->length)){
HXLINE( 514)										int key194 = keys11->__get(_g194);
HXDLIN( 514)										_g194 = (_g194 + 1);
HXDLIN( 514)										action194->addKey(key194,state194);
            									}
            								}
HXDLIN( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action195 = this->_rightR;
HXDLIN( 514)									int state195 = -1;
HXDLIN( 514)									int _g195 = 0;
HXDLIN( 514)									while((_g195 < keys11->length)){
HXLINE( 514)										int key195 = keys11->__get(_g195);
HXDLIN( 514)										_g195 = (_g195 + 1);
HXDLIN( 514)										action195->addKey(key195,state195);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action196 = this->_down;
HXDLIN( 514)									int state196 = 1;
HXDLIN( 514)									int _g196 = 0;
HXDLIN( 514)									while((_g196 < keys11->length)){
HXLINE( 514)										int key196 = keys11->__get(_g196);
HXDLIN( 514)										_g196 = (_g196 + 1);
HXDLIN( 514)										action196->addKey(key196,state196);
            									}
            								}
HXDLIN( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action197 = this->_downP;
HXDLIN( 514)									int state197 = 2;
HXDLIN( 514)									int _g197 = 0;
HXDLIN( 514)									while((_g197 < keys11->length)){
HXLINE( 514)										int key197 = keys11->__get(_g197);
HXDLIN( 514)										_g197 = (_g197 + 1);
HXDLIN( 514)										action197->addKey(key197,state197);
            									}
            								}
HXDLIN( 514)								{
HXLINE( 514)									 ::flixel::input::actions::FlxActionDigital action198 = this->_downR;
HXDLIN( 514)									int state198 = -1;
HXDLIN( 514)									int _g198 = 0;
HXDLIN( 514)									while((_g198 < keys11->length)){
HXLINE( 514)										int key198 = keys11->__get(_g198);
HXDLIN( 514)										_g198 = (_g198 + 1);
HXDLIN( 514)										action198->addKey(key198,state198);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 514)								 ::flixel::input::actions::FlxActionDigital action199 = this->_reset;
HXDLIN( 514)								int state199 = 2;
HXDLIN( 514)								int _g199 = 0;
HXDLIN( 514)								while((_g199 < keys11->length)){
HXLINE( 514)									int key199 = keys11->__get(_g199);
HXDLIN( 514)									_g199 = (_g199 + 1);
HXDLIN( 514)									action199->addKey(key199,state199);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 514)								 ::flixel::input::actions::FlxActionDigital action200 = this->_accept;
HXDLIN( 514)								int state200 = 2;
HXDLIN( 514)								int _g200 = 0;
HXDLIN( 514)								while((_g200 < keys11->length)){
HXLINE( 514)									int key200 = keys11->__get(_g200);
HXDLIN( 514)									_g200 = (_g200 + 1);
HXDLIN( 514)									action200->addKey(key200,state200);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 514)								 ::flixel::input::actions::FlxActionDigital action201 = this->_back;
HXDLIN( 514)								int state201 = 2;
HXDLIN( 514)								int _g201 = 0;
HXDLIN( 514)								while((_g201 < keys11->length)){
HXLINE( 514)									int key201 = keys11->__get(_g201);
HXDLIN( 514)									_g201 = (_g201 + 1);
HXDLIN( 514)									action201->addKey(key201,state201);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 514)								 ::flixel::input::actions::FlxActionDigital action202 = this->_pause;
HXDLIN( 514)								int state202 = 2;
HXDLIN( 514)								int _g202 = 0;
HXDLIN( 514)								while((_g202 < keys11->length)){
HXLINE( 514)									int key202 = keys11->__get(_g202);
HXDLIN( 514)									_g202 = (_g202 + 1);
HXDLIN( 514)									action202->addKey(key202,state202);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 514)								 ::flixel::input::actions::FlxActionDigital action203 = this->_cheat;
HXDLIN( 514)								int state203 = 2;
HXDLIN( 514)								int _g203 = 0;
HXDLIN( 514)								while((_g203 < keys11->length)){
HXLINE( 514)									int key203 = keys11->__get(_g203);
HXDLIN( 514)									_g203 = (_g203 + 1);
HXDLIN( 514)									action203->addKey(key203,state203);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 515)					{
HXLINE( 515)						::Array< int > keys12 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_455,4);
HXDLIN( 515)						switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action204 = this->_up;
HXDLIN( 515)									int state204 = 1;
HXDLIN( 515)									int _g204 = 0;
HXDLIN( 515)									while((_g204 < keys12->length)){
HXLINE( 515)										int key204 = keys12->__get(_g204);
HXDLIN( 515)										_g204 = (_g204 + 1);
HXDLIN( 515)										action204->addKey(key204,state204);
            									}
            								}
HXDLIN( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action205 = this->_upP;
HXDLIN( 515)									int state205 = 2;
HXDLIN( 515)									int _g205 = 0;
HXDLIN( 515)									while((_g205 < keys12->length)){
HXLINE( 515)										int key205 = keys12->__get(_g205);
HXDLIN( 515)										_g205 = (_g205 + 1);
HXDLIN( 515)										action205->addKey(key205,state205);
            									}
            								}
HXDLIN( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action206 = this->_upR;
HXDLIN( 515)									int state206 = -1;
HXDLIN( 515)									int _g206 = 0;
HXDLIN( 515)									while((_g206 < keys12->length)){
HXLINE( 515)										int key206 = keys12->__get(_g206);
HXDLIN( 515)										_g206 = (_g206 + 1);
HXDLIN( 515)										action206->addKey(key206,state206);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action207 = this->_left;
HXDLIN( 515)									int state207 = 1;
HXDLIN( 515)									int _g207 = 0;
HXDLIN( 515)									while((_g207 < keys12->length)){
HXLINE( 515)										int key207 = keys12->__get(_g207);
HXDLIN( 515)										_g207 = (_g207 + 1);
HXDLIN( 515)										action207->addKey(key207,state207);
            									}
            								}
HXDLIN( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action208 = this->_leftP;
HXDLIN( 515)									int state208 = 2;
HXDLIN( 515)									int _g208 = 0;
HXDLIN( 515)									while((_g208 < keys12->length)){
HXLINE( 515)										int key208 = keys12->__get(_g208);
HXDLIN( 515)										_g208 = (_g208 + 1);
HXDLIN( 515)										action208->addKey(key208,state208);
            									}
            								}
HXDLIN( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action209 = this->_leftR;
HXDLIN( 515)									int state209 = -1;
HXDLIN( 515)									int _g209 = 0;
HXDLIN( 515)									while((_g209 < keys12->length)){
HXLINE( 515)										int key209 = keys12->__get(_g209);
HXDLIN( 515)										_g209 = (_g209 + 1);
HXDLIN( 515)										action209->addKey(key209,state209);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action210 = this->_right;
HXDLIN( 515)									int state210 = 1;
HXDLIN( 515)									int _g210 = 0;
HXDLIN( 515)									while((_g210 < keys12->length)){
HXLINE( 515)										int key210 = keys12->__get(_g210);
HXDLIN( 515)										_g210 = (_g210 + 1);
HXDLIN( 515)										action210->addKey(key210,state210);
            									}
            								}
HXDLIN( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action211 = this->_rightP;
HXDLIN( 515)									int state211 = 2;
HXDLIN( 515)									int _g211 = 0;
HXDLIN( 515)									while((_g211 < keys12->length)){
HXLINE( 515)										int key211 = keys12->__get(_g211);
HXDLIN( 515)										_g211 = (_g211 + 1);
HXDLIN( 515)										action211->addKey(key211,state211);
            									}
            								}
HXDLIN( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action212 = this->_rightR;
HXDLIN( 515)									int state212 = -1;
HXDLIN( 515)									int _g212 = 0;
HXDLIN( 515)									while((_g212 < keys12->length)){
HXLINE( 515)										int key212 = keys12->__get(_g212);
HXDLIN( 515)										_g212 = (_g212 + 1);
HXDLIN( 515)										action212->addKey(key212,state212);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action213 = this->_down;
HXDLIN( 515)									int state213 = 1;
HXDLIN( 515)									int _g213 = 0;
HXDLIN( 515)									while((_g213 < keys12->length)){
HXLINE( 515)										int key213 = keys12->__get(_g213);
HXDLIN( 515)										_g213 = (_g213 + 1);
HXDLIN( 515)										action213->addKey(key213,state213);
            									}
            								}
HXDLIN( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action214 = this->_downP;
HXDLIN( 515)									int state214 = 2;
HXDLIN( 515)									int _g214 = 0;
HXDLIN( 515)									while((_g214 < keys12->length)){
HXLINE( 515)										int key214 = keys12->__get(_g214);
HXDLIN( 515)										_g214 = (_g214 + 1);
HXDLIN( 515)										action214->addKey(key214,state214);
            									}
            								}
HXDLIN( 515)								{
HXLINE( 515)									 ::flixel::input::actions::FlxActionDigital action215 = this->_downR;
HXDLIN( 515)									int state215 = -1;
HXDLIN( 515)									int _g215 = 0;
HXDLIN( 515)									while((_g215 < keys12->length)){
HXLINE( 515)										int key215 = keys12->__get(_g215);
HXDLIN( 515)										_g215 = (_g215 + 1);
HXDLIN( 515)										action215->addKey(key215,state215);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 515)								 ::flixel::input::actions::FlxActionDigital action216 = this->_reset;
HXDLIN( 515)								int state216 = 2;
HXDLIN( 515)								int _g216 = 0;
HXDLIN( 515)								while((_g216 < keys12->length)){
HXLINE( 515)									int key216 = keys12->__get(_g216);
HXDLIN( 515)									_g216 = (_g216 + 1);
HXDLIN( 515)									action216->addKey(key216,state216);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 515)								 ::flixel::input::actions::FlxActionDigital action217 = this->_accept;
HXDLIN( 515)								int state217 = 2;
HXDLIN( 515)								int _g217 = 0;
HXDLIN( 515)								while((_g217 < keys12->length)){
HXLINE( 515)									int key217 = keys12->__get(_g217);
HXDLIN( 515)									_g217 = (_g217 + 1);
HXDLIN( 515)									action217->addKey(key217,state217);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 515)								 ::flixel::input::actions::FlxActionDigital action218 = this->_back;
HXDLIN( 515)								int state218 = 2;
HXDLIN( 515)								int _g218 = 0;
HXDLIN( 515)								while((_g218 < keys12->length)){
HXLINE( 515)									int key218 = keys12->__get(_g218);
HXDLIN( 515)									_g218 = (_g218 + 1);
HXDLIN( 515)									action218->addKey(key218,state218);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 515)								 ::flixel::input::actions::FlxActionDigital action219 = this->_pause;
HXDLIN( 515)								int state219 = 2;
HXDLIN( 515)								int _g219 = 0;
HXDLIN( 515)								while((_g219 < keys12->length)){
HXLINE( 515)									int key219 = keys12->__get(_g219);
HXDLIN( 515)									_g219 = (_g219 + 1);
HXDLIN( 515)									action219->addKey(key219,state219);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 515)								 ::flixel::input::actions::FlxActionDigital action220 = this->_cheat;
HXDLIN( 515)								int state220 = 2;
HXDLIN( 515)								int _g220 = 0;
HXDLIN( 515)								while((_g220 < keys12->length)){
HXLINE( 515)									int key220 = keys12->__get(_g220);
HXDLIN( 515)									_g220 = (_g220 + 1);
HXDLIN( 515)									action220->addKey(key220,state220);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 516)					{
HXLINE( 516)						::Array< int > keys13 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_456,2);
HXDLIN( 516)						switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action221 = this->_up;
HXDLIN( 516)									int state221 = 1;
HXDLIN( 516)									int _g221 = 0;
HXDLIN( 516)									while((_g221 < keys13->length)){
HXLINE( 516)										int key221 = keys13->__get(_g221);
HXDLIN( 516)										_g221 = (_g221 + 1);
HXDLIN( 516)										action221->addKey(key221,state221);
            									}
            								}
HXDLIN( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action222 = this->_upP;
HXDLIN( 516)									int state222 = 2;
HXDLIN( 516)									int _g222 = 0;
HXDLIN( 516)									while((_g222 < keys13->length)){
HXLINE( 516)										int key222 = keys13->__get(_g222);
HXDLIN( 516)										_g222 = (_g222 + 1);
HXDLIN( 516)										action222->addKey(key222,state222);
            									}
            								}
HXDLIN( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action223 = this->_upR;
HXDLIN( 516)									int state223 = -1;
HXDLIN( 516)									int _g223 = 0;
HXDLIN( 516)									while((_g223 < keys13->length)){
HXLINE( 516)										int key223 = keys13->__get(_g223);
HXDLIN( 516)										_g223 = (_g223 + 1);
HXDLIN( 516)										action223->addKey(key223,state223);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action224 = this->_left;
HXDLIN( 516)									int state224 = 1;
HXDLIN( 516)									int _g224 = 0;
HXDLIN( 516)									while((_g224 < keys13->length)){
HXLINE( 516)										int key224 = keys13->__get(_g224);
HXDLIN( 516)										_g224 = (_g224 + 1);
HXDLIN( 516)										action224->addKey(key224,state224);
            									}
            								}
HXDLIN( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action225 = this->_leftP;
HXDLIN( 516)									int state225 = 2;
HXDLIN( 516)									int _g225 = 0;
HXDLIN( 516)									while((_g225 < keys13->length)){
HXLINE( 516)										int key225 = keys13->__get(_g225);
HXDLIN( 516)										_g225 = (_g225 + 1);
HXDLIN( 516)										action225->addKey(key225,state225);
            									}
            								}
HXDLIN( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action226 = this->_leftR;
HXDLIN( 516)									int state226 = -1;
HXDLIN( 516)									int _g226 = 0;
HXDLIN( 516)									while((_g226 < keys13->length)){
HXLINE( 516)										int key226 = keys13->__get(_g226);
HXDLIN( 516)										_g226 = (_g226 + 1);
HXDLIN( 516)										action226->addKey(key226,state226);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action227 = this->_right;
HXDLIN( 516)									int state227 = 1;
HXDLIN( 516)									int _g227 = 0;
HXDLIN( 516)									while((_g227 < keys13->length)){
HXLINE( 516)										int key227 = keys13->__get(_g227);
HXDLIN( 516)										_g227 = (_g227 + 1);
HXDLIN( 516)										action227->addKey(key227,state227);
            									}
            								}
HXDLIN( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action228 = this->_rightP;
HXDLIN( 516)									int state228 = 2;
HXDLIN( 516)									int _g228 = 0;
HXDLIN( 516)									while((_g228 < keys13->length)){
HXLINE( 516)										int key228 = keys13->__get(_g228);
HXDLIN( 516)										_g228 = (_g228 + 1);
HXDLIN( 516)										action228->addKey(key228,state228);
            									}
            								}
HXDLIN( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action229 = this->_rightR;
HXDLIN( 516)									int state229 = -1;
HXDLIN( 516)									int _g229 = 0;
HXDLIN( 516)									while((_g229 < keys13->length)){
HXLINE( 516)										int key229 = keys13->__get(_g229);
HXDLIN( 516)										_g229 = (_g229 + 1);
HXDLIN( 516)										action229->addKey(key229,state229);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action230 = this->_down;
HXDLIN( 516)									int state230 = 1;
HXDLIN( 516)									int _g230 = 0;
HXDLIN( 516)									while((_g230 < keys13->length)){
HXLINE( 516)										int key230 = keys13->__get(_g230);
HXDLIN( 516)										_g230 = (_g230 + 1);
HXDLIN( 516)										action230->addKey(key230,state230);
            									}
            								}
HXDLIN( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action231 = this->_downP;
HXDLIN( 516)									int state231 = 2;
HXDLIN( 516)									int _g231 = 0;
HXDLIN( 516)									while((_g231 < keys13->length)){
HXLINE( 516)										int key231 = keys13->__get(_g231);
HXDLIN( 516)										_g231 = (_g231 + 1);
HXDLIN( 516)										action231->addKey(key231,state231);
            									}
            								}
HXDLIN( 516)								{
HXLINE( 516)									 ::flixel::input::actions::FlxActionDigital action232 = this->_downR;
HXDLIN( 516)									int state232 = -1;
HXDLIN( 516)									int _g232 = 0;
HXDLIN( 516)									while((_g232 < keys13->length)){
HXLINE( 516)										int key232 = keys13->__get(_g232);
HXDLIN( 516)										_g232 = (_g232 + 1);
HXDLIN( 516)										action232->addKey(key232,state232);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 516)								 ::flixel::input::actions::FlxActionDigital action233 = this->_reset;
HXDLIN( 516)								int state233 = 2;
HXDLIN( 516)								int _g233 = 0;
HXDLIN( 516)								while((_g233 < keys13->length)){
HXLINE( 516)									int key233 = keys13->__get(_g233);
HXDLIN( 516)									_g233 = (_g233 + 1);
HXDLIN( 516)									action233->addKey(key233,state233);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 516)								 ::flixel::input::actions::FlxActionDigital action234 = this->_accept;
HXDLIN( 516)								int state234 = 2;
HXDLIN( 516)								int _g234 = 0;
HXDLIN( 516)								while((_g234 < keys13->length)){
HXLINE( 516)									int key234 = keys13->__get(_g234);
HXDLIN( 516)									_g234 = (_g234 + 1);
HXDLIN( 516)									action234->addKey(key234,state234);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 516)								 ::flixel::input::actions::FlxActionDigital action235 = this->_back;
HXDLIN( 516)								int state235 = 2;
HXDLIN( 516)								int _g235 = 0;
HXDLIN( 516)								while((_g235 < keys13->length)){
HXLINE( 516)									int key235 = keys13->__get(_g235);
HXDLIN( 516)									_g235 = (_g235 + 1);
HXDLIN( 516)									action235->addKey(key235,state235);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 516)								 ::flixel::input::actions::FlxActionDigital action236 = this->_pause;
HXDLIN( 516)								int state236 = 2;
HXDLIN( 516)								int _g236 = 0;
HXDLIN( 516)								while((_g236 < keys13->length)){
HXLINE( 516)									int key236 = keys13->__get(_g236);
HXDLIN( 516)									_g236 = (_g236 + 1);
HXDLIN( 516)									action236->addKey(key236,state236);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 516)								 ::flixel::input::actions::FlxActionDigital action237 = this->_cheat;
HXDLIN( 516)								int state237 = 2;
HXDLIN( 516)								int _g237 = 0;
HXDLIN( 516)								while((_g237 < keys13->length)){
HXLINE( 516)									int key237 = keys13->__get(_g237);
HXDLIN( 516)									_g237 = (_g237 + 1);
HXDLIN( 516)									action237->addKey(key237,state237);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 517)					{
HXLINE( 517)						::Array< int > keys14 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_457,1);
HXDLIN( 517)						switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action238 = this->_up;
HXDLIN( 517)									int state238 = 1;
HXDLIN( 517)									int _g238 = 0;
HXDLIN( 517)									while((_g238 < keys14->length)){
HXLINE( 517)										int key238 = keys14->__get(_g238);
HXDLIN( 517)										_g238 = (_g238 + 1);
HXDLIN( 517)										action238->addKey(key238,state238);
            									}
            								}
HXDLIN( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action239 = this->_upP;
HXDLIN( 517)									int state239 = 2;
HXDLIN( 517)									int _g239 = 0;
HXDLIN( 517)									while((_g239 < keys14->length)){
HXLINE( 517)										int key239 = keys14->__get(_g239);
HXDLIN( 517)										_g239 = (_g239 + 1);
HXDLIN( 517)										action239->addKey(key239,state239);
            									}
            								}
HXDLIN( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action240 = this->_upR;
HXDLIN( 517)									int state240 = -1;
HXDLIN( 517)									int _g240 = 0;
HXDLIN( 517)									while((_g240 < keys14->length)){
HXLINE( 517)										int key240 = keys14->__get(_g240);
HXDLIN( 517)										_g240 = (_g240 + 1);
HXDLIN( 517)										action240->addKey(key240,state240);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action241 = this->_left;
HXDLIN( 517)									int state241 = 1;
HXDLIN( 517)									int _g241 = 0;
HXDLIN( 517)									while((_g241 < keys14->length)){
HXLINE( 517)										int key241 = keys14->__get(_g241);
HXDLIN( 517)										_g241 = (_g241 + 1);
HXDLIN( 517)										action241->addKey(key241,state241);
            									}
            								}
HXDLIN( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action242 = this->_leftP;
HXDLIN( 517)									int state242 = 2;
HXDLIN( 517)									int _g242 = 0;
HXDLIN( 517)									while((_g242 < keys14->length)){
HXLINE( 517)										int key242 = keys14->__get(_g242);
HXDLIN( 517)										_g242 = (_g242 + 1);
HXDLIN( 517)										action242->addKey(key242,state242);
            									}
            								}
HXDLIN( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action243 = this->_leftR;
HXDLIN( 517)									int state243 = -1;
HXDLIN( 517)									int _g243 = 0;
HXDLIN( 517)									while((_g243 < keys14->length)){
HXLINE( 517)										int key243 = keys14->__get(_g243);
HXDLIN( 517)										_g243 = (_g243 + 1);
HXDLIN( 517)										action243->addKey(key243,state243);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action244 = this->_right;
HXDLIN( 517)									int state244 = 1;
HXDLIN( 517)									int _g244 = 0;
HXDLIN( 517)									while((_g244 < keys14->length)){
HXLINE( 517)										int key244 = keys14->__get(_g244);
HXDLIN( 517)										_g244 = (_g244 + 1);
HXDLIN( 517)										action244->addKey(key244,state244);
            									}
            								}
HXDLIN( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action245 = this->_rightP;
HXDLIN( 517)									int state245 = 2;
HXDLIN( 517)									int _g245 = 0;
HXDLIN( 517)									while((_g245 < keys14->length)){
HXLINE( 517)										int key245 = keys14->__get(_g245);
HXDLIN( 517)										_g245 = (_g245 + 1);
HXDLIN( 517)										action245->addKey(key245,state245);
            									}
            								}
HXDLIN( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action246 = this->_rightR;
HXDLIN( 517)									int state246 = -1;
HXDLIN( 517)									int _g246 = 0;
HXDLIN( 517)									while((_g246 < keys14->length)){
HXLINE( 517)										int key246 = keys14->__get(_g246);
HXDLIN( 517)										_g246 = (_g246 + 1);
HXDLIN( 517)										action246->addKey(key246,state246);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action247 = this->_down;
HXDLIN( 517)									int state247 = 1;
HXDLIN( 517)									int _g247 = 0;
HXDLIN( 517)									while((_g247 < keys14->length)){
HXLINE( 517)										int key247 = keys14->__get(_g247);
HXDLIN( 517)										_g247 = (_g247 + 1);
HXDLIN( 517)										action247->addKey(key247,state247);
            									}
            								}
HXDLIN( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action248 = this->_downP;
HXDLIN( 517)									int state248 = 2;
HXDLIN( 517)									int _g248 = 0;
HXDLIN( 517)									while((_g248 < keys14->length)){
HXLINE( 517)										int key248 = keys14->__get(_g248);
HXDLIN( 517)										_g248 = (_g248 + 1);
HXDLIN( 517)										action248->addKey(key248,state248);
            									}
            								}
HXDLIN( 517)								{
HXLINE( 517)									 ::flixel::input::actions::FlxActionDigital action249 = this->_downR;
HXDLIN( 517)									int state249 = -1;
HXDLIN( 517)									int _g249 = 0;
HXDLIN( 517)									while((_g249 < keys14->length)){
HXLINE( 517)										int key249 = keys14->__get(_g249);
HXDLIN( 517)										_g249 = (_g249 + 1);
HXDLIN( 517)										action249->addKey(key249,state249);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 517)								 ::flixel::input::actions::FlxActionDigital action250 = this->_reset;
HXDLIN( 517)								int state250 = 2;
HXDLIN( 517)								int _g250 = 0;
HXDLIN( 517)								while((_g250 < keys14->length)){
HXLINE( 517)									int key250 = keys14->__get(_g250);
HXDLIN( 517)									_g250 = (_g250 + 1);
HXDLIN( 517)									action250->addKey(key250,state250);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 517)								 ::flixel::input::actions::FlxActionDigital action251 = this->_accept;
HXDLIN( 517)								int state251 = 2;
HXDLIN( 517)								int _g251 = 0;
HXDLIN( 517)								while((_g251 < keys14->length)){
HXLINE( 517)									int key251 = keys14->__get(_g251);
HXDLIN( 517)									_g251 = (_g251 + 1);
HXDLIN( 517)									action251->addKey(key251,state251);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 517)								 ::flixel::input::actions::FlxActionDigital action252 = this->_back;
HXDLIN( 517)								int state252 = 2;
HXDLIN( 517)								int _g252 = 0;
HXDLIN( 517)								while((_g252 < keys14->length)){
HXLINE( 517)									int key252 = keys14->__get(_g252);
HXDLIN( 517)									_g252 = (_g252 + 1);
HXDLIN( 517)									action252->addKey(key252,state252);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 517)								 ::flixel::input::actions::FlxActionDigital action253 = this->_pause;
HXDLIN( 517)								int state253 = 2;
HXDLIN( 517)								int _g253 = 0;
HXDLIN( 517)								while((_g253 < keys14->length)){
HXLINE( 517)									int key253 = keys14->__get(_g253);
HXDLIN( 517)									_g253 = (_g253 + 1);
HXDLIN( 517)									action253->addKey(key253,state253);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 517)								 ::flixel::input::actions::FlxActionDigital action254 = this->_cheat;
HXDLIN( 517)								int state254 = 2;
HXDLIN( 517)								int _g254 = 0;
HXDLIN( 517)								while((_g254 < keys14->length)){
HXLINE( 517)									int key254 = keys14->__get(_g254);
HXDLIN( 517)									_g254 = (_g254 + 1);
HXDLIN( 517)									action254->addKey(key254,state254);
            								}
            							}
            							break;
            						}
            					}
            				}
            				else {
HXLINE( 519)					{
HXLINE( 519)						::Array< int > keys15 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_458,1);
HXDLIN( 519)						switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action255 = this->_up;
HXDLIN( 519)									int state255 = 1;
HXDLIN( 519)									int _g255 = 0;
HXDLIN( 519)									while((_g255 < keys15->length)){
HXLINE( 519)										int key255 = keys15->__get(_g255);
HXDLIN( 519)										_g255 = (_g255 + 1);
HXDLIN( 519)										action255->addKey(key255,state255);
            									}
            								}
HXDLIN( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action256 = this->_upP;
HXDLIN( 519)									int state256 = 2;
HXDLIN( 519)									int _g256 = 0;
HXDLIN( 519)									while((_g256 < keys15->length)){
HXLINE( 519)										int key256 = keys15->__get(_g256);
HXDLIN( 519)										_g256 = (_g256 + 1);
HXDLIN( 519)										action256->addKey(key256,state256);
            									}
            								}
HXDLIN( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action257 = this->_upR;
HXDLIN( 519)									int state257 = -1;
HXDLIN( 519)									int _g257 = 0;
HXDLIN( 519)									while((_g257 < keys15->length)){
HXLINE( 519)										int key257 = keys15->__get(_g257);
HXDLIN( 519)										_g257 = (_g257 + 1);
HXDLIN( 519)										action257->addKey(key257,state257);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action258 = this->_left;
HXDLIN( 519)									int state258 = 1;
HXDLIN( 519)									int _g258 = 0;
HXDLIN( 519)									while((_g258 < keys15->length)){
HXLINE( 519)										int key258 = keys15->__get(_g258);
HXDLIN( 519)										_g258 = (_g258 + 1);
HXDLIN( 519)										action258->addKey(key258,state258);
            									}
            								}
HXDLIN( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action259 = this->_leftP;
HXDLIN( 519)									int state259 = 2;
HXDLIN( 519)									int _g259 = 0;
HXDLIN( 519)									while((_g259 < keys15->length)){
HXLINE( 519)										int key259 = keys15->__get(_g259);
HXDLIN( 519)										_g259 = (_g259 + 1);
HXDLIN( 519)										action259->addKey(key259,state259);
            									}
            								}
HXDLIN( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action260 = this->_leftR;
HXDLIN( 519)									int state260 = -1;
HXDLIN( 519)									int _g260 = 0;
HXDLIN( 519)									while((_g260 < keys15->length)){
HXLINE( 519)										int key260 = keys15->__get(_g260);
HXDLIN( 519)										_g260 = (_g260 + 1);
HXDLIN( 519)										action260->addKey(key260,state260);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action261 = this->_right;
HXDLIN( 519)									int state261 = 1;
HXDLIN( 519)									int _g261 = 0;
HXDLIN( 519)									while((_g261 < keys15->length)){
HXLINE( 519)										int key261 = keys15->__get(_g261);
HXDLIN( 519)										_g261 = (_g261 + 1);
HXDLIN( 519)										action261->addKey(key261,state261);
            									}
            								}
HXDLIN( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action262 = this->_rightP;
HXDLIN( 519)									int state262 = 2;
HXDLIN( 519)									int _g262 = 0;
HXDLIN( 519)									while((_g262 < keys15->length)){
HXLINE( 519)										int key262 = keys15->__get(_g262);
HXDLIN( 519)										_g262 = (_g262 + 1);
HXDLIN( 519)										action262->addKey(key262,state262);
            									}
            								}
HXDLIN( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action263 = this->_rightR;
HXDLIN( 519)									int state263 = -1;
HXDLIN( 519)									int _g263 = 0;
HXDLIN( 519)									while((_g263 < keys15->length)){
HXLINE( 519)										int key263 = keys15->__get(_g263);
HXDLIN( 519)										_g263 = (_g263 + 1);
HXDLIN( 519)										action263->addKey(key263,state263);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action264 = this->_down;
HXDLIN( 519)									int state264 = 1;
HXDLIN( 519)									int _g264 = 0;
HXDLIN( 519)									while((_g264 < keys15->length)){
HXLINE( 519)										int key264 = keys15->__get(_g264);
HXDLIN( 519)										_g264 = (_g264 + 1);
HXDLIN( 519)										action264->addKey(key264,state264);
            									}
            								}
HXDLIN( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action265 = this->_downP;
HXDLIN( 519)									int state265 = 2;
HXDLIN( 519)									int _g265 = 0;
HXDLIN( 519)									while((_g265 < keys15->length)){
HXLINE( 519)										int key265 = keys15->__get(_g265);
HXDLIN( 519)										_g265 = (_g265 + 1);
HXDLIN( 519)										action265->addKey(key265,state265);
            									}
            								}
HXDLIN( 519)								{
HXLINE( 519)									 ::flixel::input::actions::FlxActionDigital action266 = this->_downR;
HXDLIN( 519)									int state266 = -1;
HXDLIN( 519)									int _g266 = 0;
HXDLIN( 519)									while((_g266 < keys15->length)){
HXLINE( 519)										int key266 = keys15->__get(_g266);
HXDLIN( 519)										_g266 = (_g266 + 1);
HXDLIN( 519)										action266->addKey(key266,state266);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 519)								 ::flixel::input::actions::FlxActionDigital action267 = this->_reset;
HXDLIN( 519)								int state267 = 2;
HXDLIN( 519)								int _g267 = 0;
HXDLIN( 519)								while((_g267 < keys15->length)){
HXLINE( 519)									int key267 = keys15->__get(_g267);
HXDLIN( 519)									_g267 = (_g267 + 1);
HXDLIN( 519)									action267->addKey(key267,state267);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 519)								 ::flixel::input::actions::FlxActionDigital action268 = this->_accept;
HXDLIN( 519)								int state268 = 2;
HXDLIN( 519)								int _g268 = 0;
HXDLIN( 519)								while((_g268 < keys15->length)){
HXLINE( 519)									int key268 = keys15->__get(_g268);
HXDLIN( 519)									_g268 = (_g268 + 1);
HXDLIN( 519)									action268->addKey(key268,state268);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 519)								 ::flixel::input::actions::FlxActionDigital action269 = this->_back;
HXDLIN( 519)								int state269 = 2;
HXDLIN( 519)								int _g269 = 0;
HXDLIN( 519)								while((_g269 < keys15->length)){
HXLINE( 519)									int key269 = keys15->__get(_g269);
HXDLIN( 519)									_g269 = (_g269 + 1);
HXDLIN( 519)									action269->addKey(key269,state269);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 519)								 ::flixel::input::actions::FlxActionDigital action270 = this->_pause;
HXDLIN( 519)								int state270 = 2;
HXDLIN( 519)								int _g270 = 0;
HXDLIN( 519)								while((_g270 < keys15->length)){
HXLINE( 519)									int key270 = keys15->__get(_g270);
HXDLIN( 519)									_g270 = (_g270 + 1);
HXDLIN( 519)									action270->addKey(key270,state270);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 519)								 ::flixel::input::actions::FlxActionDigital action271 = this->_cheat;
HXDLIN( 519)								int state271 = 2;
HXDLIN( 519)								int _g271 = 0;
HXDLIN( 519)								while((_g271 < keys15->length)){
HXLINE( 519)									int key271 = keys15->__get(_g271);
HXDLIN( 519)									_g271 = (_g271 + 1);
HXDLIN( 519)									action271->addKey(key271,state271);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 520)					{
HXLINE( 520)						::Array< int > keys16 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_459,1);
HXDLIN( 520)						switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action272 = this->_up;
HXDLIN( 520)									int state272 = 1;
HXDLIN( 520)									int _g272 = 0;
HXDLIN( 520)									while((_g272 < keys16->length)){
HXLINE( 520)										int key272 = keys16->__get(_g272);
HXDLIN( 520)										_g272 = (_g272 + 1);
HXDLIN( 520)										action272->addKey(key272,state272);
            									}
            								}
HXDLIN( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action273 = this->_upP;
HXDLIN( 520)									int state273 = 2;
HXDLIN( 520)									int _g273 = 0;
HXDLIN( 520)									while((_g273 < keys16->length)){
HXLINE( 520)										int key273 = keys16->__get(_g273);
HXDLIN( 520)										_g273 = (_g273 + 1);
HXDLIN( 520)										action273->addKey(key273,state273);
            									}
            								}
HXDLIN( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action274 = this->_upR;
HXDLIN( 520)									int state274 = -1;
HXDLIN( 520)									int _g274 = 0;
HXDLIN( 520)									while((_g274 < keys16->length)){
HXLINE( 520)										int key274 = keys16->__get(_g274);
HXDLIN( 520)										_g274 = (_g274 + 1);
HXDLIN( 520)										action274->addKey(key274,state274);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action275 = this->_left;
HXDLIN( 520)									int state275 = 1;
HXDLIN( 520)									int _g275 = 0;
HXDLIN( 520)									while((_g275 < keys16->length)){
HXLINE( 520)										int key275 = keys16->__get(_g275);
HXDLIN( 520)										_g275 = (_g275 + 1);
HXDLIN( 520)										action275->addKey(key275,state275);
            									}
            								}
HXDLIN( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action276 = this->_leftP;
HXDLIN( 520)									int state276 = 2;
HXDLIN( 520)									int _g276 = 0;
HXDLIN( 520)									while((_g276 < keys16->length)){
HXLINE( 520)										int key276 = keys16->__get(_g276);
HXDLIN( 520)										_g276 = (_g276 + 1);
HXDLIN( 520)										action276->addKey(key276,state276);
            									}
            								}
HXDLIN( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action277 = this->_leftR;
HXDLIN( 520)									int state277 = -1;
HXDLIN( 520)									int _g277 = 0;
HXDLIN( 520)									while((_g277 < keys16->length)){
HXLINE( 520)										int key277 = keys16->__get(_g277);
HXDLIN( 520)										_g277 = (_g277 + 1);
HXDLIN( 520)										action277->addKey(key277,state277);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action278 = this->_right;
HXDLIN( 520)									int state278 = 1;
HXDLIN( 520)									int _g278 = 0;
HXDLIN( 520)									while((_g278 < keys16->length)){
HXLINE( 520)										int key278 = keys16->__get(_g278);
HXDLIN( 520)										_g278 = (_g278 + 1);
HXDLIN( 520)										action278->addKey(key278,state278);
            									}
            								}
HXDLIN( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action279 = this->_rightP;
HXDLIN( 520)									int state279 = 2;
HXDLIN( 520)									int _g279 = 0;
HXDLIN( 520)									while((_g279 < keys16->length)){
HXLINE( 520)										int key279 = keys16->__get(_g279);
HXDLIN( 520)										_g279 = (_g279 + 1);
HXDLIN( 520)										action279->addKey(key279,state279);
            									}
            								}
HXDLIN( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action280 = this->_rightR;
HXDLIN( 520)									int state280 = -1;
HXDLIN( 520)									int _g280 = 0;
HXDLIN( 520)									while((_g280 < keys16->length)){
HXLINE( 520)										int key280 = keys16->__get(_g280);
HXDLIN( 520)										_g280 = (_g280 + 1);
HXDLIN( 520)										action280->addKey(key280,state280);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action281 = this->_down;
HXDLIN( 520)									int state281 = 1;
HXDLIN( 520)									int _g281 = 0;
HXDLIN( 520)									while((_g281 < keys16->length)){
HXLINE( 520)										int key281 = keys16->__get(_g281);
HXDLIN( 520)										_g281 = (_g281 + 1);
HXDLIN( 520)										action281->addKey(key281,state281);
            									}
            								}
HXDLIN( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action282 = this->_downP;
HXDLIN( 520)									int state282 = 2;
HXDLIN( 520)									int _g282 = 0;
HXDLIN( 520)									while((_g282 < keys16->length)){
HXLINE( 520)										int key282 = keys16->__get(_g282);
HXDLIN( 520)										_g282 = (_g282 + 1);
HXDLIN( 520)										action282->addKey(key282,state282);
            									}
            								}
HXDLIN( 520)								{
HXLINE( 520)									 ::flixel::input::actions::FlxActionDigital action283 = this->_downR;
HXDLIN( 520)									int state283 = -1;
HXDLIN( 520)									int _g283 = 0;
HXDLIN( 520)									while((_g283 < keys16->length)){
HXLINE( 520)										int key283 = keys16->__get(_g283);
HXDLIN( 520)										_g283 = (_g283 + 1);
HXDLIN( 520)										action283->addKey(key283,state283);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 520)								 ::flixel::input::actions::FlxActionDigital action284 = this->_reset;
HXDLIN( 520)								int state284 = 2;
HXDLIN( 520)								int _g284 = 0;
HXDLIN( 520)								while((_g284 < keys16->length)){
HXLINE( 520)									int key284 = keys16->__get(_g284);
HXDLIN( 520)									_g284 = (_g284 + 1);
HXDLIN( 520)									action284->addKey(key284,state284);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 520)								 ::flixel::input::actions::FlxActionDigital action285 = this->_accept;
HXDLIN( 520)								int state285 = 2;
HXDLIN( 520)								int _g285 = 0;
HXDLIN( 520)								while((_g285 < keys16->length)){
HXLINE( 520)									int key285 = keys16->__get(_g285);
HXDLIN( 520)									_g285 = (_g285 + 1);
HXDLIN( 520)									action285->addKey(key285,state285);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 520)								 ::flixel::input::actions::FlxActionDigital action286 = this->_back;
HXDLIN( 520)								int state286 = 2;
HXDLIN( 520)								int _g286 = 0;
HXDLIN( 520)								while((_g286 < keys16->length)){
HXLINE( 520)									int key286 = keys16->__get(_g286);
HXDLIN( 520)									_g286 = (_g286 + 1);
HXDLIN( 520)									action286->addKey(key286,state286);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 520)								 ::flixel::input::actions::FlxActionDigital action287 = this->_pause;
HXDLIN( 520)								int state287 = 2;
HXDLIN( 520)								int _g287 = 0;
HXDLIN( 520)								while((_g287 < keys16->length)){
HXLINE( 520)									int key287 = keys16->__get(_g287);
HXDLIN( 520)									_g287 = (_g287 + 1);
HXDLIN( 520)									action287->addKey(key287,state287);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 520)								 ::flixel::input::actions::FlxActionDigital action288 = this->_cheat;
HXDLIN( 520)								int state288 = 2;
HXDLIN( 520)								int _g288 = 0;
HXDLIN( 520)								while((_g288 < keys16->length)){
HXLINE( 520)									int key288 = keys16->__get(_g288);
HXDLIN( 520)									_g288 = (_g288 + 1);
HXDLIN( 520)									action288->addKey(key288,state288);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 521)					{
HXLINE( 521)						::Array< int > keys17 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_460,1);
HXDLIN( 521)						switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action289 = this->_up;
HXDLIN( 521)									int state289 = 1;
HXDLIN( 521)									int _g289 = 0;
HXDLIN( 521)									while((_g289 < keys17->length)){
HXLINE( 521)										int key289 = keys17->__get(_g289);
HXDLIN( 521)										_g289 = (_g289 + 1);
HXDLIN( 521)										action289->addKey(key289,state289);
            									}
            								}
HXDLIN( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action290 = this->_upP;
HXDLIN( 521)									int state290 = 2;
HXDLIN( 521)									int _g290 = 0;
HXDLIN( 521)									while((_g290 < keys17->length)){
HXLINE( 521)										int key290 = keys17->__get(_g290);
HXDLIN( 521)										_g290 = (_g290 + 1);
HXDLIN( 521)										action290->addKey(key290,state290);
            									}
            								}
HXDLIN( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action291 = this->_upR;
HXDLIN( 521)									int state291 = -1;
HXDLIN( 521)									int _g291 = 0;
HXDLIN( 521)									while((_g291 < keys17->length)){
HXLINE( 521)										int key291 = keys17->__get(_g291);
HXDLIN( 521)										_g291 = (_g291 + 1);
HXDLIN( 521)										action291->addKey(key291,state291);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action292 = this->_left;
HXDLIN( 521)									int state292 = 1;
HXDLIN( 521)									int _g292 = 0;
HXDLIN( 521)									while((_g292 < keys17->length)){
HXLINE( 521)										int key292 = keys17->__get(_g292);
HXDLIN( 521)										_g292 = (_g292 + 1);
HXDLIN( 521)										action292->addKey(key292,state292);
            									}
            								}
HXDLIN( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action293 = this->_leftP;
HXDLIN( 521)									int state293 = 2;
HXDLIN( 521)									int _g293 = 0;
HXDLIN( 521)									while((_g293 < keys17->length)){
HXLINE( 521)										int key293 = keys17->__get(_g293);
HXDLIN( 521)										_g293 = (_g293 + 1);
HXDLIN( 521)										action293->addKey(key293,state293);
            									}
            								}
HXDLIN( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action294 = this->_leftR;
HXDLIN( 521)									int state294 = -1;
HXDLIN( 521)									int _g294 = 0;
HXDLIN( 521)									while((_g294 < keys17->length)){
HXLINE( 521)										int key294 = keys17->__get(_g294);
HXDLIN( 521)										_g294 = (_g294 + 1);
HXDLIN( 521)										action294->addKey(key294,state294);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action295 = this->_right;
HXDLIN( 521)									int state295 = 1;
HXDLIN( 521)									int _g295 = 0;
HXDLIN( 521)									while((_g295 < keys17->length)){
HXLINE( 521)										int key295 = keys17->__get(_g295);
HXDLIN( 521)										_g295 = (_g295 + 1);
HXDLIN( 521)										action295->addKey(key295,state295);
            									}
            								}
HXDLIN( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action296 = this->_rightP;
HXDLIN( 521)									int state296 = 2;
HXDLIN( 521)									int _g296 = 0;
HXDLIN( 521)									while((_g296 < keys17->length)){
HXLINE( 521)										int key296 = keys17->__get(_g296);
HXDLIN( 521)										_g296 = (_g296 + 1);
HXDLIN( 521)										action296->addKey(key296,state296);
            									}
            								}
HXDLIN( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action297 = this->_rightR;
HXDLIN( 521)									int state297 = -1;
HXDLIN( 521)									int _g297 = 0;
HXDLIN( 521)									while((_g297 < keys17->length)){
HXLINE( 521)										int key297 = keys17->__get(_g297);
HXDLIN( 521)										_g297 = (_g297 + 1);
HXDLIN( 521)										action297->addKey(key297,state297);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action298 = this->_down;
HXDLIN( 521)									int state298 = 1;
HXDLIN( 521)									int _g298 = 0;
HXDLIN( 521)									while((_g298 < keys17->length)){
HXLINE( 521)										int key298 = keys17->__get(_g298);
HXDLIN( 521)										_g298 = (_g298 + 1);
HXDLIN( 521)										action298->addKey(key298,state298);
            									}
            								}
HXDLIN( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action299 = this->_downP;
HXDLIN( 521)									int state299 = 2;
HXDLIN( 521)									int _g299 = 0;
HXDLIN( 521)									while((_g299 < keys17->length)){
HXLINE( 521)										int key299 = keys17->__get(_g299);
HXDLIN( 521)										_g299 = (_g299 + 1);
HXDLIN( 521)										action299->addKey(key299,state299);
            									}
            								}
HXDLIN( 521)								{
HXLINE( 521)									 ::flixel::input::actions::FlxActionDigital action300 = this->_downR;
HXDLIN( 521)									int state300 = -1;
HXDLIN( 521)									int _g300 = 0;
HXDLIN( 521)									while((_g300 < keys17->length)){
HXLINE( 521)										int key300 = keys17->__get(_g300);
HXDLIN( 521)										_g300 = (_g300 + 1);
HXDLIN( 521)										action300->addKey(key300,state300);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action301 = this->_reset;
HXDLIN( 521)								int state301 = 2;
HXDLIN( 521)								int _g301 = 0;
HXDLIN( 521)								while((_g301 < keys17->length)){
HXLINE( 521)									int key301 = keys17->__get(_g301);
HXDLIN( 521)									_g301 = (_g301 + 1);
HXDLIN( 521)									action301->addKey(key301,state301);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action302 = this->_accept;
HXDLIN( 521)								int state302 = 2;
HXDLIN( 521)								int _g302 = 0;
HXDLIN( 521)								while((_g302 < keys17->length)){
HXLINE( 521)									int key302 = keys17->__get(_g302);
HXDLIN( 521)									_g302 = (_g302 + 1);
HXDLIN( 521)									action302->addKey(key302,state302);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action303 = this->_back;
HXDLIN( 521)								int state303 = 2;
HXDLIN( 521)								int _g303 = 0;
HXDLIN( 521)								while((_g303 < keys17->length)){
HXLINE( 521)									int key303 = keys17->__get(_g303);
HXDLIN( 521)									_g303 = (_g303 + 1);
HXDLIN( 521)									action303->addKey(key303,state303);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action304 = this->_pause;
HXDLIN( 521)								int state304 = 2;
HXDLIN( 521)								int _g304 = 0;
HXDLIN( 521)								while((_g304 < keys17->length)){
HXLINE( 521)									int key304 = keys17->__get(_g304);
HXDLIN( 521)									_g304 = (_g304 + 1);
HXDLIN( 521)									action304->addKey(key304,state304);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action305 = this->_cheat;
HXDLIN( 521)								int state305 = 2;
HXDLIN( 521)								int _g305 = 0;
HXDLIN( 521)								while((_g305 < keys17->length)){
HXLINE( 521)									int key305 = keys17->__get(_g305);
HXDLIN( 521)									_g305 = (_g305 + 1);
HXDLIN( 521)									action305->addKey(key305,state305);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 522)					{
HXLINE( 522)						::Array< int > keys18 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_461,1);
HXDLIN( 522)						switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action306 = this->_up;
HXDLIN( 522)									int state306 = 1;
HXDLIN( 522)									int _g306 = 0;
HXDLIN( 522)									while((_g306 < keys18->length)){
HXLINE( 522)										int key306 = keys18->__get(_g306);
HXDLIN( 522)										_g306 = (_g306 + 1);
HXDLIN( 522)										action306->addKey(key306,state306);
            									}
            								}
HXDLIN( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action307 = this->_upP;
HXDLIN( 522)									int state307 = 2;
HXDLIN( 522)									int _g307 = 0;
HXDLIN( 522)									while((_g307 < keys18->length)){
HXLINE( 522)										int key307 = keys18->__get(_g307);
HXDLIN( 522)										_g307 = (_g307 + 1);
HXDLIN( 522)										action307->addKey(key307,state307);
            									}
            								}
HXDLIN( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action308 = this->_upR;
HXDLIN( 522)									int state308 = -1;
HXDLIN( 522)									int _g308 = 0;
HXDLIN( 522)									while((_g308 < keys18->length)){
HXLINE( 522)										int key308 = keys18->__get(_g308);
HXDLIN( 522)										_g308 = (_g308 + 1);
HXDLIN( 522)										action308->addKey(key308,state308);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action309 = this->_left;
HXDLIN( 522)									int state309 = 1;
HXDLIN( 522)									int _g309 = 0;
HXDLIN( 522)									while((_g309 < keys18->length)){
HXLINE( 522)										int key309 = keys18->__get(_g309);
HXDLIN( 522)										_g309 = (_g309 + 1);
HXDLIN( 522)										action309->addKey(key309,state309);
            									}
            								}
HXDLIN( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action310 = this->_leftP;
HXDLIN( 522)									int state310 = 2;
HXDLIN( 522)									int _g310 = 0;
HXDLIN( 522)									while((_g310 < keys18->length)){
HXLINE( 522)										int key310 = keys18->__get(_g310);
HXDLIN( 522)										_g310 = (_g310 + 1);
HXDLIN( 522)										action310->addKey(key310,state310);
            									}
            								}
HXDLIN( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action311 = this->_leftR;
HXDLIN( 522)									int state311 = -1;
HXDLIN( 522)									int _g311 = 0;
HXDLIN( 522)									while((_g311 < keys18->length)){
HXLINE( 522)										int key311 = keys18->__get(_g311);
HXDLIN( 522)										_g311 = (_g311 + 1);
HXDLIN( 522)										action311->addKey(key311,state311);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action312 = this->_right;
HXDLIN( 522)									int state312 = 1;
HXDLIN( 522)									int _g312 = 0;
HXDLIN( 522)									while((_g312 < keys18->length)){
HXLINE( 522)										int key312 = keys18->__get(_g312);
HXDLIN( 522)										_g312 = (_g312 + 1);
HXDLIN( 522)										action312->addKey(key312,state312);
            									}
            								}
HXDLIN( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action313 = this->_rightP;
HXDLIN( 522)									int state313 = 2;
HXDLIN( 522)									int _g313 = 0;
HXDLIN( 522)									while((_g313 < keys18->length)){
HXLINE( 522)										int key313 = keys18->__get(_g313);
HXDLIN( 522)										_g313 = (_g313 + 1);
HXDLIN( 522)										action313->addKey(key313,state313);
            									}
            								}
HXDLIN( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action314 = this->_rightR;
HXDLIN( 522)									int state314 = -1;
HXDLIN( 522)									int _g314 = 0;
HXDLIN( 522)									while((_g314 < keys18->length)){
HXLINE( 522)										int key314 = keys18->__get(_g314);
HXDLIN( 522)										_g314 = (_g314 + 1);
HXDLIN( 522)										action314->addKey(key314,state314);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action315 = this->_down;
HXDLIN( 522)									int state315 = 1;
HXDLIN( 522)									int _g315 = 0;
HXDLIN( 522)									while((_g315 < keys18->length)){
HXLINE( 522)										int key315 = keys18->__get(_g315);
HXDLIN( 522)										_g315 = (_g315 + 1);
HXDLIN( 522)										action315->addKey(key315,state315);
            									}
            								}
HXDLIN( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action316 = this->_downP;
HXDLIN( 522)									int state316 = 2;
HXDLIN( 522)									int _g316 = 0;
HXDLIN( 522)									while((_g316 < keys18->length)){
HXLINE( 522)										int key316 = keys18->__get(_g316);
HXDLIN( 522)										_g316 = (_g316 + 1);
HXDLIN( 522)										action316->addKey(key316,state316);
            									}
            								}
HXDLIN( 522)								{
HXLINE( 522)									 ::flixel::input::actions::FlxActionDigital action317 = this->_downR;
HXDLIN( 522)									int state317 = -1;
HXDLIN( 522)									int _g317 = 0;
HXDLIN( 522)									while((_g317 < keys18->length)){
HXLINE( 522)										int key317 = keys18->__get(_g317);
HXDLIN( 522)										_g317 = (_g317 + 1);
HXDLIN( 522)										action317->addKey(key317,state317);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action318 = this->_reset;
HXDLIN( 522)								int state318 = 2;
HXDLIN( 522)								int _g318 = 0;
HXDLIN( 522)								while((_g318 < keys18->length)){
HXLINE( 522)									int key318 = keys18->__get(_g318);
HXDLIN( 522)									_g318 = (_g318 + 1);
HXDLIN( 522)									action318->addKey(key318,state318);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action319 = this->_accept;
HXDLIN( 522)								int state319 = 2;
HXDLIN( 522)								int _g319 = 0;
HXDLIN( 522)								while((_g319 < keys18->length)){
HXLINE( 522)									int key319 = keys18->__get(_g319);
HXDLIN( 522)									_g319 = (_g319 + 1);
HXDLIN( 522)									action319->addKey(key319,state319);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action320 = this->_back;
HXDLIN( 522)								int state320 = 2;
HXDLIN( 522)								int _g320 = 0;
HXDLIN( 522)								while((_g320 < keys18->length)){
HXLINE( 522)									int key320 = keys18->__get(_g320);
HXDLIN( 522)									_g320 = (_g320 + 1);
HXDLIN( 522)									action320->addKey(key320,state320);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action321 = this->_pause;
HXDLIN( 522)								int state321 = 2;
HXDLIN( 522)								int _g321 = 0;
HXDLIN( 522)								while((_g321 < keys18->length)){
HXLINE( 522)									int key321 = keys18->__get(_g321);
HXDLIN( 522)									_g321 = (_g321 + 1);
HXDLIN( 522)									action321->addKey(key321,state321);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action322 = this->_cheat;
HXDLIN( 522)								int state322 = 2;
HXDLIN( 522)								int _g322 = 0;
HXDLIN( 522)								while((_g322 < keys18->length)){
HXLINE( 522)									int key322 = keys18->__get(_g322);
HXDLIN( 522)									_g322 = (_g322 + 1);
HXDLIN( 522)									action322->addKey(key322,state322);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 523)					{
HXLINE( 523)						::Array< int > keys19 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_462,1);
HXDLIN( 523)						switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action323 = this->_up;
HXDLIN( 523)									int state323 = 1;
HXDLIN( 523)									int _g323 = 0;
HXDLIN( 523)									while((_g323 < keys19->length)){
HXLINE( 523)										int key323 = keys19->__get(_g323);
HXDLIN( 523)										_g323 = (_g323 + 1);
HXDLIN( 523)										action323->addKey(key323,state323);
            									}
            								}
HXDLIN( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action324 = this->_upP;
HXDLIN( 523)									int state324 = 2;
HXDLIN( 523)									int _g324 = 0;
HXDLIN( 523)									while((_g324 < keys19->length)){
HXLINE( 523)										int key324 = keys19->__get(_g324);
HXDLIN( 523)										_g324 = (_g324 + 1);
HXDLIN( 523)										action324->addKey(key324,state324);
            									}
            								}
HXDLIN( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action325 = this->_upR;
HXDLIN( 523)									int state325 = -1;
HXDLIN( 523)									int _g325 = 0;
HXDLIN( 523)									while((_g325 < keys19->length)){
HXLINE( 523)										int key325 = keys19->__get(_g325);
HXDLIN( 523)										_g325 = (_g325 + 1);
HXDLIN( 523)										action325->addKey(key325,state325);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action326 = this->_left;
HXDLIN( 523)									int state326 = 1;
HXDLIN( 523)									int _g326 = 0;
HXDLIN( 523)									while((_g326 < keys19->length)){
HXLINE( 523)										int key326 = keys19->__get(_g326);
HXDLIN( 523)										_g326 = (_g326 + 1);
HXDLIN( 523)										action326->addKey(key326,state326);
            									}
            								}
HXDLIN( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action327 = this->_leftP;
HXDLIN( 523)									int state327 = 2;
HXDLIN( 523)									int _g327 = 0;
HXDLIN( 523)									while((_g327 < keys19->length)){
HXLINE( 523)										int key327 = keys19->__get(_g327);
HXDLIN( 523)										_g327 = (_g327 + 1);
HXDLIN( 523)										action327->addKey(key327,state327);
            									}
            								}
HXDLIN( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action328 = this->_leftR;
HXDLIN( 523)									int state328 = -1;
HXDLIN( 523)									int _g328 = 0;
HXDLIN( 523)									while((_g328 < keys19->length)){
HXLINE( 523)										int key328 = keys19->__get(_g328);
HXDLIN( 523)										_g328 = (_g328 + 1);
HXDLIN( 523)										action328->addKey(key328,state328);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action329 = this->_right;
HXDLIN( 523)									int state329 = 1;
HXDLIN( 523)									int _g329 = 0;
HXDLIN( 523)									while((_g329 < keys19->length)){
HXLINE( 523)										int key329 = keys19->__get(_g329);
HXDLIN( 523)										_g329 = (_g329 + 1);
HXDLIN( 523)										action329->addKey(key329,state329);
            									}
            								}
HXDLIN( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action330 = this->_rightP;
HXDLIN( 523)									int state330 = 2;
HXDLIN( 523)									int _g330 = 0;
HXDLIN( 523)									while((_g330 < keys19->length)){
HXLINE( 523)										int key330 = keys19->__get(_g330);
HXDLIN( 523)										_g330 = (_g330 + 1);
HXDLIN( 523)										action330->addKey(key330,state330);
            									}
            								}
HXDLIN( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action331 = this->_rightR;
HXDLIN( 523)									int state331 = -1;
HXDLIN( 523)									int _g331 = 0;
HXDLIN( 523)									while((_g331 < keys19->length)){
HXLINE( 523)										int key331 = keys19->__get(_g331);
HXDLIN( 523)										_g331 = (_g331 + 1);
HXDLIN( 523)										action331->addKey(key331,state331);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action332 = this->_down;
HXDLIN( 523)									int state332 = 1;
HXDLIN( 523)									int _g332 = 0;
HXDLIN( 523)									while((_g332 < keys19->length)){
HXLINE( 523)										int key332 = keys19->__get(_g332);
HXDLIN( 523)										_g332 = (_g332 + 1);
HXDLIN( 523)										action332->addKey(key332,state332);
            									}
            								}
HXDLIN( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action333 = this->_downP;
HXDLIN( 523)									int state333 = 2;
HXDLIN( 523)									int _g333 = 0;
HXDLIN( 523)									while((_g333 < keys19->length)){
HXLINE( 523)										int key333 = keys19->__get(_g333);
HXDLIN( 523)										_g333 = (_g333 + 1);
HXDLIN( 523)										action333->addKey(key333,state333);
            									}
            								}
HXDLIN( 523)								{
HXLINE( 523)									 ::flixel::input::actions::FlxActionDigital action334 = this->_downR;
HXDLIN( 523)									int state334 = -1;
HXDLIN( 523)									int _g334 = 0;
HXDLIN( 523)									while((_g334 < keys19->length)){
HXLINE( 523)										int key334 = keys19->__get(_g334);
HXDLIN( 523)										_g334 = (_g334 + 1);
HXDLIN( 523)										action334->addKey(key334,state334);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action335 = this->_reset;
HXDLIN( 523)								int state335 = 2;
HXDLIN( 523)								int _g335 = 0;
HXDLIN( 523)								while((_g335 < keys19->length)){
HXLINE( 523)									int key335 = keys19->__get(_g335);
HXDLIN( 523)									_g335 = (_g335 + 1);
HXDLIN( 523)									action335->addKey(key335,state335);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action336 = this->_accept;
HXDLIN( 523)								int state336 = 2;
HXDLIN( 523)								int _g336 = 0;
HXDLIN( 523)								while((_g336 < keys19->length)){
HXLINE( 523)									int key336 = keys19->__get(_g336);
HXDLIN( 523)									_g336 = (_g336 + 1);
HXDLIN( 523)									action336->addKey(key336,state336);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action337 = this->_back;
HXDLIN( 523)								int state337 = 2;
HXDLIN( 523)								int _g337 = 0;
HXDLIN( 523)								while((_g337 < keys19->length)){
HXLINE( 523)									int key337 = keys19->__get(_g337);
HXDLIN( 523)									_g337 = (_g337 + 1);
HXDLIN( 523)									action337->addKey(key337,state337);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action338 = this->_pause;
HXDLIN( 523)								int state338 = 2;
HXDLIN( 523)								int _g338 = 0;
HXDLIN( 523)								while((_g338 < keys19->length)){
HXLINE( 523)									int key338 = keys19->__get(_g338);
HXDLIN( 523)									_g338 = (_g338 + 1);
HXDLIN( 523)									action338->addKey(key338,state338);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action339 = this->_cheat;
HXDLIN( 523)								int state339 = 2;
HXDLIN( 523)								int _g339 = 0;
HXDLIN( 523)								while((_g339 < keys19->length)){
HXLINE( 523)									int key339 = keys19->__get(_g339);
HXDLIN( 523)									_g339 = (_g339 + 1);
HXDLIN( 523)									action339->addKey(key339,state339);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 524)					{
HXLINE( 524)						::Array< int > keys20 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_463,1);
HXDLIN( 524)						switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action340 = this->_up;
HXDLIN( 524)									int state340 = 1;
HXDLIN( 524)									int _g340 = 0;
HXDLIN( 524)									while((_g340 < keys20->length)){
HXLINE( 524)										int key340 = keys20->__get(_g340);
HXDLIN( 524)										_g340 = (_g340 + 1);
HXDLIN( 524)										action340->addKey(key340,state340);
            									}
            								}
HXDLIN( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action341 = this->_upP;
HXDLIN( 524)									int state341 = 2;
HXDLIN( 524)									int _g341 = 0;
HXDLIN( 524)									while((_g341 < keys20->length)){
HXLINE( 524)										int key341 = keys20->__get(_g341);
HXDLIN( 524)										_g341 = (_g341 + 1);
HXDLIN( 524)										action341->addKey(key341,state341);
            									}
            								}
HXDLIN( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action342 = this->_upR;
HXDLIN( 524)									int state342 = -1;
HXDLIN( 524)									int _g342 = 0;
HXDLIN( 524)									while((_g342 < keys20->length)){
HXLINE( 524)										int key342 = keys20->__get(_g342);
HXDLIN( 524)										_g342 = (_g342 + 1);
HXDLIN( 524)										action342->addKey(key342,state342);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action343 = this->_left;
HXDLIN( 524)									int state343 = 1;
HXDLIN( 524)									int _g343 = 0;
HXDLIN( 524)									while((_g343 < keys20->length)){
HXLINE( 524)										int key343 = keys20->__get(_g343);
HXDLIN( 524)										_g343 = (_g343 + 1);
HXDLIN( 524)										action343->addKey(key343,state343);
            									}
            								}
HXDLIN( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action344 = this->_leftP;
HXDLIN( 524)									int state344 = 2;
HXDLIN( 524)									int _g344 = 0;
HXDLIN( 524)									while((_g344 < keys20->length)){
HXLINE( 524)										int key344 = keys20->__get(_g344);
HXDLIN( 524)										_g344 = (_g344 + 1);
HXDLIN( 524)										action344->addKey(key344,state344);
            									}
            								}
HXDLIN( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action345 = this->_leftR;
HXDLIN( 524)									int state345 = -1;
HXDLIN( 524)									int _g345 = 0;
HXDLIN( 524)									while((_g345 < keys20->length)){
HXLINE( 524)										int key345 = keys20->__get(_g345);
HXDLIN( 524)										_g345 = (_g345 + 1);
HXDLIN( 524)										action345->addKey(key345,state345);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action346 = this->_right;
HXDLIN( 524)									int state346 = 1;
HXDLIN( 524)									int _g346 = 0;
HXDLIN( 524)									while((_g346 < keys20->length)){
HXLINE( 524)										int key346 = keys20->__get(_g346);
HXDLIN( 524)										_g346 = (_g346 + 1);
HXDLIN( 524)										action346->addKey(key346,state346);
            									}
            								}
HXDLIN( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action347 = this->_rightP;
HXDLIN( 524)									int state347 = 2;
HXDLIN( 524)									int _g347 = 0;
HXDLIN( 524)									while((_g347 < keys20->length)){
HXLINE( 524)										int key347 = keys20->__get(_g347);
HXDLIN( 524)										_g347 = (_g347 + 1);
HXDLIN( 524)										action347->addKey(key347,state347);
            									}
            								}
HXDLIN( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action348 = this->_rightR;
HXDLIN( 524)									int state348 = -1;
HXDLIN( 524)									int _g348 = 0;
HXDLIN( 524)									while((_g348 < keys20->length)){
HXLINE( 524)										int key348 = keys20->__get(_g348);
HXDLIN( 524)										_g348 = (_g348 + 1);
HXDLIN( 524)										action348->addKey(key348,state348);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action349 = this->_down;
HXDLIN( 524)									int state349 = 1;
HXDLIN( 524)									int _g349 = 0;
HXDLIN( 524)									while((_g349 < keys20->length)){
HXLINE( 524)										int key349 = keys20->__get(_g349);
HXDLIN( 524)										_g349 = (_g349 + 1);
HXDLIN( 524)										action349->addKey(key349,state349);
            									}
            								}
HXDLIN( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action350 = this->_downP;
HXDLIN( 524)									int state350 = 2;
HXDLIN( 524)									int _g350 = 0;
HXDLIN( 524)									while((_g350 < keys20->length)){
HXLINE( 524)										int key350 = keys20->__get(_g350);
HXDLIN( 524)										_g350 = (_g350 + 1);
HXDLIN( 524)										action350->addKey(key350,state350);
            									}
            								}
HXDLIN( 524)								{
HXLINE( 524)									 ::flixel::input::actions::FlxActionDigital action351 = this->_downR;
HXDLIN( 524)									int state351 = -1;
HXDLIN( 524)									int _g351 = 0;
HXDLIN( 524)									while((_g351 < keys20->length)){
HXLINE( 524)										int key351 = keys20->__get(_g351);
HXDLIN( 524)										_g351 = (_g351 + 1);
HXDLIN( 524)										action351->addKey(key351,state351);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action352 = this->_reset;
HXDLIN( 524)								int state352 = 2;
HXDLIN( 524)								int _g352 = 0;
HXDLIN( 524)								while((_g352 < keys20->length)){
HXLINE( 524)									int key352 = keys20->__get(_g352);
HXDLIN( 524)									_g352 = (_g352 + 1);
HXDLIN( 524)									action352->addKey(key352,state352);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action353 = this->_accept;
HXDLIN( 524)								int state353 = 2;
HXDLIN( 524)								int _g353 = 0;
HXDLIN( 524)								while((_g353 < keys20->length)){
HXLINE( 524)									int key353 = keys20->__get(_g353);
HXDLIN( 524)									_g353 = (_g353 + 1);
HXDLIN( 524)									action353->addKey(key353,state353);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action354 = this->_back;
HXDLIN( 524)								int state354 = 2;
HXDLIN( 524)								int _g354 = 0;
HXDLIN( 524)								while((_g354 < keys20->length)){
HXLINE( 524)									int key354 = keys20->__get(_g354);
HXDLIN( 524)									_g354 = (_g354 + 1);
HXDLIN( 524)									action354->addKey(key354,state354);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action355 = this->_pause;
HXDLIN( 524)								int state355 = 2;
HXDLIN( 524)								int _g355 = 0;
HXDLIN( 524)								while((_g355 < keys20->length)){
HXLINE( 524)									int key355 = keys20->__get(_g355);
HXDLIN( 524)									_g355 = (_g355 + 1);
HXDLIN( 524)									action355->addKey(key355,state355);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action356 = this->_cheat;
HXDLIN( 524)								int state356 = 2;
HXDLIN( 524)								int _g356 = 0;
HXDLIN( 524)								while((_g356 < keys20->length)){
HXLINE( 524)									int key356 = keys20->__get(_g356);
HXDLIN( 524)									_g356 = (_g356 + 1);
HXDLIN( 524)									action356->addKey(key356,state356);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 525)					{
HXLINE( 525)						::Array< int > keys21 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_464,1);
HXDLIN( 525)						switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action357 = this->_up;
HXDLIN( 525)									int state357 = 1;
HXDLIN( 525)									int _g357 = 0;
HXDLIN( 525)									while((_g357 < keys21->length)){
HXLINE( 525)										int key357 = keys21->__get(_g357);
HXDLIN( 525)										_g357 = (_g357 + 1);
HXDLIN( 525)										action357->addKey(key357,state357);
            									}
            								}
HXDLIN( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action358 = this->_upP;
HXDLIN( 525)									int state358 = 2;
HXDLIN( 525)									int _g358 = 0;
HXDLIN( 525)									while((_g358 < keys21->length)){
HXLINE( 525)										int key358 = keys21->__get(_g358);
HXDLIN( 525)										_g358 = (_g358 + 1);
HXDLIN( 525)										action358->addKey(key358,state358);
            									}
            								}
HXDLIN( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action359 = this->_upR;
HXDLIN( 525)									int state359 = -1;
HXDLIN( 525)									int _g359 = 0;
HXDLIN( 525)									while((_g359 < keys21->length)){
HXLINE( 525)										int key359 = keys21->__get(_g359);
HXDLIN( 525)										_g359 = (_g359 + 1);
HXDLIN( 525)										action359->addKey(key359,state359);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action360 = this->_left;
HXDLIN( 525)									int state360 = 1;
HXDLIN( 525)									int _g360 = 0;
HXDLIN( 525)									while((_g360 < keys21->length)){
HXLINE( 525)										int key360 = keys21->__get(_g360);
HXDLIN( 525)										_g360 = (_g360 + 1);
HXDLIN( 525)										action360->addKey(key360,state360);
            									}
            								}
HXDLIN( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action361 = this->_leftP;
HXDLIN( 525)									int state361 = 2;
HXDLIN( 525)									int _g361 = 0;
HXDLIN( 525)									while((_g361 < keys21->length)){
HXLINE( 525)										int key361 = keys21->__get(_g361);
HXDLIN( 525)										_g361 = (_g361 + 1);
HXDLIN( 525)										action361->addKey(key361,state361);
            									}
            								}
HXDLIN( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action362 = this->_leftR;
HXDLIN( 525)									int state362 = -1;
HXDLIN( 525)									int _g362 = 0;
HXDLIN( 525)									while((_g362 < keys21->length)){
HXLINE( 525)										int key362 = keys21->__get(_g362);
HXDLIN( 525)										_g362 = (_g362 + 1);
HXDLIN( 525)										action362->addKey(key362,state362);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action363 = this->_right;
HXDLIN( 525)									int state363 = 1;
HXDLIN( 525)									int _g363 = 0;
HXDLIN( 525)									while((_g363 < keys21->length)){
HXLINE( 525)										int key363 = keys21->__get(_g363);
HXDLIN( 525)										_g363 = (_g363 + 1);
HXDLIN( 525)										action363->addKey(key363,state363);
            									}
            								}
HXDLIN( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action364 = this->_rightP;
HXDLIN( 525)									int state364 = 2;
HXDLIN( 525)									int _g364 = 0;
HXDLIN( 525)									while((_g364 < keys21->length)){
HXLINE( 525)										int key364 = keys21->__get(_g364);
HXDLIN( 525)										_g364 = (_g364 + 1);
HXDLIN( 525)										action364->addKey(key364,state364);
            									}
            								}
HXDLIN( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action365 = this->_rightR;
HXDLIN( 525)									int state365 = -1;
HXDLIN( 525)									int _g365 = 0;
HXDLIN( 525)									while((_g365 < keys21->length)){
HXLINE( 525)										int key365 = keys21->__get(_g365);
HXDLIN( 525)										_g365 = (_g365 + 1);
HXDLIN( 525)										action365->addKey(key365,state365);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action366 = this->_down;
HXDLIN( 525)									int state366 = 1;
HXDLIN( 525)									int _g366 = 0;
HXDLIN( 525)									while((_g366 < keys21->length)){
HXLINE( 525)										int key366 = keys21->__get(_g366);
HXDLIN( 525)										_g366 = (_g366 + 1);
HXDLIN( 525)										action366->addKey(key366,state366);
            									}
            								}
HXDLIN( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action367 = this->_downP;
HXDLIN( 525)									int state367 = 2;
HXDLIN( 525)									int _g367 = 0;
HXDLIN( 525)									while((_g367 < keys21->length)){
HXLINE( 525)										int key367 = keys21->__get(_g367);
HXDLIN( 525)										_g367 = (_g367 + 1);
HXDLIN( 525)										action367->addKey(key367,state367);
            									}
            								}
HXDLIN( 525)								{
HXLINE( 525)									 ::flixel::input::actions::FlxActionDigital action368 = this->_downR;
HXDLIN( 525)									int state368 = -1;
HXDLIN( 525)									int _g368 = 0;
HXDLIN( 525)									while((_g368 < keys21->length)){
HXLINE( 525)										int key368 = keys21->__get(_g368);
HXDLIN( 525)										_g368 = (_g368 + 1);
HXDLIN( 525)										action368->addKey(key368,state368);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action369 = this->_reset;
HXDLIN( 525)								int state369 = 2;
HXDLIN( 525)								int _g369 = 0;
HXDLIN( 525)								while((_g369 < keys21->length)){
HXLINE( 525)									int key369 = keys21->__get(_g369);
HXDLIN( 525)									_g369 = (_g369 + 1);
HXDLIN( 525)									action369->addKey(key369,state369);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action370 = this->_accept;
HXDLIN( 525)								int state370 = 2;
HXDLIN( 525)								int _g370 = 0;
HXDLIN( 525)								while((_g370 < keys21->length)){
HXLINE( 525)									int key370 = keys21->__get(_g370);
HXDLIN( 525)									_g370 = (_g370 + 1);
HXDLIN( 525)									action370->addKey(key370,state370);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action371 = this->_back;
HXDLIN( 525)								int state371 = 2;
HXDLIN( 525)								int _g371 = 0;
HXDLIN( 525)								while((_g371 < keys21->length)){
HXLINE( 525)									int key371 = keys21->__get(_g371);
HXDLIN( 525)									_g371 = (_g371 + 1);
HXDLIN( 525)									action371->addKey(key371,state371);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action372 = this->_pause;
HXDLIN( 525)								int state372 = 2;
HXDLIN( 525)								int _g372 = 0;
HXDLIN( 525)								while((_g372 < keys21->length)){
HXLINE( 525)									int key372 = keys21->__get(_g372);
HXDLIN( 525)									_g372 = (_g372 + 1);
HXDLIN( 525)									action372->addKey(key372,state372);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action373 = this->_cheat;
HXDLIN( 525)								int state373 = 2;
HXDLIN( 525)								int _g373 = 0;
HXDLIN( 525)								while((_g373 < keys21->length)){
HXLINE( 525)									int key373 = keys21->__get(_g373);
HXDLIN( 525)									_g373 = (_g373 + 1);
HXDLIN( 525)									action373->addKey(key373,state373);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 526)					{
HXLINE( 526)						::Array< int > keys22 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_465,1);
HXDLIN( 526)						switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action374 = this->_up;
HXDLIN( 526)									int state374 = 1;
HXDLIN( 526)									int _g374 = 0;
HXDLIN( 526)									while((_g374 < keys22->length)){
HXLINE( 526)										int key374 = keys22->__get(_g374);
HXDLIN( 526)										_g374 = (_g374 + 1);
HXDLIN( 526)										action374->addKey(key374,state374);
            									}
            								}
HXDLIN( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action375 = this->_upP;
HXDLIN( 526)									int state375 = 2;
HXDLIN( 526)									int _g375 = 0;
HXDLIN( 526)									while((_g375 < keys22->length)){
HXLINE( 526)										int key375 = keys22->__get(_g375);
HXDLIN( 526)										_g375 = (_g375 + 1);
HXDLIN( 526)										action375->addKey(key375,state375);
            									}
            								}
HXDLIN( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action376 = this->_upR;
HXDLIN( 526)									int state376 = -1;
HXDLIN( 526)									int _g376 = 0;
HXDLIN( 526)									while((_g376 < keys22->length)){
HXLINE( 526)										int key376 = keys22->__get(_g376);
HXDLIN( 526)										_g376 = (_g376 + 1);
HXDLIN( 526)										action376->addKey(key376,state376);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action377 = this->_left;
HXDLIN( 526)									int state377 = 1;
HXDLIN( 526)									int _g377 = 0;
HXDLIN( 526)									while((_g377 < keys22->length)){
HXLINE( 526)										int key377 = keys22->__get(_g377);
HXDLIN( 526)										_g377 = (_g377 + 1);
HXDLIN( 526)										action377->addKey(key377,state377);
            									}
            								}
HXDLIN( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action378 = this->_leftP;
HXDLIN( 526)									int state378 = 2;
HXDLIN( 526)									int _g378 = 0;
HXDLIN( 526)									while((_g378 < keys22->length)){
HXLINE( 526)										int key378 = keys22->__get(_g378);
HXDLIN( 526)										_g378 = (_g378 + 1);
HXDLIN( 526)										action378->addKey(key378,state378);
            									}
            								}
HXDLIN( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action379 = this->_leftR;
HXDLIN( 526)									int state379 = -1;
HXDLIN( 526)									int _g379 = 0;
HXDLIN( 526)									while((_g379 < keys22->length)){
HXLINE( 526)										int key379 = keys22->__get(_g379);
HXDLIN( 526)										_g379 = (_g379 + 1);
HXDLIN( 526)										action379->addKey(key379,state379);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action380 = this->_right;
HXDLIN( 526)									int state380 = 1;
HXDLIN( 526)									int _g380 = 0;
HXDLIN( 526)									while((_g380 < keys22->length)){
HXLINE( 526)										int key380 = keys22->__get(_g380);
HXDLIN( 526)										_g380 = (_g380 + 1);
HXDLIN( 526)										action380->addKey(key380,state380);
            									}
            								}
HXDLIN( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action381 = this->_rightP;
HXDLIN( 526)									int state381 = 2;
HXDLIN( 526)									int _g381 = 0;
HXDLIN( 526)									while((_g381 < keys22->length)){
HXLINE( 526)										int key381 = keys22->__get(_g381);
HXDLIN( 526)										_g381 = (_g381 + 1);
HXDLIN( 526)										action381->addKey(key381,state381);
            									}
            								}
HXDLIN( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action382 = this->_rightR;
HXDLIN( 526)									int state382 = -1;
HXDLIN( 526)									int _g382 = 0;
HXDLIN( 526)									while((_g382 < keys22->length)){
HXLINE( 526)										int key382 = keys22->__get(_g382);
HXDLIN( 526)										_g382 = (_g382 + 1);
HXDLIN( 526)										action382->addKey(key382,state382);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action383 = this->_down;
HXDLIN( 526)									int state383 = 1;
HXDLIN( 526)									int _g383 = 0;
HXDLIN( 526)									while((_g383 < keys22->length)){
HXLINE( 526)										int key383 = keys22->__get(_g383);
HXDLIN( 526)										_g383 = (_g383 + 1);
HXDLIN( 526)										action383->addKey(key383,state383);
            									}
            								}
HXDLIN( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action384 = this->_downP;
HXDLIN( 526)									int state384 = 2;
HXDLIN( 526)									int _g384 = 0;
HXDLIN( 526)									while((_g384 < keys22->length)){
HXLINE( 526)										int key384 = keys22->__get(_g384);
HXDLIN( 526)										_g384 = (_g384 + 1);
HXDLIN( 526)										action384->addKey(key384,state384);
            									}
            								}
HXDLIN( 526)								{
HXLINE( 526)									 ::flixel::input::actions::FlxActionDigital action385 = this->_downR;
HXDLIN( 526)									int state385 = -1;
HXDLIN( 526)									int _g385 = 0;
HXDLIN( 526)									while((_g385 < keys22->length)){
HXLINE( 526)										int key385 = keys22->__get(_g385);
HXDLIN( 526)										_g385 = (_g385 + 1);
HXDLIN( 526)										action385->addKey(key385,state385);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action386 = this->_reset;
HXDLIN( 526)								int state386 = 2;
HXDLIN( 526)								int _g386 = 0;
HXDLIN( 526)								while((_g386 < keys22->length)){
HXLINE( 526)									int key386 = keys22->__get(_g386);
HXDLIN( 526)									_g386 = (_g386 + 1);
HXDLIN( 526)									action386->addKey(key386,state386);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action387 = this->_accept;
HXDLIN( 526)								int state387 = 2;
HXDLIN( 526)								int _g387 = 0;
HXDLIN( 526)								while((_g387 < keys22->length)){
HXLINE( 526)									int key387 = keys22->__get(_g387);
HXDLIN( 526)									_g387 = (_g387 + 1);
HXDLIN( 526)									action387->addKey(key387,state387);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action388 = this->_back;
HXDLIN( 526)								int state388 = 2;
HXDLIN( 526)								int _g388 = 0;
HXDLIN( 526)								while((_g388 < keys22->length)){
HXLINE( 526)									int key388 = keys22->__get(_g388);
HXDLIN( 526)									_g388 = (_g388 + 1);
HXDLIN( 526)									action388->addKey(key388,state388);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action389 = this->_pause;
HXDLIN( 526)								int state389 = 2;
HXDLIN( 526)								int _g389 = 0;
HXDLIN( 526)								while((_g389 < keys22->length)){
HXLINE( 526)									int key389 = keys22->__get(_g389);
HXDLIN( 526)									_g389 = (_g389 + 1);
HXDLIN( 526)									action389->addKey(key389,state389);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action390 = this->_cheat;
HXDLIN( 526)								int state390 = 2;
HXDLIN( 526)								int _g390 = 0;
HXDLIN( 526)								while((_g390 < keys22->length)){
HXLINE( 526)									int key390 = keys22->__get(_g390);
HXDLIN( 526)									_g390 = (_g390 + 1);
HXDLIN( 526)									action390->addKey(key390,state390);
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            			break;
            			case (int)2: {
            			}
            			break;
            			case (int)3: {
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,setKeyboardScheme,(void))

void Controls_obj::removeKeyboard(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_568_removeKeyboard)
HXDLIN( 568)		int _g = 0;
HXDLIN( 568)		::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 568)		while((_g < _g1->length)){
HXDLIN( 568)			 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 568)			_g = (_g + 1);
HXLINE( 570)			int i = action->inputs->length;
HXLINE( 571)			while(true){
HXLINE( 571)				i = (i - 1);
HXDLIN( 571)				if (!(((i + 1) > 0))) {
HXLINE( 571)					goto _hx_goto_467;
            				}
HXLINE( 573)				 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 574)				if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE( 575)					action->remove(input,null());
            				}
            			}
            			_hx_goto_467:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,removeKeyboard,(void))

void Controls_obj::addGamepad(int id, ::haxe::ds::EnumValueMap buttonMap){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_581_addGamepad)
HXLINE( 582)		this->gamepadsAdded->push(id);
HXLINE( 585)		{
HXLINE( 585)			::Dynamic map = buttonMap;
HXDLIN( 585)			::Dynamic _g_map = map;
HXDLIN( 585)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 585)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 585)				 ::Control key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 585)				::Array< int > _g_value = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 585)				 ::Control _g_key = key;
HXDLIN( 585)				 ::Control control = _g_key;
HXDLIN( 585)				::Array< int > buttons = _g_value;
HXLINE( 586)				{
HXLINE( 586)					int id1 = id;
HXDLIN( 586)					::Array< int > buttons1 = buttons;
HXDLIN( 586)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXLINE( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 586)								int state = 1;
HXDLIN( 586)								int _g = 0;
HXDLIN( 586)								while((_g < buttons1->length)){
HXLINE( 586)									int button = buttons1->__get(_g);
HXDLIN( 586)									_g = (_g + 1);
HXDLIN( 586)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 586)								int state1 = 2;
HXDLIN( 586)								int _g1 = 0;
HXDLIN( 586)								while((_g1 < buttons1->length)){
HXLINE( 586)									int button1 = buttons1->__get(_g1);
HXDLIN( 586)									_g1 = (_g1 + 1);
HXDLIN( 586)									action1->addGamepad(button1,state1,id1);
            								}
            							}
HXDLIN( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 586)								int state2 = -1;
HXDLIN( 586)								int _g2 = 0;
HXDLIN( 586)								while((_g2 < buttons1->length)){
HXLINE( 586)									int button2 = buttons1->__get(_g2);
HXDLIN( 586)									_g2 = (_g2 + 1);
HXDLIN( 586)									action2->addGamepad(button2,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action3 = this->_left;
HXDLIN( 586)								int state3 = 1;
HXDLIN( 586)								int _g3 = 0;
HXDLIN( 586)								while((_g3 < buttons1->length)){
HXLINE( 586)									int button3 = buttons1->__get(_g3);
HXDLIN( 586)									_g3 = (_g3 + 1);
HXDLIN( 586)									action3->addGamepad(button3,state3,id1);
            								}
            							}
HXDLIN( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action4 = this->_leftP;
HXDLIN( 586)								int state4 = 2;
HXDLIN( 586)								int _g4 = 0;
HXDLIN( 586)								while((_g4 < buttons1->length)){
HXLINE( 586)									int button4 = buttons1->__get(_g4);
HXDLIN( 586)									_g4 = (_g4 + 1);
HXDLIN( 586)									action4->addGamepad(button4,state4,id1);
            								}
            							}
HXDLIN( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action5 = this->_leftR;
HXDLIN( 586)								int state5 = -1;
HXDLIN( 586)								int _g5 = 0;
HXDLIN( 586)								while((_g5 < buttons1->length)){
HXLINE( 586)									int button5 = buttons1->__get(_g5);
HXDLIN( 586)									_g5 = (_g5 + 1);
HXDLIN( 586)									action5->addGamepad(button5,state5,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action6 = this->_right;
HXDLIN( 586)								int state6 = 1;
HXDLIN( 586)								int _g6 = 0;
HXDLIN( 586)								while((_g6 < buttons1->length)){
HXLINE( 586)									int button6 = buttons1->__get(_g6);
HXDLIN( 586)									_g6 = (_g6 + 1);
HXDLIN( 586)									action6->addGamepad(button6,state6,id1);
            								}
            							}
HXDLIN( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action7 = this->_rightP;
HXDLIN( 586)								int state7 = 2;
HXDLIN( 586)								int _g7 = 0;
HXDLIN( 586)								while((_g7 < buttons1->length)){
HXLINE( 586)									int button7 = buttons1->__get(_g7);
HXDLIN( 586)									_g7 = (_g7 + 1);
HXDLIN( 586)									action7->addGamepad(button7,state7,id1);
            								}
            							}
HXDLIN( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action8 = this->_rightR;
HXDLIN( 586)								int state8 = -1;
HXDLIN( 586)								int _g8 = 0;
HXDLIN( 586)								while((_g8 < buttons1->length)){
HXLINE( 586)									int button8 = buttons1->__get(_g8);
HXDLIN( 586)									_g8 = (_g8 + 1);
HXDLIN( 586)									action8->addGamepad(button8,state8,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action9 = this->_down;
HXDLIN( 586)								int state9 = 1;
HXDLIN( 586)								int _g9 = 0;
HXDLIN( 586)								while((_g9 < buttons1->length)){
HXLINE( 586)									int button9 = buttons1->__get(_g9);
HXDLIN( 586)									_g9 = (_g9 + 1);
HXDLIN( 586)									action9->addGamepad(button9,state9,id1);
            								}
            							}
HXDLIN( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action10 = this->_downP;
HXDLIN( 586)								int state10 = 2;
HXDLIN( 586)								int _g10 = 0;
HXDLIN( 586)								while((_g10 < buttons1->length)){
HXLINE( 586)									int button10 = buttons1->__get(_g10);
HXDLIN( 586)									_g10 = (_g10 + 1);
HXDLIN( 586)									action10->addGamepad(button10,state10,id1);
            								}
            							}
HXDLIN( 586)							{
HXLINE( 586)								 ::flixel::input::actions::FlxActionDigital action11 = this->_downR;
HXDLIN( 586)								int state11 = -1;
HXDLIN( 586)								int _g11 = 0;
HXDLIN( 586)								while((_g11 < buttons1->length)){
HXLINE( 586)									int button11 = buttons1->__get(_g11);
HXDLIN( 586)									_g11 = (_g11 + 1);
HXDLIN( 586)									action11->addGamepad(button11,state11,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 586)							 ::flixel::input::actions::FlxActionDigital action12 = this->_reset;
HXDLIN( 586)							int state12 = 2;
HXDLIN( 586)							int _g12 = 0;
HXDLIN( 586)							while((_g12 < buttons1->length)){
HXLINE( 586)								int button12 = buttons1->__get(_g12);
HXDLIN( 586)								_g12 = (_g12 + 1);
HXDLIN( 586)								action12->addGamepad(button12,state12,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 586)							 ::flixel::input::actions::FlxActionDigital action13 = this->_accept;
HXDLIN( 586)							int state13 = 2;
HXDLIN( 586)							int _g13 = 0;
HXDLIN( 586)							while((_g13 < buttons1->length)){
HXLINE( 586)								int button13 = buttons1->__get(_g13);
HXDLIN( 586)								_g13 = (_g13 + 1);
HXDLIN( 586)								action13->addGamepad(button13,state13,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 586)							 ::flixel::input::actions::FlxActionDigital action14 = this->_back;
HXDLIN( 586)							int state14 = 2;
HXDLIN( 586)							int _g14 = 0;
HXDLIN( 586)							while((_g14 < buttons1->length)){
HXLINE( 586)								int button14 = buttons1->__get(_g14);
HXDLIN( 586)								_g14 = (_g14 + 1);
HXDLIN( 586)								action14->addGamepad(button14,state14,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 586)							 ::flixel::input::actions::FlxActionDigital action15 = this->_pause;
HXDLIN( 586)							int state15 = 2;
HXDLIN( 586)							int _g15 = 0;
HXDLIN( 586)							while((_g15 < buttons1->length)){
HXLINE( 586)								int button15 = buttons1->__get(_g15);
HXDLIN( 586)								_g15 = (_g15 + 1);
HXDLIN( 586)								action15->addGamepad(button15,state15,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 586)							 ::flixel::input::actions::FlxActionDigital action16 = this->_cheat;
HXDLIN( 586)							int state16 = 2;
HXDLIN( 586)							int _g16 = 0;
HXDLIN( 586)							while((_g16 < buttons1->length)){
HXLINE( 586)								int button16 = buttons1->__get(_g16);
HXDLIN( 586)								_g16 = (_g16 + 1);
HXDLIN( 586)								action16->addGamepad(button16,state16,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,addGamepad,(void))

void Controls_obj::addGamepadLiteral(int id, ::haxe::ds::EnumValueMap buttonMap){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_594_addGamepadLiteral)
HXLINE( 595)		this->gamepadsAdded->push(id);
HXLINE( 598)		{
HXLINE( 598)			::Dynamic map = buttonMap;
HXDLIN( 598)			::Dynamic _g_map = map;
HXDLIN( 598)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 598)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 598)				 ::Control key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 598)				::Array< int > _g_value = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 598)				 ::Control _g_key = key;
HXDLIN( 598)				 ::Control control = _g_key;
HXDLIN( 598)				::Array< int > buttons = _g_value;
HXLINE( 599)				{
HXLINE( 599)					int id1 = id;
HXDLIN( 599)					::Array< int > buttons1 = buttons;
HXDLIN( 599)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXLINE( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 599)								int state = 1;
HXDLIN( 599)								int _g = 0;
HXDLIN( 599)								while((_g < buttons1->length)){
HXLINE( 599)									int button = buttons1->__get(_g);
HXDLIN( 599)									_g = (_g + 1);
HXDLIN( 599)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 599)								int state1 = 2;
HXDLIN( 599)								int _g1 = 0;
HXDLIN( 599)								while((_g1 < buttons1->length)){
HXLINE( 599)									int button1 = buttons1->__get(_g1);
HXDLIN( 599)									_g1 = (_g1 + 1);
HXDLIN( 599)									action1->addGamepad(button1,state1,id1);
            								}
            							}
HXDLIN( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 599)								int state2 = -1;
HXDLIN( 599)								int _g2 = 0;
HXDLIN( 599)								while((_g2 < buttons1->length)){
HXLINE( 599)									int button2 = buttons1->__get(_g2);
HXDLIN( 599)									_g2 = (_g2 + 1);
HXDLIN( 599)									action2->addGamepad(button2,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action3 = this->_left;
HXDLIN( 599)								int state3 = 1;
HXDLIN( 599)								int _g3 = 0;
HXDLIN( 599)								while((_g3 < buttons1->length)){
HXLINE( 599)									int button3 = buttons1->__get(_g3);
HXDLIN( 599)									_g3 = (_g3 + 1);
HXDLIN( 599)									action3->addGamepad(button3,state3,id1);
            								}
            							}
HXDLIN( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action4 = this->_leftP;
HXDLIN( 599)								int state4 = 2;
HXDLIN( 599)								int _g4 = 0;
HXDLIN( 599)								while((_g4 < buttons1->length)){
HXLINE( 599)									int button4 = buttons1->__get(_g4);
HXDLIN( 599)									_g4 = (_g4 + 1);
HXDLIN( 599)									action4->addGamepad(button4,state4,id1);
            								}
            							}
HXDLIN( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action5 = this->_leftR;
HXDLIN( 599)								int state5 = -1;
HXDLIN( 599)								int _g5 = 0;
HXDLIN( 599)								while((_g5 < buttons1->length)){
HXLINE( 599)									int button5 = buttons1->__get(_g5);
HXDLIN( 599)									_g5 = (_g5 + 1);
HXDLIN( 599)									action5->addGamepad(button5,state5,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action6 = this->_right;
HXDLIN( 599)								int state6 = 1;
HXDLIN( 599)								int _g6 = 0;
HXDLIN( 599)								while((_g6 < buttons1->length)){
HXLINE( 599)									int button6 = buttons1->__get(_g6);
HXDLIN( 599)									_g6 = (_g6 + 1);
HXDLIN( 599)									action6->addGamepad(button6,state6,id1);
            								}
            							}
HXDLIN( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action7 = this->_rightP;
HXDLIN( 599)								int state7 = 2;
HXDLIN( 599)								int _g7 = 0;
HXDLIN( 599)								while((_g7 < buttons1->length)){
HXLINE( 599)									int button7 = buttons1->__get(_g7);
HXDLIN( 599)									_g7 = (_g7 + 1);
HXDLIN( 599)									action7->addGamepad(button7,state7,id1);
            								}
            							}
HXDLIN( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action8 = this->_rightR;
HXDLIN( 599)								int state8 = -1;
HXDLIN( 599)								int _g8 = 0;
HXDLIN( 599)								while((_g8 < buttons1->length)){
HXLINE( 599)									int button8 = buttons1->__get(_g8);
HXDLIN( 599)									_g8 = (_g8 + 1);
HXDLIN( 599)									action8->addGamepad(button8,state8,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action9 = this->_down;
HXDLIN( 599)								int state9 = 1;
HXDLIN( 599)								int _g9 = 0;
HXDLIN( 599)								while((_g9 < buttons1->length)){
HXLINE( 599)									int button9 = buttons1->__get(_g9);
HXDLIN( 599)									_g9 = (_g9 + 1);
HXDLIN( 599)									action9->addGamepad(button9,state9,id1);
            								}
            							}
HXDLIN( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action10 = this->_downP;
HXDLIN( 599)								int state10 = 2;
HXDLIN( 599)								int _g10 = 0;
HXDLIN( 599)								while((_g10 < buttons1->length)){
HXLINE( 599)									int button10 = buttons1->__get(_g10);
HXDLIN( 599)									_g10 = (_g10 + 1);
HXDLIN( 599)									action10->addGamepad(button10,state10,id1);
            								}
            							}
HXDLIN( 599)							{
HXLINE( 599)								 ::flixel::input::actions::FlxActionDigital action11 = this->_downR;
HXDLIN( 599)								int state11 = -1;
HXDLIN( 599)								int _g11 = 0;
HXDLIN( 599)								while((_g11 < buttons1->length)){
HXLINE( 599)									int button11 = buttons1->__get(_g11);
HXDLIN( 599)									_g11 = (_g11 + 1);
HXDLIN( 599)									action11->addGamepad(button11,state11,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 599)							 ::flixel::input::actions::FlxActionDigital action12 = this->_reset;
HXDLIN( 599)							int state12 = 2;
HXDLIN( 599)							int _g12 = 0;
HXDLIN( 599)							while((_g12 < buttons1->length)){
HXLINE( 599)								int button12 = buttons1->__get(_g12);
HXDLIN( 599)								_g12 = (_g12 + 1);
HXDLIN( 599)								action12->addGamepad(button12,state12,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 599)							 ::flixel::input::actions::FlxActionDigital action13 = this->_accept;
HXDLIN( 599)							int state13 = 2;
HXDLIN( 599)							int _g13 = 0;
HXDLIN( 599)							while((_g13 < buttons1->length)){
HXLINE( 599)								int button13 = buttons1->__get(_g13);
HXDLIN( 599)								_g13 = (_g13 + 1);
HXDLIN( 599)								action13->addGamepad(button13,state13,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 599)							 ::flixel::input::actions::FlxActionDigital action14 = this->_back;
HXDLIN( 599)							int state14 = 2;
HXDLIN( 599)							int _g14 = 0;
HXDLIN( 599)							while((_g14 < buttons1->length)){
HXLINE( 599)								int button14 = buttons1->__get(_g14);
HXDLIN( 599)								_g14 = (_g14 + 1);
HXDLIN( 599)								action14->addGamepad(button14,state14,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 599)							 ::flixel::input::actions::FlxActionDigital action15 = this->_pause;
HXDLIN( 599)							int state15 = 2;
HXDLIN( 599)							int _g15 = 0;
HXDLIN( 599)							while((_g15 < buttons1->length)){
HXLINE( 599)								int button15 = buttons1->__get(_g15);
HXDLIN( 599)								_g15 = (_g15 + 1);
HXDLIN( 599)								action15->addGamepad(button15,state15,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 599)							 ::flixel::input::actions::FlxActionDigital action16 = this->_cheat;
HXDLIN( 599)							int state16 = 2;
HXDLIN( 599)							int _g16 = 0;
HXDLIN( 599)							while((_g16 < buttons1->length)){
HXLINE( 599)								int button16 = buttons1->__get(_g16);
HXDLIN( 599)								_g16 = (_g16 + 1);
HXDLIN( 599)								action16->addGamepad(button16,state16,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,addGamepadLiteral,(void))

void Controls_obj::removeGamepad(::hx::Null< int >  __o_deviceID){
            		int deviceID = __o_deviceID.Default(-1);
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_607_removeGamepad)
HXLINE( 608)		{
HXLINE( 608)			int _g = 0;
HXDLIN( 608)			::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 608)			while((_g < _g1->length)){
HXLINE( 608)				 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 608)				_g = (_g + 1);
HXLINE( 610)				int i = action->inputs->length;
HXLINE( 611)				while(true){
HXLINE( 611)					i = (i - 1);
HXDLIN( 611)					if (!(((i + 1) > 0))) {
HXLINE( 611)						goto _hx_goto_508;
            					}
HXLINE( 613)					 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 614)					bool _hx_tmp;
HXDLIN( 614)					if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 614)						if ((deviceID != -1)) {
HXLINE( 614)							_hx_tmp = (input->deviceID == deviceID);
            						}
            						else {
HXLINE( 614)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 614)						_hx_tmp = false;
            					}
HXDLIN( 614)					if (_hx_tmp) {
HXLINE( 615)						action->remove(input,null());
            					}
            				}
            				_hx_goto_508:;
            			}
            		}
HXLINE( 619)		this->gamepadsAdded->remove(deviceID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,removeGamepad,(void))

void Controls_obj::addDefaultGamepad(int id){
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_625_addDefaultGamepad)
HXDLIN( 625)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN( 625)		_g->set(::Control_obj::ACCEPT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_529,1));
HXDLIN( 625)		_g->set(::Control_obj::BACK_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_530,1));
HXDLIN( 625)		_g->set(::Control_obj::UP_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_531,2));
HXDLIN( 625)		_g->set(::Control_obj::DOWN_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_532,2));
HXDLIN( 625)		_g->set(::Control_obj::LEFT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_533,2));
HXDLIN( 625)		_g->set(::Control_obj::RIGHT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_534,2));
HXDLIN( 625)		_g->set(::Control_obj::PAUSE_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_535,1));
HXDLIN( 625)		_g->set(::Control_obj::RESET_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_536,1));
HXDLIN( 625)		this->gamepadsAdded->push(id);
HXDLIN( 625)		{
HXDLIN( 625)			::Dynamic map = _g;
HXDLIN( 625)			::Dynamic _g_map = map;
HXDLIN( 625)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 625)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN( 625)				 ::Control key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 625)				::Array< int > _g_value = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 625)				 ::Control _g_key = key;
HXDLIN( 625)				 ::Control control = _g_key;
HXDLIN( 625)				::Array< int > buttons = _g_value;
HXDLIN( 625)				{
HXDLIN( 625)					int id1 = id;
HXDLIN( 625)					::Array< int > buttons1 = buttons;
HXDLIN( 625)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 625)								int state = 1;
HXDLIN( 625)								int _g1 = 0;
HXDLIN( 625)								while((_g1 < buttons1->length)){
HXDLIN( 625)									int button = buttons1->__get(_g1);
HXDLIN( 625)									_g1 = (_g1 + 1);
HXDLIN( 625)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 625)								int state1 = 2;
HXDLIN( 625)								int _g2 = 0;
HXDLIN( 625)								while((_g2 < buttons1->length)){
HXDLIN( 625)									int button1 = buttons1->__get(_g2);
HXDLIN( 625)									_g2 = (_g2 + 1);
HXDLIN( 625)									action1->addGamepad(button1,state1,id1);
            								}
            							}
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 625)								int state2 = -1;
HXDLIN( 625)								int _g3 = 0;
HXDLIN( 625)								while((_g3 < buttons1->length)){
HXDLIN( 625)									int button2 = buttons1->__get(_g3);
HXDLIN( 625)									_g3 = (_g3 + 1);
HXDLIN( 625)									action2->addGamepad(button2,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action3 = this->_left;
HXDLIN( 625)								int state3 = 1;
HXDLIN( 625)								int _g4 = 0;
HXDLIN( 625)								while((_g4 < buttons1->length)){
HXDLIN( 625)									int button3 = buttons1->__get(_g4);
HXDLIN( 625)									_g4 = (_g4 + 1);
HXDLIN( 625)									action3->addGamepad(button3,state3,id1);
            								}
            							}
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action4 = this->_leftP;
HXDLIN( 625)								int state4 = 2;
HXDLIN( 625)								int _g5 = 0;
HXDLIN( 625)								while((_g5 < buttons1->length)){
HXDLIN( 625)									int button4 = buttons1->__get(_g5);
HXDLIN( 625)									_g5 = (_g5 + 1);
HXDLIN( 625)									action4->addGamepad(button4,state4,id1);
            								}
            							}
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action5 = this->_leftR;
HXDLIN( 625)								int state5 = -1;
HXDLIN( 625)								int _g6 = 0;
HXDLIN( 625)								while((_g6 < buttons1->length)){
HXDLIN( 625)									int button5 = buttons1->__get(_g6);
HXDLIN( 625)									_g6 = (_g6 + 1);
HXDLIN( 625)									action5->addGamepad(button5,state5,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action6 = this->_right;
HXDLIN( 625)								int state6 = 1;
HXDLIN( 625)								int _g7 = 0;
HXDLIN( 625)								while((_g7 < buttons1->length)){
HXDLIN( 625)									int button6 = buttons1->__get(_g7);
HXDLIN( 625)									_g7 = (_g7 + 1);
HXDLIN( 625)									action6->addGamepad(button6,state6,id1);
            								}
            							}
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action7 = this->_rightP;
HXDLIN( 625)								int state7 = 2;
HXDLIN( 625)								int _g8 = 0;
HXDLIN( 625)								while((_g8 < buttons1->length)){
HXDLIN( 625)									int button7 = buttons1->__get(_g8);
HXDLIN( 625)									_g8 = (_g8 + 1);
HXDLIN( 625)									action7->addGamepad(button7,state7,id1);
            								}
            							}
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action8 = this->_rightR;
HXDLIN( 625)								int state8 = -1;
HXDLIN( 625)								int _g9 = 0;
HXDLIN( 625)								while((_g9 < buttons1->length)){
HXDLIN( 625)									int button8 = buttons1->__get(_g9);
HXDLIN( 625)									_g9 = (_g9 + 1);
HXDLIN( 625)									action8->addGamepad(button8,state8,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action9 = this->_down;
HXDLIN( 625)								int state9 = 1;
HXDLIN( 625)								int _g10 = 0;
HXDLIN( 625)								while((_g10 < buttons1->length)){
HXDLIN( 625)									int button9 = buttons1->__get(_g10);
HXDLIN( 625)									_g10 = (_g10 + 1);
HXDLIN( 625)									action9->addGamepad(button9,state9,id1);
            								}
            							}
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action10 = this->_downP;
HXDLIN( 625)								int state10 = 2;
HXDLIN( 625)								int _g11 = 0;
HXDLIN( 625)								while((_g11 < buttons1->length)){
HXDLIN( 625)									int button10 = buttons1->__get(_g11);
HXDLIN( 625)									_g11 = (_g11 + 1);
HXDLIN( 625)									action10->addGamepad(button10,state10,id1);
            								}
            							}
HXDLIN( 625)							{
HXDLIN( 625)								 ::flixel::input::actions::FlxActionDigital action11 = this->_downR;
HXDLIN( 625)								int state11 = -1;
HXDLIN( 625)								int _g12 = 0;
HXDLIN( 625)								while((_g12 < buttons1->length)){
HXDLIN( 625)									int button11 = buttons1->__get(_g12);
HXDLIN( 625)									_g12 = (_g12 + 1);
HXDLIN( 625)									action11->addGamepad(button11,state11,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXDLIN( 625)							 ::flixel::input::actions::FlxActionDigital action12 = this->_reset;
HXDLIN( 625)							int state12 = 2;
HXDLIN( 625)							int _g13 = 0;
HXDLIN( 625)							while((_g13 < buttons1->length)){
HXDLIN( 625)								int button12 = buttons1->__get(_g13);
HXDLIN( 625)								_g13 = (_g13 + 1);
HXDLIN( 625)								action12->addGamepad(button12,state12,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXDLIN( 625)							 ::flixel::input::actions::FlxActionDigital action13 = this->_accept;
HXDLIN( 625)							int state13 = 2;
HXDLIN( 625)							int _g14 = 0;
HXDLIN( 625)							while((_g14 < buttons1->length)){
HXDLIN( 625)								int button13 = buttons1->__get(_g14);
HXDLIN( 625)								_g14 = (_g14 + 1);
HXDLIN( 625)								action13->addGamepad(button13,state13,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXDLIN( 625)							 ::flixel::input::actions::FlxActionDigital action14 = this->_back;
HXDLIN( 625)							int state14 = 2;
HXDLIN( 625)							int _g15 = 0;
HXDLIN( 625)							while((_g15 < buttons1->length)){
HXDLIN( 625)								int button14 = buttons1->__get(_g15);
HXDLIN( 625)								_g15 = (_g15 + 1);
HXDLIN( 625)								action14->addGamepad(button14,state14,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXDLIN( 625)							 ::flixel::input::actions::FlxActionDigital action15 = this->_pause;
HXDLIN( 625)							int state15 = 2;
HXDLIN( 625)							int _g16 = 0;
HXDLIN( 625)							while((_g16 < buttons1->length)){
HXDLIN( 625)								int button15 = buttons1->__get(_g16);
HXDLIN( 625)								_g16 = (_g16 + 1);
HXDLIN( 625)								action15->addGamepad(button15,state15,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXDLIN( 625)							 ::flixel::input::actions::FlxActionDigital action16 = this->_cheat;
HXDLIN( 625)							int state16 = 2;
HXDLIN( 625)							int _g17 = 0;
HXDLIN( 625)							while((_g17 < buttons1->length)){
HXDLIN( 625)								int button16 = buttons1->__get(_g17);
HXDLIN( 625)								_g17 = (_g17 + 1);
HXDLIN( 625)								action16->addGamepad(button16,state16,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,addDefaultGamepad,(void))

void Controls_obj::bindButtons( ::Control control,int id,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_659_bindButtons)
HXDLIN( 659)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 659)					int state = 1;
HXDLIN( 659)					int _g = 0;
HXDLIN( 659)					while((_g < buttons->length)){
HXDLIN( 659)						int button = buttons->__get(_g);
HXDLIN( 659)						_g = (_g + 1);
HXDLIN( 659)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 659)					int state1 = 2;
HXDLIN( 659)					int _g1 = 0;
HXDLIN( 659)					while((_g1 < buttons->length)){
HXDLIN( 659)						int button1 = buttons->__get(_g1);
HXDLIN( 659)						_g1 = (_g1 + 1);
HXDLIN( 659)						action1->addGamepad(button1,state1,id);
            					}
            				}
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 659)					int state2 = -1;
HXDLIN( 659)					int _g2 = 0;
HXDLIN( 659)					while((_g2 < buttons->length)){
HXDLIN( 659)						int button2 = buttons->__get(_g2);
HXDLIN( 659)						_g2 = (_g2 + 1);
HXDLIN( 659)						action2->addGamepad(button2,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action3 = this->_left;
HXDLIN( 659)					int state3 = 1;
HXDLIN( 659)					int _g3 = 0;
HXDLIN( 659)					while((_g3 < buttons->length)){
HXDLIN( 659)						int button3 = buttons->__get(_g3);
HXDLIN( 659)						_g3 = (_g3 + 1);
HXDLIN( 659)						action3->addGamepad(button3,state3,id);
            					}
            				}
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action4 = this->_leftP;
HXDLIN( 659)					int state4 = 2;
HXDLIN( 659)					int _g4 = 0;
HXDLIN( 659)					while((_g4 < buttons->length)){
HXDLIN( 659)						int button4 = buttons->__get(_g4);
HXDLIN( 659)						_g4 = (_g4 + 1);
HXDLIN( 659)						action4->addGamepad(button4,state4,id);
            					}
            				}
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action5 = this->_leftR;
HXDLIN( 659)					int state5 = -1;
HXDLIN( 659)					int _g5 = 0;
HXDLIN( 659)					while((_g5 < buttons->length)){
HXDLIN( 659)						int button5 = buttons->__get(_g5);
HXDLIN( 659)						_g5 = (_g5 + 1);
HXDLIN( 659)						action5->addGamepad(button5,state5,id);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action6 = this->_right;
HXDLIN( 659)					int state6 = 1;
HXDLIN( 659)					int _g6 = 0;
HXDLIN( 659)					while((_g6 < buttons->length)){
HXDLIN( 659)						int button6 = buttons->__get(_g6);
HXDLIN( 659)						_g6 = (_g6 + 1);
HXDLIN( 659)						action6->addGamepad(button6,state6,id);
            					}
            				}
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action7 = this->_rightP;
HXDLIN( 659)					int state7 = 2;
HXDLIN( 659)					int _g7 = 0;
HXDLIN( 659)					while((_g7 < buttons->length)){
HXDLIN( 659)						int button7 = buttons->__get(_g7);
HXDLIN( 659)						_g7 = (_g7 + 1);
HXDLIN( 659)						action7->addGamepad(button7,state7,id);
            					}
            				}
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action8 = this->_rightR;
HXDLIN( 659)					int state8 = -1;
HXDLIN( 659)					int _g8 = 0;
HXDLIN( 659)					while((_g8 < buttons->length)){
HXDLIN( 659)						int button8 = buttons->__get(_g8);
HXDLIN( 659)						_g8 = (_g8 + 1);
HXDLIN( 659)						action8->addGamepad(button8,state8,id);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action9 = this->_down;
HXDLIN( 659)					int state9 = 1;
HXDLIN( 659)					int _g9 = 0;
HXDLIN( 659)					while((_g9 < buttons->length)){
HXDLIN( 659)						int button9 = buttons->__get(_g9);
HXDLIN( 659)						_g9 = (_g9 + 1);
HXDLIN( 659)						action9->addGamepad(button9,state9,id);
            					}
            				}
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action10 = this->_downP;
HXDLIN( 659)					int state10 = 2;
HXDLIN( 659)					int _g10 = 0;
HXDLIN( 659)					while((_g10 < buttons->length)){
HXDLIN( 659)						int button10 = buttons->__get(_g10);
HXDLIN( 659)						_g10 = (_g10 + 1);
HXDLIN( 659)						action10->addGamepad(button10,state10,id);
            					}
            				}
HXDLIN( 659)				{
HXDLIN( 659)					 ::flixel::input::actions::FlxActionDigital action11 = this->_downR;
HXDLIN( 659)					int state11 = -1;
HXDLIN( 659)					int _g11 = 0;
HXDLIN( 659)					while((_g11 < buttons->length)){
HXDLIN( 659)						int button11 = buttons->__get(_g11);
HXDLIN( 659)						_g11 = (_g11 + 1);
HXDLIN( 659)						action11->addGamepad(button11,state11,id);
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXDLIN( 659)				 ::flixel::input::actions::FlxActionDigital action12 = this->_reset;
HXDLIN( 659)				int state12 = 2;
HXDLIN( 659)				int _g12 = 0;
HXDLIN( 659)				while((_g12 < buttons->length)){
HXDLIN( 659)					int button12 = buttons->__get(_g12);
HXDLIN( 659)					_g12 = (_g12 + 1);
HXDLIN( 659)					action12->addGamepad(button12,state12,id);
            				}
            			}
            			break;
            			case (int)5: {
HXDLIN( 659)				 ::flixel::input::actions::FlxActionDigital action13 = this->_accept;
HXDLIN( 659)				int state13 = 2;
HXDLIN( 659)				int _g13 = 0;
HXDLIN( 659)				while((_g13 < buttons->length)){
HXDLIN( 659)					int button13 = buttons->__get(_g13);
HXDLIN( 659)					_g13 = (_g13 + 1);
HXDLIN( 659)					action13->addGamepad(button13,state13,id);
            				}
            			}
            			break;
            			case (int)6: {
HXDLIN( 659)				 ::flixel::input::actions::FlxActionDigital action14 = this->_back;
HXDLIN( 659)				int state14 = 2;
HXDLIN( 659)				int _g14 = 0;
HXDLIN( 659)				while((_g14 < buttons->length)){
HXDLIN( 659)					int button14 = buttons->__get(_g14);
HXDLIN( 659)					_g14 = (_g14 + 1);
HXDLIN( 659)					action14->addGamepad(button14,state14,id);
            				}
            			}
            			break;
            			case (int)7: {
HXDLIN( 659)				 ::flixel::input::actions::FlxActionDigital action15 = this->_pause;
HXDLIN( 659)				int state15 = 2;
HXDLIN( 659)				int _g15 = 0;
HXDLIN( 659)				while((_g15 < buttons->length)){
HXDLIN( 659)					int button15 = buttons->__get(_g15);
HXDLIN( 659)					_g15 = (_g15 + 1);
HXDLIN( 659)					action15->addGamepad(button15,state15,id);
            				}
            			}
            			break;
            			case (int)8: {
HXDLIN( 659)				 ::flixel::input::actions::FlxActionDigital action16 = this->_cheat;
HXDLIN( 659)				int state16 = 2;
HXDLIN( 659)				int _g16 = 0;
HXDLIN( 659)				while((_g16 < buttons->length)){
HXDLIN( 659)					int button16 = buttons->__get(_g16);
HXDLIN( 659)					_g16 = (_g16 + 1);
HXDLIN( 659)					action16->addGamepad(button16,state16,id);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,bindButtons,(void))

void Controls_obj::unbindButtons( ::Control control,int gamepadID,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_672_unbindButtons)
HXDLIN( 672)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 672)				::Controls_obj::removeButtons(this->_up,gamepadID,buttons);
HXDLIN( 672)				::Controls_obj::removeButtons(this->_upP,gamepadID,buttons);
HXDLIN( 672)				::Controls_obj::removeButtons(this->_upR,gamepadID,buttons);
            			}
            			break;
            			case (int)1: {
HXDLIN( 672)				::Controls_obj::removeButtons(this->_left,gamepadID,buttons);
HXDLIN( 672)				::Controls_obj::removeButtons(this->_leftP,gamepadID,buttons);
HXDLIN( 672)				::Controls_obj::removeButtons(this->_leftR,gamepadID,buttons);
            			}
            			break;
            			case (int)2: {
HXDLIN( 672)				::Controls_obj::removeButtons(this->_right,gamepadID,buttons);
HXDLIN( 672)				::Controls_obj::removeButtons(this->_rightP,gamepadID,buttons);
HXDLIN( 672)				::Controls_obj::removeButtons(this->_rightR,gamepadID,buttons);
            			}
            			break;
            			case (int)3: {
HXDLIN( 672)				::Controls_obj::removeButtons(this->_down,gamepadID,buttons);
HXDLIN( 672)				::Controls_obj::removeButtons(this->_downP,gamepadID,buttons);
HXDLIN( 672)				::Controls_obj::removeButtons(this->_downR,gamepadID,buttons);
            			}
            			break;
            			case (int)4: {
HXDLIN( 672)				::Controls_obj::removeButtons(this->_reset,gamepadID,buttons);
            			}
            			break;
            			case (int)5: {
HXDLIN( 672)				::Controls_obj::removeButtons(this->_accept,gamepadID,buttons);
            			}
            			break;
            			case (int)6: {
HXDLIN( 672)				::Controls_obj::removeButtons(this->_back,gamepadID,buttons);
            			}
            			break;
            			case (int)7: {
HXDLIN( 672)				::Controls_obj::removeButtons(this->_pause,gamepadID,buttons);
            			}
            			break;
            			case (int)8: {
HXDLIN( 672)				::Controls_obj::removeButtons(this->_cheat,gamepadID,buttons);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,unbindButtons,(void))

::Array< int > Controls_obj::getInputsFor( ::Control control, ::Device device,::Array< int > list){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_696_getInputsFor)
HXLINE( 697)		if (::hx::IsNull( list )) {
HXLINE( 698)			list = ::Array_obj< int >::__new(0);
            		}
HXLINE( 700)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 703)				int _g = 0;
HXDLIN( 703)				::Array< ::Dynamic> _g1 = this->getActionFromControl(control)->inputs;
HXDLIN( 703)				while((_g < _g1->length)){
HXLINE( 703)					 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 703)					_g = (_g + 1);
HXLINE( 705)					if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE( 706)						list->push(input->inputID);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 708)				int id = device->_hx_getInt(0);
HXLINE( 709)				{
HXLINE( 709)					int _g2 = 0;
HXDLIN( 709)					::Array< ::Dynamic> _g3 = this->getActionFromControl(control)->inputs;
HXDLIN( 709)					while((_g2 < _g3->length)){
HXLINE( 709)						 ::flixel::input::actions::FlxActionInput input1 = _g3->__get(_g2).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 709)						_g2 = (_g2 + 1);
HXLINE( 711)						if ((input1->deviceID == id)) {
HXLINE( 712)							list->push(input1->inputID);
            						}
            					}
            				}
            			}
            			break;
            		}
HXLINE( 715)		return list;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,getInputsFor,return )

void Controls_obj::removeDevice( ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_720_removeDevice)
HXDLIN( 720)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 723)				this->setKeyboardScheme(::KeyboardScheme_obj::None_dyn(),null());
            			}
            			break;
            			case (int)1: {
HXLINE( 724)				int id = device->_hx_getInt(0);
HXLINE( 725)				this->removeGamepad(id);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,removeDevice,(void))

void Controls_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_318_init)
HXLINE( 319)		 ::flixel::input::actions::FlxActionManager actions =  ::flixel::input::actions::FlxActionManager_obj::__alloc( HX_CTX );
HXLINE( 320)		::flixel::FlxG_obj::inputs->add_flixel_input_actions_FlxActionManager(actions);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,init,(void))

void Controls_obj::addKeys( ::flixel::input::actions::FlxActionDigital action,::Array< int > keys,int state){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_476_addKeys)
HXDLIN( 476)		int _g = 0;
HXDLIN( 476)		while((_g < keys->length)){
HXDLIN( 476)			int key = keys->__get(_g);
HXDLIN( 476)			_g = (_g + 1);
HXLINE( 477)			action->addKey(key,state);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,addKeys,(void))

void Controls_obj::removeKeys( ::flixel::input::actions::FlxActionDigital action,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_481_removeKeys)
HXLINE( 482)		int i = action->inputs->length;
HXLINE( 483)		while(true){
HXLINE( 483)			i = (i - 1);
HXDLIN( 483)			if (!(((i + 1) > 0))) {
HXLINE( 483)				goto _hx_goto_563;
            			}
HXLINE( 485)			 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 486)			bool _hx_tmp;
HXDLIN( 486)			if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE( 486)				_hx_tmp = (keys->indexOf(input->inputID,null()) != -1);
            			}
            			else {
HXLINE( 486)				_hx_tmp = false;
            			}
HXDLIN( 486)			if (_hx_tmp) {
HXLINE( 487)				action->remove(input,null());
            			}
            		}
            		_hx_goto_563:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,removeKeys,(void))

void Controls_obj::addButtons( ::flixel::input::actions::FlxActionDigital action,::Array< int > buttons,int state,int id){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_680_addButtons)
HXDLIN( 680)		int _g = 0;
HXDLIN( 680)		while((_g < buttons->length)){
HXDLIN( 680)			int button = buttons->__get(_g);
HXDLIN( 680)			_g = (_g + 1);
HXLINE( 681)			action->addGamepad(button,state,id);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Controls_obj,addButtons,(void))

void Controls_obj::removeButtons( ::flixel::input::actions::FlxActionDigital action,int gamepadID,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_685_removeButtons)
HXLINE( 686)		int i = action->inputs->length;
HXLINE( 687)		while(true){
HXLINE( 687)			i = (i - 1);
HXDLIN( 687)			if (!(((i + 1) > 0))) {
HXLINE( 687)				goto _hx_goto_567;
            			}
HXLINE( 689)			 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 690)			bool _hx_tmp;
HXDLIN( 690)			bool _hx_tmp1;
HXDLIN( 690)			if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 690)				if ((gamepadID != -1)) {
HXLINE( 690)					_hx_tmp1 = (input->deviceID == gamepadID);
            				}
            				else {
HXLINE( 690)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE( 690)				_hx_tmp1 = false;
            			}
HXDLIN( 690)			if (_hx_tmp1) {
HXLINE( 690)				_hx_tmp = (buttons->indexOf(input->inputID,null()) != -1);
            			}
            			else {
HXLINE( 690)				_hx_tmp = false;
            			}
HXDLIN( 690)			if (_hx_tmp) {
HXLINE( 691)				action->remove(input,null());
            			}
            		}
            		_hx_goto_567:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,removeButtons,(void))

bool Controls_obj::isDevice( ::flixel::input::actions::FlxActionInput input, ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_731_isDevice)
HXDLIN( 731)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 733)				return ::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() );
            			}
            			break;
            			case (int)1: {
HXLINE( 734)				int id = device->_hx_getInt(0);
HXDLIN( 734)				if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 734)					if ((id != -1)) {
HXLINE( 734)						return (input->deviceID == id);
            					}
            					else {
HXLINE( 734)						return true;
            					}
            				}
            				else {
HXLINE( 734)					return false;
            				}
            			}
            			break;
            		}
HXLINE( 731)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,isDevice,return )

bool Controls_obj::isGamepad( ::flixel::input::actions::FlxActionInput input,int deviceID){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_740_isGamepad)
HXDLIN( 740)		if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXDLIN( 740)			if ((deviceID != -1)) {
HXDLIN( 740)				return (input->deviceID == deviceID);
            			}
            			else {
HXDLIN( 740)				return true;
            			}
            		}
            		else {
HXDLIN( 740)			return false;
            		}
HXDLIN( 740)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,isGamepad,return )


::hx::ObjectPtr< Controls_obj > Controls_obj::__new(::String name, ::KeyboardScheme __o_scheme) {
	::hx::ObjectPtr< Controls_obj > __this = new Controls_obj();
	__this->__construct(name,__o_scheme);
	return __this;
}

::hx::ObjectPtr< Controls_obj > Controls_obj::__alloc(::hx::Ctx *_hx_ctx,::String name, ::KeyboardScheme __o_scheme) {
	Controls_obj *__this = (Controls_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Controls_obj), true, "Controls"));
	*(void **)__this = Controls_obj::_hx_vtable;
	__this->__construct(name,__o_scheme);
	return __this;
}

Controls_obj::Controls_obj()
{
}

void Controls_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Controls);
	HX_MARK_MEMBER_NAME(_up,"_up");
	HX_MARK_MEMBER_NAME(_left,"_left");
	HX_MARK_MEMBER_NAME(_right,"_right");
	HX_MARK_MEMBER_NAME(_down,"_down");
	HX_MARK_MEMBER_NAME(_upP,"_upP");
	HX_MARK_MEMBER_NAME(_leftP,"_leftP");
	HX_MARK_MEMBER_NAME(_rightP,"_rightP");
	HX_MARK_MEMBER_NAME(_downP,"_downP");
	HX_MARK_MEMBER_NAME(_upR,"_upR");
	HX_MARK_MEMBER_NAME(_leftR,"_leftR");
	HX_MARK_MEMBER_NAME(_rightR,"_rightR");
	HX_MARK_MEMBER_NAME(_downR,"_downR");
	HX_MARK_MEMBER_NAME(_accept,"_accept");
	HX_MARK_MEMBER_NAME(_back,"_back");
	HX_MARK_MEMBER_NAME(_pause,"_pause");
	HX_MARK_MEMBER_NAME(_reset,"_reset");
	HX_MARK_MEMBER_NAME(_cheat,"_cheat");
	HX_MARK_MEMBER_NAME(byName,"byName");
	HX_MARK_MEMBER_NAME(gamepadsAdded,"gamepadsAdded");
	HX_MARK_MEMBER_NAME(keyboardScheme,"keyboardScheme");
	 ::flixel::input::actions::FlxActionSet_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Controls_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_up,"_up");
	HX_VISIT_MEMBER_NAME(_left,"_left");
	HX_VISIT_MEMBER_NAME(_right,"_right");
	HX_VISIT_MEMBER_NAME(_down,"_down");
	HX_VISIT_MEMBER_NAME(_upP,"_upP");
	HX_VISIT_MEMBER_NAME(_leftP,"_leftP");
	HX_VISIT_MEMBER_NAME(_rightP,"_rightP");
	HX_VISIT_MEMBER_NAME(_downP,"_downP");
	HX_VISIT_MEMBER_NAME(_upR,"_upR");
	HX_VISIT_MEMBER_NAME(_leftR,"_leftR");
	HX_VISIT_MEMBER_NAME(_rightR,"_rightR");
	HX_VISIT_MEMBER_NAME(_downR,"_downR");
	HX_VISIT_MEMBER_NAME(_accept,"_accept");
	HX_VISIT_MEMBER_NAME(_back,"_back");
	HX_VISIT_MEMBER_NAME(_pause,"_pause");
	HX_VISIT_MEMBER_NAME(_reset,"_reset");
	HX_VISIT_MEMBER_NAME(_cheat,"_cheat");
	HX_VISIT_MEMBER_NAME(byName,"byName");
	HX_VISIT_MEMBER_NAME(gamepadsAdded,"gamepadsAdded");
	HX_VISIT_MEMBER_NAME(keyboardScheme,"keyboardScheme");
	 ::flixel::input::actions::FlxActionSet_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Controls_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"UP") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { return ::hx::Val( _up ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { return ::hx::Val( _upP ); }
		if (HX_FIELD_EQ(inName,"_upR") ) { return ::hx::Val( _upR ); }
		if (HX_FIELD_EQ(inName,"LEFT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT() ); }
		if (HX_FIELD_EQ(inName,"DOWN") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN() ); }
		if (HX_FIELD_EQ(inName,"UP_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP_P() ); }
		if (HX_FIELD_EQ(inName,"UP_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP_R() ); }
		if (HX_FIELD_EQ(inName,"BACK") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_BACK() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { return ::hx::Val( _left ); }
		if (HX_FIELD_EQ(inName,"_down") ) { return ::hx::Val( _down ); }
		if (HX_FIELD_EQ(inName,"_back") ) { return ::hx::Val( _back ); }
		if (HX_FIELD_EQ(inName,"RIGHT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT() ); }
		if (HX_FIELD_EQ(inName,"PAUSE") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_PAUSE() ); }
		if (HX_FIELD_EQ(inName,"RESET") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RESET() ); }
		if (HX_FIELD_EQ(inName,"CHEAT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_CHEAT() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { return ::hx::Val( _right ); }
		if (HX_FIELD_EQ(inName,"_leftP") ) { return ::hx::Val( _leftP ); }
		if (HX_FIELD_EQ(inName,"_downP") ) { return ::hx::Val( _downP ); }
		if (HX_FIELD_EQ(inName,"_leftR") ) { return ::hx::Val( _leftR ); }
		if (HX_FIELD_EQ(inName,"_downR") ) { return ::hx::Val( _downR ); }
		if (HX_FIELD_EQ(inName,"_pause") ) { return ::hx::Val( _pause ); }
		if (HX_FIELD_EQ(inName,"_reset") ) { return ::hx::Val( _reset ); }
		if (HX_FIELD_EQ(inName,"_cheat") ) { return ::hx::Val( _cheat ); }
		if (HX_FIELD_EQ(inName,"byName") ) { return ::hx::Val( byName ); }
		if (HX_FIELD_EQ(inName,"get_UP") ) { return ::hx::Val( get_UP_dyn() ); }
		if (HX_FIELD_EQ(inName,"LEFT_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT_P() ); }
		if (HX_FIELD_EQ(inName,"DOWN_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN_P() ); }
		if (HX_FIELD_EQ(inName,"LEFT_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT_R() ); }
		if (HX_FIELD_EQ(inName,"DOWN_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN_R() ); }
		if (HX_FIELD_EQ(inName,"ACCEPT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_ACCEPT() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyTo") ) { return ::hx::Val( copyTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { return ::hx::Val( _rightP ); }
		if (HX_FIELD_EQ(inName,"_rightR") ) { return ::hx::Val( _rightR ); }
		if (HX_FIELD_EQ(inName,"_accept") ) { return ::hx::Val( _accept ); }
		if (HX_FIELD_EQ(inName,"RIGHT_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT_P() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT_R() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_LEFT") ) { return ::hx::Val( get_LEFT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN") ) { return ::hx::Val( get_DOWN_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_UP_P") ) { return ::hx::Val( get_UP_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_UP_R") ) { return ::hx::Val( get_UP_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_BACK") ) { return ::hx::Val( get_BACK_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindKeys") ) { return ::hx::Val( bindKeys_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_RIGHT") ) { return ::hx::Val( get_RIGHT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_PAUSE") ) { return ::hx::Val( get_PAUSE_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RESET") ) { return ::hx::Val( get_RESET_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_CHEAT") ) { return ::hx::Val( get_CHEAT_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_LEFT_P") ) { return ::hx::Val( get_LEFT_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN_P") ) { return ::hx::Val( get_DOWN_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_LEFT_R") ) { return ::hx::Val( get_LEFT_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN_R") ) { return ::hx::Val( get_DOWN_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ACCEPT") ) { return ::hx::Val( get_ACCEPT_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbindKeys") ) { return ::hx::Val( unbindKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepad") ) { return ::hx::Val( addGamepad_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_RIGHT_P") ) { return ::hx::Val( get_RIGHT_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RIGHT_R") ) { return ::hx::Val( get_RIGHT_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkByName") ) { return ::hx::Val( checkByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindButtons") ) { return ::hx::Val( bindButtons_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"forEachBound") ) { return ::hx::Val( forEachBound_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInputsFor") ) { return ::hx::Val( getInputsFor_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeDevice") ) { return ::hx::Val( removeDevice_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepadsAdded") ) { return ::hx::Val( gamepadsAdded ); }
		if (HX_FIELD_EQ(inName,"removeGamepad") ) { return ::hx::Val( removeGamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbindButtons") ) { return ::hx::Val( unbindButtons_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyboardScheme") ) { return ::hx::Val( keyboardScheme ); }
		if (HX_FIELD_EQ(inName,"replaceBinding") ) { return ::hx::Val( replaceBinding_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeKeyboard") ) { return ::hx::Val( removeKeyboard_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getDialogueName") ) { return ::hx::Val( getDialogueName_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setKeyboardScheme") ) { return ::hx::Val( setKeyboardScheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepadLiteral") ) { return ::hx::Val( addGamepadLiteral_dyn() ); }
		if (HX_FIELD_EQ(inName,"addDefaultGamepad") ) { return ::hx::Val( addDefaultGamepad_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mergeKeyboardScheme") ) { return ::hx::Val( mergeKeyboardScheme_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getActionFromControl") ) { return ::hx::Val( getActionFromControl_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"getDialogueNameFromToken") ) { return ::hx::Val( getDialogueNameFromToken_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Controls_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addKeys") ) { outValue = addKeys_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isDevice") ) { outValue = isDevice_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isGamepad") ) { outValue = isGamepad_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeKeys") ) { outValue = removeKeys_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addButtons") ) { outValue = addButtons_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeButtons") ) { outValue = removeButtons_dyn(); return true; }
	}
	return false;
}

::hx::Val Controls_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { _up=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { _upP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_upR") ) { _upR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_down") ) { _down=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_back") ) { _back=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftP") ) { _leftP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downP") ) { _downP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftR") ) { _leftR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downR") ) { _downR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pause") ) { _pause=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_reset") ) { _reset=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cheat") ) { _cheat=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"byName") ) { byName=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { _rightP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightR") ) { _rightR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_accept") ) { _accept=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepadsAdded") ) { gamepadsAdded=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyboardScheme") ) { keyboardScheme=inValue.Cast<  ::KeyboardScheme >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Controls_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_up",7a,7c,48,00));
	outFields->push(HX_("_left",e6,23,c1,fa));
	outFields->push(HX_("_right",1d,53,4b,e5));
	outFields->push(HX_("_down",41,14,7f,f5));
	outFields->push(HX_("_upP",96,6e,24,3f));
	outFields->push(HX_("_leftP",aa,45,3e,6e));
	outFields->push(HX_("_rightP",93,66,9d,bc));
	outFields->push(HX_("_downP",ef,a4,b2,d9));
	outFields->push(HX_("_upR",98,6e,24,3f));
	outFields->push(HX_("_leftR",ac,45,3e,6e));
	outFields->push(HX_("_rightR",95,66,9d,bc));
	outFields->push(HX_("_downR",f1,a4,b2,d9));
	outFields->push(HX_("_accept",a7,a4,7d,79));
	outFields->push(HX_("_back",06,f6,21,f4));
	outFields->push(HX_("_pause",37,1e,3f,b9));
	outFields->push(HX_("_reset",10,91,af,e2));
	outFields->push(HX_("_cheat",54,de,9d,41));
	outFields->push(HX_("byName",c2,2b,4e,0e));
	outFields->push(HX_("gamepadsAdded",ae,52,a9,94));
	outFields->push(HX_("keyboardScheme",2c,c8,f4,c5));
	outFields->push(HX_("UP",5b,4a,00,00));
	outFields->push(HX_("LEFT",07,d0,70,32));
	outFields->push(HX_("RIGHT",bc,43,52,67));
	outFields->push(HX_("DOWN",62,c0,2e,2d));
	outFields->push(HX_("UP_P",2c,2a,6c,38));
	outFields->push(HX_("LEFT_P",d8,72,4a,4c));
	outFields->push(HX_("RIGHT_P",cd,fd,37,93));
	outFields->push(HX_("DOWN_P",f3,6f,a9,e6));
	outFields->push(HX_("UP_R",2e,2a,6c,38));
	outFields->push(HX_("LEFT_R",da,72,4a,4c));
	outFields->push(HX_("RIGHT_R",cf,fd,37,93));
	outFields->push(HX_("DOWN_R",f5,6f,a9,e6));
	outFields->push(HX_("ACCEPT",08,3f,89,bd));
	outFields->push(HX_("BACK",27,a2,d1,2b));
	outFields->push(HX_("PAUSE",d6,0e,46,3b));
	outFields->push(HX_("RESET",af,81,b6,64));
	outFields->push(HX_("CHEAT",f3,ce,a4,c3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Controls_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_up),HX_("_up",7a,7c,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_left),HX_("_left",e6,23,c1,fa)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_right),HX_("_right",1d,53,4b,e5)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_down),HX_("_down",41,14,7f,f5)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_upP),HX_("_upP",96,6e,24,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_leftP),HX_("_leftP",aa,45,3e,6e)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_rightP),HX_("_rightP",93,66,9d,bc)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_downP),HX_("_downP",ef,a4,b2,d9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_upR),HX_("_upR",98,6e,24,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_leftR),HX_("_leftR",ac,45,3e,6e)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_rightR),HX_("_rightR",95,66,9d,bc)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_downR),HX_("_downR",f1,a4,b2,d9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_accept),HX_("_accept",a7,a4,7d,79)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_back),HX_("_back",06,f6,21,f4)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_pause),HX_("_pause",37,1e,3f,b9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_reset),HX_("_reset",10,91,af,e2)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_cheat),HX_("_cheat",54,de,9d,41)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Controls_obj,byName),HX_("byName",c2,2b,4e,0e)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Controls_obj,gamepadsAdded),HX_("gamepadsAdded",ae,52,a9,94)},
	{::hx::fsObject /*  ::KeyboardScheme */ ,(int)offsetof(Controls_obj,keyboardScheme),HX_("keyboardScheme",2c,c8,f4,c5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Controls_obj_sStaticStorageInfo = 0;
#endif

static ::String Controls_obj_sMemberFields[] = {
	HX_("_up",7a,7c,48,00),
	HX_("_left",e6,23,c1,fa),
	HX_("_right",1d,53,4b,e5),
	HX_("_down",41,14,7f,f5),
	HX_("_upP",96,6e,24,3f),
	HX_("_leftP",aa,45,3e,6e),
	HX_("_rightP",93,66,9d,bc),
	HX_("_downP",ef,a4,b2,d9),
	HX_("_upR",98,6e,24,3f),
	HX_("_leftR",ac,45,3e,6e),
	HX_("_rightR",95,66,9d,bc),
	HX_("_downR",f1,a4,b2,d9),
	HX_("_accept",a7,a4,7d,79),
	HX_("_back",06,f6,21,f4),
	HX_("_pause",37,1e,3f,b9),
	HX_("_reset",10,91,af,e2),
	HX_("_cheat",54,de,9d,41),
	HX_("byName",c2,2b,4e,0e),
	HX_("gamepadsAdded",ae,52,a9,94),
	HX_("keyboardScheme",2c,c8,f4,c5),
	HX_("get_UP",a4,e1,2f,a3),
	HX_("get_LEFT",90,8b,2b,b2),
	HX_("get_RIGHT",13,a0,fb,aa),
	HX_("get_DOWN",eb,7b,e9,ac),
	HX_("get_UP_P",b5,e5,26,b8),
	HX_("get_LEFT_P",a1,e2,d1,3c),
	HX_("get_RIGHT_P",e4,5d,32,19),
	HX_("get_DOWN_P",bc,df,30,d7),
	HX_("get_UP_R",b7,e5,26,b8),
	HX_("get_LEFT_R",a3,e2,d1,3c),
	HX_("get_RIGHT_R",e6,5d,32,19),
	HX_("get_DOWN_R",be,df,30,d7),
	HX_("get_ACCEPT",d1,ae,10,ae),
	HX_("get_BACK",b0,5d,8c,ab),
	HX_("get_PAUSE",2d,6b,ef,7e),
	HX_("get_RESET",06,de,5f,a8),
	HX_("get_CHEAT",4a,2b,4e,07),
	HX_("update",09,86,05,87),
	HX_("checkByName",aa,fe,5f,f0),
	HX_("getDialogueName",39,8d,0f,32),
	HX_("getDialogueNameFromToken",b6,d0,32,d3),
	HX_("getActionFromControl",87,31,3f,3d),
	HX_("forEachBound",34,ae,22,2f),
	HX_("replaceBinding",71,99,ae,a4),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("copyTo",90,1c,33,c9),
	HX_("mergeKeyboardScheme",04,51,83,14),
	HX_("bindKeys",51,26,d1,b4),
	HX_("unbindKeys",aa,0d,95,3a),
	HX_("setKeyboardScheme",6e,4f,d6,5b),
	HX_("removeKeyboard",0b,f9,7f,32),
	HX_("addGamepad",80,0c,10,f1),
	HX_("addGamepadLiteral",cf,54,ef,a8),
	HX_("removeGamepad",bd,3c,40,62),
	HX_("addDefaultGamepad",e1,d7,98,02),
	HX_("bindButtons",04,66,e6,c6),
	HX_("unbindButtons",4b,dc,20,e8),
	HX_("getInputsFor",ea,35,e1,37),
	HX_("removeDevice",fa,77,a5,e0),
	::String(null()) };

::hx::Class Controls_obj::__mClass;

static ::String Controls_obj_sStaticFields[] = {
	HX_("init",10,3b,bb,45),
	HX_("addKeys",b5,24,44,83),
	HX_("removeKeys",58,1c,26,c4),
	HX_("addButtons",20,7e,ff,31),
	HX_("removeButtons",5d,ae,2f,a3),
	HX_("isDevice",20,78,e1,c9),
	HX_("isGamepad",d7,5d,84,8d),
	::String(null())
};

void Controls_obj::__register()
{
	Controls_obj _hx_dummy;
	Controls_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Controls",96,42,6e,11);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Controls_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Controls_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Controls_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Controls_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Controls_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Controls_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

