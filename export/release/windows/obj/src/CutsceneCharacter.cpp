// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_CutsceneCharacter
#include <CutsceneCharacter.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_animate_FlxAnimate
#include <animate/FlxAnimate.h>
#endif
#ifndef INCLUDED_animate_FlxSymbol
#include <animate/FlxSymbol.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8d25c017ce0ddbe3_9_new,"CutsceneCharacter","new",0xda36da11,"CutsceneCharacter.new","CutsceneCharacter.hx",9,0x2ee5d27f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d25c017ce0ddbe3_30_draw,"CutsceneCharacter","draw",0x0f359d33,"CutsceneCharacter.draw","CutsceneCharacter.hx",30,0x2ee5d27f)
HX_LOCAL_STACK_FRAME(_hx_pos_8d25c017ce0ddbe3_37_update,"CutsceneCharacter","update",0x24ece0f8,"CutsceneCharacter.update","CutsceneCharacter.hx",37,0x2ee5d27f)

void CutsceneCharacter_obj::__construct(Float x,Float y,::String anim){
            	HX_GC_STACKFRAME(&_hx_pos_8d25c017ce0ddbe3_9_new)
HXLINE(  17)		this->startedPlayingSound = false;
HXLINE(  14)		this->playingAnim = false;
HXLINE(  11)		this->nestedShit =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  21)		::String library = null();
HXDLIN(  21)		this->coolParse =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getText(::Paths_obj::getPath(((HX_("preload/images/week7/anims/",2a,39,1d,52) + anim) + HX_("/Animation.json",61,fc,54,44)),HX_("TEXT",ad,94,ba,37),library)))->doParse();
HXLINE(  22)		( (::Array< ::Dynamic>)( ::Dynamic( ::Dynamic(this->coolParse->__Field(HX_("AN",ed,38,00,00),::hx::paccDynamic))->__Field(HX_("TL",78,49,00,00),::hx::paccDynamic))->__Field(HX_("L",4c,00,00,00),::hx::paccDynamic)) )->reverse();
HXLINE(  24)		super::__construct(x,y,this->coolParse);
HXLINE(  26)		 ::flixel::graphics::FlxGraphic _hx_tmp = ::Paths_obj::loadImage(((HX_("",00,00,00,00) + anim) + HX_("/spritemap1",89,b1,e0,ab)));
HXDLIN(  26)		::String library1 = null();
HXDLIN(  26)		this->set_frames(::animate::FlxAnimate_obj::fromAnimate(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + anim) + HX_("/spritemap1.json",2d,0f,b9,fc)),HX_("TEXT",ad,94,ba,37),library1)));
            	}

Dynamic CutsceneCharacter_obj::__CreateEmpty() { return new CutsceneCharacter_obj; }

void *CutsceneCharacter_obj::_hx_vtable = 0;

Dynamic CutsceneCharacter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CutsceneCharacter_obj > _hx_result = new CutsceneCharacter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool CutsceneCharacter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x39c55849) {
			if (inClassId<=(int)0x2c01639b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
			} else {
				return inClassId==(int)0x39c55849;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7dab0655 || inClassId==(int)0x7ffaedcb;
	}
}

void CutsceneCharacter_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_8d25c017ce0ddbe3_30_draw)
HXLINE(  31)		this->super::draw();
HXLINE(  33)		this->renderFrame( ::Dynamic(this->coolParse->__Field(HX_("AN",ed,38,00,00),::hx::paccDynamic))->__Field(HX_("TL",78,49,00,00),::hx::paccDynamic),this->coolParse,true);
            	}


void CutsceneCharacter_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_8d25c017ce0ddbe3_37_update)
HXLINE(  38)		this->super::update(elapsed);
HXLINE(  40)		if (this->playingAnim) {
HXLINE(  42)			 ::CutsceneCharacter _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  42)			_hx_tmp->frameTickTypeShit = (_hx_tmp->frameTickTypeShit + elapsed);
HXLINE(  44)			if ((this->frameTickTypeShit >= ((Float)0.041666666666666664))) {
HXLINE(  46)				this->changeFrame(1);
HXLINE(  47)				this->frameTickTypeShit = ( (Float)(0) );
            			}
            		}
HXLINE(  51)		bool _hx_tmp1;
HXDLIN(  51)		if ((this->daFrame >= 1)) {
HXLINE(  51)			_hx_tmp1 = !(this->startedPlayingSound);
            		}
            		else {
HXLINE(  51)			_hx_tmp1 = false;
            		}
HXDLIN(  51)		if (_hx_tmp1) {
HXLINE(  53)			this->startSyncAudio->play(null(),null(),null());
HXLINE(  54)			this->startedPlayingSound = true;
            		}
            	}



::hx::ObjectPtr< CutsceneCharacter_obj > CutsceneCharacter_obj::__new(Float x,Float y,::String anim) {
	::hx::ObjectPtr< CutsceneCharacter_obj > __this = new CutsceneCharacter_obj();
	__this->__construct(x,y,anim);
	return __this;
}

::hx::ObjectPtr< CutsceneCharacter_obj > CutsceneCharacter_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,::String anim) {
	CutsceneCharacter_obj *__this = (CutsceneCharacter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CutsceneCharacter_obj), true, "CutsceneCharacter"));
	*(void **)__this = CutsceneCharacter_obj::_hx_vtable;
	__this->__construct(x,y,anim);
	return __this;
}

CutsceneCharacter_obj::CutsceneCharacter_obj()
{
}

void CutsceneCharacter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CutsceneCharacter);
	HX_MARK_MEMBER_NAME(nestedShit,"nestedShit");
	HX_MARK_MEMBER_NAME(frameTickTypeShit,"frameTickTypeShit");
	HX_MARK_MEMBER_NAME(playingAnim,"playingAnim");
	HX_MARK_MEMBER_NAME(startSyncAudio,"startSyncAudio");
	HX_MARK_MEMBER_NAME(startedPlayingSound,"startedPlayingSound");
	 ::animate::FlxSymbol_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CutsceneCharacter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nestedShit,"nestedShit");
	HX_VISIT_MEMBER_NAME(frameTickTypeShit,"frameTickTypeShit");
	HX_VISIT_MEMBER_NAME(playingAnim,"playingAnim");
	HX_VISIT_MEMBER_NAME(startSyncAudio,"startSyncAudio");
	HX_VISIT_MEMBER_NAME(startedPlayingSound,"startedPlayingSound");
	 ::animate::FlxSymbol_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CutsceneCharacter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nestedShit") ) { return ::hx::Val( nestedShit ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playingAnim") ) { return ::hx::Val( playingAnim ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"startSyncAudio") ) { return ::hx::Val( startSyncAudio ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"frameTickTypeShit") ) { return ::hx::Val( frameTickTypeShit ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"startedPlayingSound") ) { return ::hx::Val( startedPlayingSound ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CutsceneCharacter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"nestedShit") ) { nestedShit=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playingAnim") ) { playingAnim=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"startSyncAudio") ) { startSyncAudio=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"frameTickTypeShit") ) { frameTickTypeShit=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"startedPlayingSound") ) { startedPlayingSound=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CutsceneCharacter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("nestedShit",57,72,ea,8f));
	outFields->push(HX_("frameTickTypeShit",e4,4b,3a,45));
	outFields->push(HX_("playingAnim",9f,10,2a,fa));
	outFields->push(HX_("startSyncAudio",b9,93,c0,18));
	outFields->push(HX_("startedPlayingSound",62,11,34,8c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CutsceneCharacter_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(CutsceneCharacter_obj,nestedShit),HX_("nestedShit",57,72,ea,8f)},
	{::hx::fsFloat,(int)offsetof(CutsceneCharacter_obj,frameTickTypeShit),HX_("frameTickTypeShit",e4,4b,3a,45)},
	{::hx::fsBool,(int)offsetof(CutsceneCharacter_obj,playingAnim),HX_("playingAnim",9f,10,2a,fa)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(CutsceneCharacter_obj,startSyncAudio),HX_("startSyncAudio",b9,93,c0,18)},
	{::hx::fsBool,(int)offsetof(CutsceneCharacter_obj,startedPlayingSound),HX_("startedPlayingSound",62,11,34,8c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CutsceneCharacter_obj_sStaticStorageInfo = 0;
#endif

static ::String CutsceneCharacter_obj_sMemberFields[] = {
	HX_("nestedShit",57,72,ea,8f),
	HX_("frameTickTypeShit",e4,4b,3a,45),
	HX_("playingAnim",9f,10,2a,fa),
	HX_("startSyncAudio",b9,93,c0,18),
	HX_("startedPlayingSound",62,11,34,8c),
	HX_("draw",04,2c,70,42),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class CutsceneCharacter_obj::__mClass;

void CutsceneCharacter_obj::__register()
{
	CutsceneCharacter_obj _hx_dummy;
	CutsceneCharacter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CutsceneCharacter",9f,7d,42,4f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CutsceneCharacter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CutsceneCharacter_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CutsceneCharacter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CutsceneCharacter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

