// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_shaders_VHSShader
#include <shaders/VHSShader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2cf06360d52bb192_83_new,"shaders.VHSShader","new",0x157bf018,"shaders.VHSShader.new","shaders/VHSShader.hx",83,0xd9f017d9)
static const Float _hx_array_data_3c144426_1[] = {
	0.0,
};
static const Float _hx_array_data_3c144426_2[] = {
	0.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2cf06360d52bb192_90_update,"shaders.VHSShader","update",0x121a0951,"shaders.VHSShader.update","shaders/VHSShader.hx",90,0xd9f017d9)
HX_LOCAL_STACK_FRAME(_hx_pos_2cf06360d52bb192_96_setNoisePercent,"shaders.VHSShader","setNoisePercent",0x5a2c70c5,"shaders.VHSShader.setNoisePercent","shaders/VHSShader.hx",96,0xd9f017d9)
namespace shaders{

void VHSShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2cf06360d52bb192_83_new)
HXLINE( 182)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("\r\n        varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\r\n\r\n        uniform float iTime;\r\n\t\tuniform sampler2D noiseTexture;\r\n\t\tuniform float noisePercent;\r\n\r\n\t\tfloat rand(vec2 co)\r\n\t\t{\r\n\t\t\tfloat a = 12.9898;\r\n\t\t\tfloat b = 78.233;\r\n\t\t\tfloat c = 43758.5453;\r\n\t\t\tfloat dt= dot(co.xy ,vec2(a,b));\r\n\t\t\tfloat sn= mod(dt,3.14);\r\n\t\t\treturn fract(sin(sn) * c);\r\n\t\t}\r\n\t\t\r\n\t\tfloat noise(vec2 p)\r\n\t\t{\r\n\t\t\treturn rand(p) * noisePercent;\r\n\t\t}\r\n\t\t\r\n\r\n\t\tfloat onOff(float a, float b, float c)\r\n\t\t{\r\n\t\t\treturn step(c, sin(iTime + a*cos(iTime*b)));\r\n\t\t}\r\n\r\n\t\tfloat ramp(float y, float start, float end)\r\n\t\t{\r\n\t\t\tfloat inside = step(start,y) - step(end,y);\r\n\t\t\tfloat fact = (y-start)/(end-start)*inside;\r\n\t\t\treturn (1.-fact) * inside;\r\n\t\t}\r\n\r\n\t\tfloat stripes(vec2 uv)\r\n\t\t{\r\n\t\t\tfloat noi = noise(uv*vec2(0.5,1.) + vec2(1.,3.));\r\n\t\t\treturn ramp(mod(uv.y*4. + iTime/2.+sin(iTime + sin(iTime*0.63)),1.),0.5,0.6)*noi;\r\n\t\t}\r\n\r\n\t\tvec3 getVideo(vec2 uv)\r\n\t\t{\r\n\t\t\tvec2 look = uv;\r\n\t\t\tfloat window = 1./(1.+20.*(look.y-mod(iTime/4.,1.))*(look.y-mod(iTime/4.,1.)));\r\n\t\t\tlook.x = look.x + sin(look.y*10. + iTime)/50.*onOff(4.,4.,.3)*(1.+cos(iTime*80.))*window;\r\n\t\t\tfloat vShift = 0.4*onOff(2.,3.,.9) * (sin(iTime)*sin(iTime*20.) + (0.5 + 0.1*sin(iTime*200.)*cos(iTime)));\r\n\t\t\tlook.y = mod(look.y + vShift, 1.);\r\n\t\t\tvec3 video = vec3(flixel_texture2D(bitmap,look));\r\n\t\t\treturn video;\r\n\t\t}\r\n\r\n\t\tvec2 screenDistort(vec2 uv)\r\n\t\t{\r\n\t\t\tuv -= vec2(.5,.5);\r\n\t\t\tuv = uv*1.2*(1./1.2+2.*uv.x*uv.x*uv.y*uv.y);\r\n\t\t\tuv += vec2(.5,.5);\r\n\t\t\treturn uv;\r\n\t\t}\r\n\r\n\t\tvoid main()\r\n        {\r\n\t\t\tvec2 uv = openfl_TextureCoordv.xy;\r\n\t\t\tuv = screenDistort(uv);\r\n\t\t\tvec3 video = getVideo(uv);\r\n\t\t\tfloat vigAmt = 3.+.3*sin(iTime + 5.*cos(iTime*5.));\r\n\t\t\tfloat vignette = (1.-vigAmt*(uv.y-.5)*(uv.y-.5))*(1.-vigAmt*(uv.x-.5)*(uv.x-.5));\r\n\t\t\t\r\n\t\t\tvideo += stripes(uv);\r\n\t\t\tvideo += noise(uv*2.)/2.;\r\n\t\t\tvideo *= vignette;\r\n\t\t\tvideo *= (12.+mod(uv.y*30.+iTime,1.))/13.;\r\n\t\t\t\r\n\t\t\tgl_FragColor = vec4(video,1.0);\r\n        }",d7,cc,1f,20);
            		}
HXLINE( 174)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}",f3,1e,fa,79);
            		}
HXLINE(  84)		super::__construct();
HXLINE(  85)		this->iTime->value = ::Array_obj< Float >::fromData( _hx_array_data_3c144426_1,1);
HXLINE(  86)		this->noisePercent->value = ::Array_obj< Float >::fromData( _hx_array_data_3c144426_2,1);
HXLINE(   5)		this->_hx___isGenerated = true;
HXDLIN(   5)		this->_hx___initGL();
            	}

Dynamic VHSShader_obj::__CreateEmpty() { return new VHSShader_obj; }

void *VHSShader_obj::_hx_vtable = 0;

Dynamic VHSShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VHSShader_obj > _hx_result = new VHSShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VHSShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1efca5b6) {
		if (inClassId<=(int)0x04f93fcd) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x04f93fcd;
		} else {
			return inClassId==(int)0x1efca5b6;
		}
	} else {
		return inClassId==(int)0x640f0bf8 || inClassId==(int)0x78d8d737;
	}
}

void VHSShader_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_2cf06360d52bb192_90_update)
HXLINE(  91)		::Array< Float > base = this->iTime->value;
HXDLIN(  91)		int _hx_tmp = 0;
HXDLIN(  91)		base[_hx_tmp] = (base->__get(_hx_tmp) + elapsed);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VHSShader_obj,update,(void))

void VHSShader_obj::setNoisePercent(Float amount){
            	HX_STACKFRAME(&_hx_pos_2cf06360d52bb192_96_setNoisePercent)
HXDLIN(  96)		this->noisePercent->value[0] = amount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VHSShader_obj,setNoisePercent,(void))


::hx::ObjectPtr< VHSShader_obj > VHSShader_obj::__new() {
	::hx::ObjectPtr< VHSShader_obj > __this = new VHSShader_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< VHSShader_obj > VHSShader_obj::__alloc(::hx::Ctx *_hx_ctx) {
	VHSShader_obj *__this = (VHSShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VHSShader_obj), true, "shaders.VHSShader"));
	*(void **)__this = VHSShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VHSShader_obj::VHSShader_obj()
{
}

void VHSShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VHSShader);
	HX_MARK_MEMBER_NAME(iTime,"iTime");
	HX_MARK_MEMBER_NAME(noiseTexture,"noiseTexture");
	HX_MARK_MEMBER_NAME(noisePercent,"noisePercent");
	 ::flixel::graphics::tile::FlxGraphicsShader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VHSShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(iTime,"iTime");
	HX_VISIT_MEMBER_NAME(noiseTexture,"noiseTexture");
	HX_VISIT_MEMBER_NAME(noisePercent,"noisePercent");
	 ::flixel::graphics::tile::FlxGraphicsShader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val VHSShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"iTime") ) { return ::hx::Val( iTime ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"noiseTexture") ) { return ::hx::Val( noiseTexture ); }
		if (HX_FIELD_EQ(inName,"noisePercent") ) { return ::hx::Val( noisePercent ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setNoisePercent") ) { return ::hx::Val( setNoisePercent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VHSShader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"iTime") ) { iTime=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"noiseTexture") ) { noiseTexture=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noisePercent") ) { noisePercent=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VHSShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("iTime",16,e1,e8,ac));
	outFields->push(HX_("noiseTexture",61,e8,c7,be));
	outFields->push(HX_("noisePercent",4b,ca,c1,98));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VHSShader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(VHSShader_obj,iTime),HX_("iTime",16,e1,e8,ac)},
	{::hx::fsObject /*  ::openfl::display::ShaderInput_openfl_display_BitmapData */ ,(int)offsetof(VHSShader_obj,noiseTexture),HX_("noiseTexture",61,e8,c7,be)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(VHSShader_obj,noisePercent),HX_("noisePercent",4b,ca,c1,98)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VHSShader_obj_sStaticStorageInfo = 0;
#endif

static ::String VHSShader_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	HX_("setNoisePercent",0d,9d,77,b7),
	HX_("iTime",16,e1,e8,ac),
	HX_("noiseTexture",61,e8,c7,be),
	HX_("noisePercent",4b,ca,c1,98),
	::String(null()) };

::hx::Class VHSShader_obj::__mClass;

void VHSShader_obj::__register()
{
	VHSShader_obj _hx_dummy;
	VHSShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("shaders.VHSShader",26,44,14,3c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VHSShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VHSShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VHSShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VHSShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace shaders
