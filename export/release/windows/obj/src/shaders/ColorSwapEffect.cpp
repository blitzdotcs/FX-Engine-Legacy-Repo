// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_shaders_ColorSwapEffect
#include <shaders/ColorSwapEffect.h>
#endif
#ifndef INCLUDED_shaders_ColorSwapShader
#include <shaders/ColorSwapShader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c1fae3991f03e7f7_100_new,"shaders.ColorSwapEffect","new",0xb4b1a259,"shaders.ColorSwapEffect.new","shaders/ColorSwapShader.hx",100,0x46c26f64)
static const Float _hx_array_data_871181e7_1[] = {
	(Float)0,
};
static const Float _hx_array_data_871181e7_2[] = {
	(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c1fae3991f03e7f7_114_update,"shaders.ColorSwapEffect","update",0xf4f675b0,"shaders.ColorSwapEffect.update","shaders/ColorSwapShader.hx",114,0x46c26f64)
namespace shaders{

void ColorSwapEffect_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_c1fae3991f03e7f7_100_new)
HXLINE( 104)		this->hasOutline = false;
HXLINE( 103)		this->hueShit = ((Float)0);
HXLINE( 102)		this->shader =  ::shaders::ColorSwapShader_obj::__alloc( HX_CTX );
HXLINE( 108)		this->shader->uTime->value = ::Array_obj< Float >::fromData( _hx_array_data_871181e7_1,1);
HXLINE( 109)		this->shader->money->value = ::Array_obj< Float >::fromData( _hx_array_data_871181e7_2,1);
HXLINE( 110)		this->shader->awesomeOutline->value = ::Array_obj< bool >::__new(1)->init(0,this->hasOutline);
            	}

Dynamic ColorSwapEffect_obj::__CreateEmpty() { return new ColorSwapEffect_obj; }

void *ColorSwapEffect_obj::_hx_vtable = 0;

Dynamic ColorSwapEffect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColorSwapEffect_obj > _hx_result = new ColorSwapEffect_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorSwapEffect_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3276f339;
}

void ColorSwapEffect_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c1fae3991f03e7f7_114_update)
HXLINE( 115)		::Array< Float > base = this->shader->uTime->value;
HXDLIN( 115)		int _hx_tmp = 0;
HXDLIN( 115)		base[_hx_tmp] = (base->__get(_hx_tmp) + elapsed);
HXLINE( 116)		 ::shaders::ColorSwapEffect _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 116)		_hx_tmp1->hueShit = (_hx_tmp1->hueShit + elapsed);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorSwapEffect_obj,update,(void))


::hx::ObjectPtr< ColorSwapEffect_obj > ColorSwapEffect_obj::__new() {
	::hx::ObjectPtr< ColorSwapEffect_obj > __this = new ColorSwapEffect_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ColorSwapEffect_obj > ColorSwapEffect_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ColorSwapEffect_obj *__this = (ColorSwapEffect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ColorSwapEffect_obj), true, "shaders.ColorSwapEffect"));
	*(void **)__this = ColorSwapEffect_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ColorSwapEffect_obj::ColorSwapEffect_obj()
{
}

void ColorSwapEffect_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColorSwapEffect);
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(hueShit,"hueShit");
	HX_MARK_MEMBER_NAME(hasOutline,"hasOutline");
	HX_MARK_END_CLASS();
}

void ColorSwapEffect_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(hueShit,"hueShit");
	HX_VISIT_MEMBER_NAME(hasOutline,"hasOutline");
}

::hx::Val ColorSwapEffect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return ::hx::Val( shader ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hueShit") ) { return ::hx::Val( hueShit ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hasOutline") ) { return ::hx::Val( hasOutline ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ColorSwapEffect_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::shaders::ColorSwapShader >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hueShit") ) { hueShit=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hasOutline") ) { hasOutline=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ColorSwapEffect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("shader",25,bf,20,1d));
	outFields->push(HX_("hueShit",98,08,1e,0b));
	outFields->push(HX_("hasOutline",48,ff,71,6c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ColorSwapEffect_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::shaders::ColorSwapShader */ ,(int)offsetof(ColorSwapEffect_obj,shader),HX_("shader",25,bf,20,1d)},
	{::hx::fsFloat,(int)offsetof(ColorSwapEffect_obj,hueShit),HX_("hueShit",98,08,1e,0b)},
	{::hx::fsBool,(int)offsetof(ColorSwapEffect_obj,hasOutline),HX_("hasOutline",48,ff,71,6c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ColorSwapEffect_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorSwapEffect_obj_sMemberFields[] = {
	HX_("shader",25,bf,20,1d),
	HX_("hueShit",98,08,1e,0b),
	HX_("hasOutline",48,ff,71,6c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class ColorSwapEffect_obj::__mClass;

void ColorSwapEffect_obj::__register()
{
	ColorSwapEffect_obj _hx_dummy;
	ColorSwapEffect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("shaders.ColorSwapEffect",e7,81,11,87);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ColorSwapEffect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ColorSwapEffect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorSwapEffect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorSwapEffect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace shaders
