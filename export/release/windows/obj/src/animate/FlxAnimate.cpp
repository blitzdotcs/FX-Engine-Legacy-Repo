// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_animate_FlxAnimate
#include <animate/FlxAnimate.h>
#endif
#ifndef INCLUDED_animate_FlxSymbol
#include <animate/FlxSymbol.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6d7628b6499f5178_18_new,"animate.FlxAnimate","new",0x2441900e,"animate.FlxAnimate.new","animate/FlxAnimate.hx",18,0xcc05fe81)
HX_LOCAL_STACK_FRAME(_hx_pos_6d7628b6499f5178_38_draw,"animate.FlxAnimate","draw",0x8e8a2496,"animate.FlxAnimate.draw","animate/FlxAnimate.hx",38,0xcc05fe81)
HX_LOCAL_STACK_FRAME(_hx_pos_6d7628b6499f5178_66_update,"animate.FlxAnimate","update",0x87fc471b,"animate.FlxAnimate.update","animate/FlxAnimate.hx",66,0xcc05fe81)
HX_LOCAL_STACK_FRAME(_hx_pos_6d7628b6499f5178_92_fromAnimate,"animate.FlxAnimate","fromAnimate",0xe8e75c05,"animate.FlxAnimate.fromAnimate","animate/FlxAnimate.hx",92,0xcc05fe81)
namespace animate{

void FlxAnimate_obj::__construct(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_6d7628b6499f5178_18_new)
HXLINE(  63)		this->animFrameRate = 24;
HXLINE(  62)		this->frameTickTypeShit = ((Float)0);
HXLINE(  61)		this->playingAnim = false;
HXLINE(  57)		this->curFrame = 0;
HXLINE(  24)		this->swagFrames = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  22)		this->loadedQueue = false;
HXLINE(  28)		::String folder = HX_("tightBars",3e,0f,ba,51);
HXLINE(  29)		::String library = null();
HXDLIN(  29)		this->coolParse =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getText(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + folder) + HX_("/Animation.json",61,fc,54,44)),HX_("TEXT",ad,94,ba,37),library)))->doParse();
HXLINE(  30)		( (::Array< ::Dynamic>)( ::Dynamic( ::Dynamic(this->coolParse->__Field(HX_("AN",ed,38,00,00),::hx::paccDynamic))->__Field(HX_("TL",78,49,00,00),::hx::paccDynamic))->__Field(HX_("L",4c,00,00,00),::hx::paccDynamic)) )->reverse();
HXLINE(  31)		super::__construct(x,y,this->coolParse);
HXLINE(  33)		::String library1 = null();
HXDLIN(  33)		::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + folder) + HX_("/spritemap1.png",44,d7,2f,09)),HX_("TEXT",ad,94,ba,37),library1);
HXDLIN(  33)		::String library2 = null();
HXDLIN(  33)		this->set_frames(::animate::FlxAnimate_obj::fromAnimate(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + folder) + HX_("/spritemap1.json",2d,0f,b9,fc)),HX_("TEXT",ad,94,ba,37),library2)));
            	}

Dynamic FlxAnimate_obj::__CreateEmpty() { return new FlxAnimate_obj; }

void *FlxAnimate_obj::_hx_vtable = 0;

Dynamic FlxAnimate_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAnimate_obj > _hx_result = new FlxAnimate_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxAnimate_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x68ae11ac) {
		if (inClassId<=(int)0x39c55849) {
			if (inClassId<=(int)0x2c01639b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
			} else {
				return inClassId==(int)0x39c55849;
			}
		} else {
			return inClassId==(int)0x68ae11ac;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FlxAnimate_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_6d7628b6499f5178_38_draw)
HXLINE(  39)		this->super::draw();
HXLINE(  41)		this->renderFrame( ::Dynamic(this->coolParse->__Field(HX_("AN",ed,38,00,00),::hx::paccDynamic))->__Field(HX_("TL",78,49,00,00),::hx::paccDynamic),this->coolParse,true);
HXLINE(  43)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  43)		if (_this->keyManager->checkStatusUnsafe(69,_this->status)) {
HXLINE(  45)			{
HXLINE(  45)				 ::Dynamic shit = ::animate::FlxSymbol_obj::nestedShit->keys();
HXDLIN(  45)				while(( (bool)(shit->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  45)					int shit1 = ( (int)(shit->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  47)					{
HXLINE(  47)						int _g = 0;
HXDLIN(  47)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::animate::FlxSymbol_obj::nestedShit->get(shit1)) );
HXDLIN(  47)						while((_g < _g1->length)){
HXLINE(  47)							 ::animate::FlxSymbol spr = _g1->__get(_g).StaticCast<  ::animate::FlxSymbol >();
HXDLIN(  47)							_g = (_g + 1);
HXLINE(  49)							spr->draw();
            						}
            					}
            				}
            			}
HXLINE(  53)			::animate::FlxSymbol_obj::nestedShit->clear();
            		}
            	}


void FlxAnimate_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_6d7628b6499f5178_66_update)
HXLINE(  67)		this->super::update(elapsed);
HXLINE(  69)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  69)		if (_this->keyManager->checkStatusUnsafe(32,_this->status)) {
HXLINE(  70)			this->playingAnim = !(this->playingAnim);
            		}
HXLINE(  72)		if (this->playingAnim) {
HXLINE(  74)			 ::animate::FlxAnimate _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  74)			_hx_tmp->frameTickTypeShit = (_hx_tmp->frameTickTypeShit + elapsed);
HXLINE(  77)			if ((this->frameTickTypeShit >= ((Float)0.041666666666666664))) {
HXLINE(  79)				this->changeFrame(1);
HXLINE(  80)				this->frameTickTypeShit = ( (Float)(0) );
            			}
            		}
HXLINE(  84)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  84)		if (_this1->keyManager->checkStatusUnsafe(39,_this1->status)) {
HXLINE(  85)			this->changeFrame(1);
            		}
HXLINE(  86)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  86)		if (_this2->keyManager->checkStatusUnsafe(37,_this2->status)) {
HXLINE(  87)			this->changeFrame(-1);
            		}
            	}


 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimate_obj::fromAnimate( ::Dynamic Source,::String Description){
            	HX_GC_STACKFRAME(&_hx_pos_6d7628b6499f5178_92_fromAnimate)
HXLINE(  93)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(Source,null(),null());
HXLINE(  94)		if (::hx::IsNull( graphic )) {
HXLINE(  95)			return null();
            		}
HXLINE(  97)		 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE(  98)		if (::hx::IsNotNull( frames )) {
HXLINE(  99)			return frames;
            		}
HXLINE( 101)		bool _hx_tmp;
HXDLIN( 101)		if (::hx::IsNotNull( graphic )) {
HXLINE( 101)			_hx_tmp = ::hx::IsNull( Description );
            		}
            		else {
HXLINE( 101)			_hx_tmp = true;
            		}
HXDLIN( 101)		if (_hx_tmp) {
HXLINE( 102)			return null();
            		}
HXLINE( 104)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 108)		::String json = Description;
HXLINE( 110)		::haxe::Log_obj::trace(json,::hx::SourceInfo(HX_("source/animate/FlxAnimate.hx",0d,13,cd,0a),110,HX_("animate.FlxAnimate",1c,31,61,7f),HX_("fromAnimate",57,3e,8d,12)));
HXLINE( 112)		if (::openfl::utils::Assets_obj::exists(json,null())) {
HXLINE( 113)			json = ::openfl::utils::Assets_obj::getText(json);
            		}
HXLINE( 106)		 ::Dynamic data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,json)->doParse()->__Field(HX_("ATLAS",2b,85,cb,a4),::hx::paccDynamic);
HXLINE( 117)		{
HXLINE( 117)			int _g = 0;
HXDLIN( 117)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(data->__Field(HX_("SPRITES",ae,7c,5e,df),::hx::paccDynamic)) );
HXDLIN( 117)			while((_g < _g1->get_length())){
HXLINE( 117)				 ::Dynamic sprite = _g1->__get(_g);
HXDLIN( 117)				_g = (_g + 1);
HXLINE( 120)				 ::Dynamic swagSprite = sprite->__Field(HX_("SPRITE",05,88,18,76),::hx::paccDynamic);
HXLINE( 122)				Float X = ( (Float)(swagSprite->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 122)				Float Y = ( (Float)(swagSprite->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 122)				Float Width = ( (Float)(swagSprite->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) );
HXDLIN( 122)				Float Height = ( (Float)(swagSprite->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) );
HXDLIN( 122)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 122)				_this->x = X;
HXDLIN( 122)				_this->y = Y;
HXDLIN( 122)				_this->width = Width;
HXDLIN( 122)				_this->height = Height;
HXDLIN( 122)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 122)				rect->_inPool = false;
HXDLIN( 122)				 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 124)				 ::openfl::geom::Rectangle size =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,rect1->width,rect1->height);
HXLINE( 126)				Float X1 = -(size->get_left());
HXDLIN( 126)				Float Y1 = -(size->get_top());
HXDLIN( 126)				 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 126)				point->_inPool = false;
HXDLIN( 126)				 ::flixel::math::FlxPoint offset = point;
HXLINE( 127)				Float X2 = size->width;
HXDLIN( 127)				Float Y2 = size->height;
HXDLIN( 127)				 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X2,Y2);
HXDLIN( 127)				point1->_inPool = false;
HXDLIN( 127)				 ::flixel::math::FlxPoint sourceSize = point1;
HXLINE( 129)				frames->addAtlasFrame(rect1,sourceSize,offset,( (::String)(swagSprite->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),null(),null(),null());
            			}
            		}
HXLINE( 132)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimate_obj,fromAnimate,return )


::hx::ObjectPtr< FlxAnimate_obj > FlxAnimate_obj::__new(Float x,Float y) {
	::hx::ObjectPtr< FlxAnimate_obj > __this = new FlxAnimate_obj();
	__this->__construct(x,y);
	return __this;
}

::hx::ObjectPtr< FlxAnimate_obj > FlxAnimate_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y) {
	FlxAnimate_obj *__this = (FlxAnimate_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxAnimate_obj), true, "animate.FlxAnimate"));
	*(void **)__this = FlxAnimate_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

FlxAnimate_obj::FlxAnimate_obj()
{
}

void FlxAnimate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAnimate);
	HX_MARK_MEMBER_NAME(loadedQueue,"loadedQueue");
	HX_MARK_MEMBER_NAME(swagFrames,"swagFrames");
	HX_MARK_MEMBER_NAME(curFrame,"curFrame");
	HX_MARK_MEMBER_NAME(playingAnim,"playingAnim");
	HX_MARK_MEMBER_NAME(frameTickTypeShit,"frameTickTypeShit");
	HX_MARK_MEMBER_NAME(animFrameRate,"animFrameRate");
	 ::animate::FlxSymbol_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxAnimate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(loadedQueue,"loadedQueue");
	HX_VISIT_MEMBER_NAME(swagFrames,"swagFrames");
	HX_VISIT_MEMBER_NAME(curFrame,"curFrame");
	HX_VISIT_MEMBER_NAME(playingAnim,"playingAnim");
	HX_VISIT_MEMBER_NAME(frameTickTypeShit,"frameTickTypeShit");
	HX_VISIT_MEMBER_NAME(animFrameRate,"animFrameRate");
	 ::animate::FlxSymbol_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxAnimate_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curFrame") ) { return ::hx::Val( curFrame ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"swagFrames") ) { return ::hx::Val( swagFrames ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loadedQueue") ) { return ::hx::Val( loadedQueue ); }
		if (HX_FIELD_EQ(inName,"playingAnim") ) { return ::hx::Val( playingAnim ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"animFrameRate") ) { return ::hx::Val( animFrameRate ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"frameTickTypeShit") ) { return ::hx::Val( frameTickTypeShit ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxAnimate_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"fromAnimate") ) { outValue = fromAnimate_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxAnimate_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"curFrame") ) { curFrame=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"swagFrames") ) { swagFrames=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loadedQueue") ) { loadedQueue=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playingAnim") ) { playingAnim=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"animFrameRate") ) { animFrameRate=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"frameTickTypeShit") ) { frameTickTypeShit=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxAnimate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("loadedQueue",4c,83,0c,58));
	outFields->push(HX_("swagFrames",d0,d1,05,b8));
	outFields->push(HX_("curFrame",8d,72,31,4e));
	outFields->push(HX_("playingAnim",9f,10,2a,fa));
	outFields->push(HX_("frameTickTypeShit",e4,4b,3a,45));
	outFields->push(HX_("animFrameRate",5c,a1,17,44));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxAnimate_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxAnimate_obj,loadedQueue),HX_("loadedQueue",4c,83,0c,58)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxAnimate_obj,swagFrames),HX_("swagFrames",d0,d1,05,b8)},
	{::hx::fsInt,(int)offsetof(FlxAnimate_obj,curFrame),HX_("curFrame",8d,72,31,4e)},
	{::hx::fsBool,(int)offsetof(FlxAnimate_obj,playingAnim),HX_("playingAnim",9f,10,2a,fa)},
	{::hx::fsFloat,(int)offsetof(FlxAnimate_obj,frameTickTypeShit),HX_("frameTickTypeShit",e4,4b,3a,45)},
	{::hx::fsInt,(int)offsetof(FlxAnimate_obj,animFrameRate),HX_("animFrameRate",5c,a1,17,44)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxAnimate_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxAnimate_obj_sMemberFields[] = {
	HX_("loadedQueue",4c,83,0c,58),
	HX_("swagFrames",d0,d1,05,b8),
	HX_("draw",04,2c,70,42),
	HX_("curFrame",8d,72,31,4e),
	HX_("playingAnim",9f,10,2a,fa),
	HX_("frameTickTypeShit",e4,4b,3a,45),
	HX_("animFrameRate",5c,a1,17,44),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class FlxAnimate_obj::__mClass;

static ::String FlxAnimate_obj_sStaticFields[] = {
	HX_("fromAnimate",57,3e,8d,12),
	::String(null())
};

void FlxAnimate_obj::__register()
{
	FlxAnimate_obj _hx_dummy;
	FlxAnimate_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("animate.FlxAnimate",1c,31,61,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxAnimate_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxAnimate_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxAnimate_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxAnimate_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAnimate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAnimate_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace animate
