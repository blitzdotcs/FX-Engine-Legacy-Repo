// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_CharacterSelectState
#include <CharacterSelectState.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0875054186ee246f_27_new,"CharacterSelectState","new",0xc57c275e,"CharacterSelectState.new","CharacterSelectState.hx",27,0x65e86dd2)
static const ::String _hx_array_data_fd09e06c_1[] = {
	HX_("Boyfriend",4a,09,8b,88),HX_("Pico's school fnf",81,cd,fb,c9),HX_("Newgrounds fnf tankguy",8b,a3,8a,10),
};
static const ::String _hx_array_data_fd09e06c_2[] = {
	HX_("bf",c4,55,00,00),HX_("pico",e5,e8,57,4a),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0875054186ee246f_55_create,"CharacterSelectState","create",0xe02502be,"CharacterSelectState.create","CharacterSelectState.hx",55,0x65e86dd2)
HX_LOCAL_STACK_FRAME(_hx_pos_0875054186ee246f_120_update,"CharacterSelectState","update",0xeb1b21cb,"CharacterSelectState.update","CharacterSelectState.hx",120,0x65e86dd2)
HX_LOCAL_STACK_FRAME(_hx_pos_0875054186ee246f_159_update,"CharacterSelectState","update",0xeb1b21cb,"CharacterSelectState.update","CharacterSelectState.hx",159,0x65e86dd2)
HX_LOCAL_STACK_FRAME(_hx_pos_0875054186ee246f_175_changeSelection,"CharacterSelectState","changeSelection",0x090374ba,"CharacterSelectState.changeSelection","CharacterSelectState.hx",175,0x65e86dd2)
HX_LOCAL_STACK_FRAME(_hx_pos_0875054186ee246f_210_charCheck,"CharacterSelectState","charCheck",0x8a67cb90,"CharacterSelectState.charCheck","CharacterSelectState.hx",210,0x65e86dd2)

void CharacterSelectState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_0875054186ee246f_27_new)
HXLINE(  46)		this->names = ::Array_obj< ::String >::fromData( _hx_array_data_fd09e06c_1,3);
HXLINE(  44)		this->iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  43)		this->doesntExist = false;
HXLINE(  42)		this->alreadySelected = false;
HXLINE(  36)		this->tagertY = ((Float)0);
HXLINE(  30)		this->curSelected = 0;
HXLINE(  29)		this->menuItems = ::Array_obj< ::String >::fromData( _hx_array_data_fd09e06c_2,2);
HXLINE(  27)		super::__construct(TransIn,TransOut);
            	}

Dynamic CharacterSelectState_obj::__CreateEmpty() { return new CharacterSelectState_obj; }

void *CharacterSelectState_obj::_hx_vtable = 0;

Dynamic CharacterSelectState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterSelectState_obj > _hx_result = new CharacterSelectState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CharacterSelectState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x06f5a0bc) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x06f5a0bc;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CharacterSelectState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_0875054186ee246f_55_create)
HXLINE(  56)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  56)		::String library = null();
HXDLIN(  56)		this->menuBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("BG4",cf,52,32,00)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  57)		 ::flixel::FlxSprite _hx_tmp1 = this->menuBG;
HXDLIN(  57)		_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->menuBG->get_width() * ((Float)1.1))),null());
HXLINE(  58)		this->menuBG->updateHitbox();
HXLINE(  59)		{
HXLINE(  59)			 ::flixel::FlxSprite _this = this->menuBG;
HXDLIN(  59)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  59)			bool _hx_tmp2;
HXDLIN(  59)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  59)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE(  59)					_hx_tmp2 = false;
            				}
            			}
HXDLIN(  59)			if (_hx_tmp2) {
HXLINE(  59)				int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(  59)				_this->set_x(((( (Float)(_hx_tmp3) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  59)			bool _hx_tmp4;
HXDLIN(  59)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  59)					_hx_tmp4 = true;
            				}
            				break;
            				default:{
HXLINE(  59)					_hx_tmp4 = false;
            				}
            			}
HXDLIN(  59)			if (_hx_tmp4) {
HXLINE(  59)				int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN(  59)				_this->set_y(((( (Float)(_hx_tmp5) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  60)		this->menuBG->set_antialiasing(true);
HXLINE(  61)		this->add(this->menuBG);
HXLINE(  63)		this->grpMenu =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  64)		this->add(this->grpMenu);
HXLINE(  66)		this->grpMenuImage =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  67)		this->add(this->grpMenuImage);
HXLINE(  69)		{
HXLINE(  69)			int _g = 0;
HXDLIN(  69)			int _g1 = this->menuItems->length;
HXDLIN(  69)			while((_g < _g1)){
HXLINE(  69)				_g = (_g + 1);
HXDLIN(  69)				int i = (_g - 1);
HXLINE(  71)				 ::Alphabet songText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(170) ),( (Float)(((70 * i) + 230)) ),this->menuItems->__get(i),true,false);
HXLINE(  72)				songText->isMenuItem = true;
HXLINE(  73)				songText->targetY = ( (Float)(i) );
HXLINE(  74)				this->grpMenu->add(songText).StaticCast<  ::Alphabet >();
HXLINE(  78)				 ::Boyfriend icon =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),this->menuItems->__get(i));
HXLINE(  80)				icon->sprTracker = songText;
HXLINE(  81)				icon->scale->set(((Float)0.8),((Float)0.8));
HXLINE(  84)				this->iconArray->push(icon);
HXLINE(  85)				this->add(icon);
            			}
            		}
HXLINE(  88)		this->txtDescription =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.075)),(this->menuBG->y + 200),0,HX_("",00,00,00,00),32,null());
HXLINE(  89)		this->txtDescription->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  90)		this->txtDescription->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),32,null(),null(),null(),null(),null());
HXLINE(  91)		{
HXLINE(  91)			 ::flixel::text::FlxText _this1 = this->txtDescription;
HXDLIN(  91)			_this1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(  91)			_this1->set_borderColor(-16777216);
HXDLIN(  91)			_this1->set_borderSize(((Float)1.5));
HXDLIN(  91)			_this1->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(  92)		this->txtDescription->set_color(-1);
HXLINE(  93)		this->add(this->txtDescription);
HXLINE( 103)		 ::Alphabet charSelHeaderText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(50) ),HX_("Character Select",d3,1e,ae,df),true,false);
HXLINE( 104)		{
HXLINE( 104)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 104)			if (::hx::IsNull( axes1 )) {
HXLINE( 104)				axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 104)			bool _hx_tmp6;
HXDLIN( 104)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 104)					_hx_tmp6 = true;
            				}
            				break;
            				default:{
HXLINE( 104)					_hx_tmp6 = false;
            				}
            			}
HXDLIN( 104)			if (_hx_tmp6) {
HXLINE( 104)				int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN( 104)				charSelHeaderText->set_x(((( (Float)(_hx_tmp7) ) - charSelHeaderText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 104)			bool _hx_tmp8;
HXDLIN( 104)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 104)					_hx_tmp8 = true;
            				}
            				break;
            				default:{
HXLINE( 104)					_hx_tmp8 = false;
            				}
            			}
HXDLIN( 104)			if (_hx_tmp8) {
HXLINE( 104)				int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN( 104)				charSelHeaderText->set_y(((( (Float)(_hx_tmp9) ) - charSelHeaderText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 105)		this->add(charSelHeaderText);
HXLINE( 107)		this->txtOptionTitle =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),10,0,HX_("",00,00,00,00),32,null());
HXLINE( 108)		this->txtOptionTitle->setFormat(HX_("assets/fonts/vcr.ttf",46,38,26,7e),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 109)		this->txtOptionTitle->set_alpha(((Float)0.7));
HXLINE( 110)		this->add(this->txtOptionTitle);
HXLINE( 112)		this->changeSelection(null());
HXLINE( 114)		this->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >()));
HXLINE( 116)		this->super::create();
            	}


void CharacterSelectState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_0875054186ee246f_120_update)
HXLINE( 121)		 ::flixel::text::FlxText _hx_tmp = this->txtOptionTitle;
HXDLIN( 121)		_hx_tmp->set_text(this->names->__get(this->curSelected).toUpperCase());
HXLINE( 122)		 ::flixel::text::FlxText _hx_tmp1 = this->txtOptionTitle;
HXDLIN( 122)		int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 122)		_hx_tmp1->set_x((( (Float)(_hx_tmp2) ) - (this->txtOptionTitle->get_width() + 10)));
HXLINE( 123)		if ((this->txtOptionTitle->text == HX_("",00,00,00,00))) {
HXLINE( 125)			::haxe::Log_obj::trace(HX_("",00,00,00,00),::hx::SourceInfo(HX_("source/CharacterSelectState.hx",5e,bd,06,34),125,HX_("CharacterSelectState",6c,e0,09,fd),HX_("update",09,86,05,87)));
HXLINE( 126)			this->txtOptionTitle->set_text(HX_("",00,00,00,00));
            		}
HXLINE( 129)		bool _hx_tmp3;
HXDLIN( 129)		bool _hx_tmp4;
HXDLIN( 129)		if ((this->iconArray->__get(this->curSelected).StaticCast<  ::Boyfriend >()->animation->_curAnim->name == HX_("idle",14,a7,b3,45))) {
HXLINE( 129)			_hx_tmp4 = this->iconArray->__get(this->curSelected).StaticCast<  ::Boyfriend >()->animation->_curAnim->finished;
            		}
            		else {
HXLINE( 129)			_hx_tmp4 = false;
            		}
HXDLIN( 129)		if (_hx_tmp4) {
HXLINE( 129)			_hx_tmp3 = this->doesntExist;
            		}
            		else {
HXLINE( 129)			_hx_tmp3 = false;
            		}
HXDLIN( 129)		if (_hx_tmp3) {
HXLINE( 130)			this->iconArray->__get(this->curSelected).StaticCast<  ::Boyfriend >()->playAnim(HX_("idle",14,a7,b3,45),true,null(),null());
            		}
HXLINE( 132)		bool upP = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXLINE( 133)		bool downP = ::PlayerSettings_obj::player1->controls->_rightP->check();
HXLINE( 134)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 136)		if (!(this->alreadySelected)) {
HXLINE( 138)			if (upP) {
HXLINE( 140)				this->changeSelection(-1);
            			}
HXLINE( 143)			if (downP) {
HXLINE( 145)				this->changeSelection(1);
            			}
HXLINE( 148)			if (accepted) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_0875054186ee246f_159_update)
HXLINE( 159)					 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN( 159)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 159)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 150)				this->alreadySelected = true;
HXLINE( 151)				::String daSelected = this->menuItems->__get(this->curSelected);
HXLINE( 152)				::PlayState_obj::hasPlayedOnce = true;
HXLINE( 153)				if ((this->menuItems->__get(this->curSelected) != HX_("bf",c4,55,00,00))) {
HXLINE( 154)					::PlayState_obj::SONG->__SetField(HX_("player1",b0,09,15,8a),daSelected,::hx::paccDynamic);
            				}
HXLINE( 156)				::flixel::effects::FlxFlicker_obj::flicker(this->iconArray->__get(this->curSelected).StaticCast<  ::Boyfriend >(),0,null(),null(),null(),null(),null());
HXLINE( 157)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0()),null());
            			}
HXLINE( 163)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 164)				if (::PlayState_obj::isStoryMode) {
HXLINE( 165)					 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 165)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 165)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				else {
HXLINE( 167)					 ::flixel::FlxState nextState1 =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 167)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE( 167)						::flixel::FlxG_obj::game->_requestedState = nextState1;
            					}
            				}
            			}
            		}
HXLINE( 171)		this->super::update(elapsed);
            	}


void CharacterSelectState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_0875054186ee246f_175_changeSelection)
HXLINE( 176)		 ::CharacterSelectState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 176)		_hx_tmp->curSelected = (_hx_tmp->curSelected + change);
HXLINE( 178)		if ((this->curSelected < 0)) {
HXLINE( 179)			this->curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 180)		if ((this->curSelected >= this->menuItems->length)) {
HXLINE( 181)			this->curSelected = 0;
            		}
HXLINE( 183)		int otherInt = 0;
HXLINE( 185)		{
HXLINE( 185)			int _g = 0;
HXDLIN( 185)			int _g1 = this->iconArray->length;
HXDLIN( 185)			while((_g < _g1)){
HXLINE( 185)				_g = (_g + 1);
HXDLIN( 185)				int i = (_g - 1);
HXLINE( 187)				this->iconArray->__get(i).StaticCast<  ::Boyfriend >()->set_alpha(( (Float)(1) ));
            			}
            		}
HXLINE( 190)		this->iconArray->__get(this->curSelected).StaticCast<  ::Boyfriend >()->set_alpha(( (Float)(1) ));
HXLINE( 192)		{
HXLINE( 192)			int _g2 = 0;
HXDLIN( 192)			::Array< ::Dynamic> _g3 = this->grpMenu->members;
HXDLIN( 192)			while((_g2 < _g3->length)){
HXLINE( 192)				 ::Alphabet item = _g3->__get(_g2).StaticCast<  ::Alphabet >();
HXDLIN( 192)				_g2 = (_g2 + 1);
HXLINE( 194)				item->targetY = ( (Float)((otherInt - this->curSelected)) );
HXLINE( 195)				otherInt = (otherInt + 1);
HXLINE( 197)				item->set_alpha(( (Float)(0) ));
HXLINE( 200)				bool _hx_tmp1 = (item->targetY == 0);
            			}
            		}
HXLINE( 206)		this->charCheck();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CharacterSelectState_obj,changeSelection,(void))

void CharacterSelectState_obj::charCheck(){
            	HX_GC_STACKFRAME(&_hx_pos_0875054186ee246f_210_charCheck)
HXLINE( 211)		this->doesntExist = false;
HXLINE( 212)		::String daSelected = this->menuItems->__get(this->curSelected);
HXLINE( 213)		int storedColor = 16777215;
HXLINE( 214)		this->remove(this->icon,null());
HXLINE( 216)		::String _hx_switch_0 = daSelected;
            		if (  (_hx_switch_0==HX_("bf",c4,55,00,00)) ){
HXLINE( 219)			this->menuBG->loadGraphic(HX_("BG2",cd,52,32,00),null(),null(),null(),null(),null());
HXLINE( 220)			this->menuBG->set_color(8900331);
HXLINE( 218)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 222)			this->menuBG->loadGraphic(HX_("BG1",cc,52,32,00),null(),null(),null(),null(),null());
HXLINE( 223)			this->menuBG->set_color(16711935);
HXLINE( 221)			goto _hx_goto_10;
            		}
            		/* default */{
HXLINE( 225)			this->menuBG->loadGraphic(HX_("BG",c5,39,00,00),null(),null(),null(),null(),null());
HXLINE( 226)			this->menuBG->set_color(16777215);
            		}
            		_hx_goto_10:;
HXLINE( 232)		this->doesntExist = true;
HXLINE( 234)		 ::flixel::FlxSprite healthBarBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)),null())->loadGraphic(HX_("assets/shared/images/healthBar.png",99,ac,c8,47),null(),null(),null(),null(),null());
HXLINE( 235)		{
HXLINE( 235)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 235)			if (::hx::IsNull( axes )) {
HXLINE( 235)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 235)			bool _hx_tmp;
HXDLIN( 235)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 235)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 235)					_hx_tmp = false;
            				}
            			}
HXDLIN( 235)			if (_hx_tmp) {
HXLINE( 235)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 235)				healthBarBG->set_x(((( (Float)(_hx_tmp1) ) - healthBarBG->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 235)			bool _hx_tmp2;
HXDLIN( 235)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 235)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE( 235)					_hx_tmp2 = false;
            				}
            			}
HXDLIN( 235)			if (_hx_tmp2) {
HXLINE( 235)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 235)				healthBarBG->set_y(((( (Float)(_hx_tmp3) ) - healthBarBG->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 236)		healthBarBG->scrollFactor->set(null(),null());
HXLINE( 237)		healthBarBG->set_visible(false);
HXLINE( 238)		this->add(healthBarBG);
HXLINE( 240)		Float healthBar = (healthBarBG->x + 4);
HXDLIN( 240)		Float healthBar1 = (healthBarBG->y + 4);
HXDLIN( 240)		int healthBar2 = ::Std_obj::_hx_int((healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN( 240)		 ::flixel::ui::FlxBar healthBar3 =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,healthBar,healthBar1,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),healthBar2,::Std_obj::_hx_int((healthBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE( 242)		healthBar3->scrollFactor->set(null(),null());
HXLINE( 243)		healthBar3->createFilledBar(-65536,-10027213,null(),null());
HXLINE( 244)		healthBar3->set_visible(false);
HXLINE( 246)		this->add(healthBar3);
HXLINE( 247)		this->icon =  ::HealthIcon_obj::__alloc( HX_CTX ,this->menuItems->__get(this->curSelected),true);
HXLINE( 248)		 ::HealthIcon _hx_tmp4 = this->icon;
HXDLIN( 248)		Float healthBar4 = healthBar3->y;
HXDLIN( 248)		_hx_tmp4->set_y((healthBar4 - (this->icon->get_height() / ( (Float)(2) ))));
HXLINE( 249)		{
HXLINE( 249)			 ::HealthIcon _this = this->icon;
HXDLIN( 249)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 249)			if (::hx::IsNull( axes1 )) {
HXLINE( 249)				axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 249)			bool _hx_tmp5;
HXDLIN( 249)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 249)					_hx_tmp5 = true;
            				}
            				break;
            				default:{
HXLINE( 249)					_hx_tmp5 = false;
            				}
            			}
HXDLIN( 249)			if (_hx_tmp5) {
HXLINE( 249)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN( 249)				_this->set_x(((( (Float)(_hx_tmp6) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 249)			bool _hx_tmp7;
HXDLIN( 249)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 249)					_hx_tmp7 = true;
            				}
            				break;
            				default:{
HXLINE( 249)					_hx_tmp7 = false;
            				}
            			}
HXDLIN( 249)			if (_hx_tmp7) {
HXLINE( 249)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN( 249)				_this->set_y(((( (Float)(_hx_tmp8) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 250)		this->icon->setGraphicSize(-4,null());
HXLINE( 251)		 ::HealthIcon fh = this->icon;
HXDLIN( 251)		fh->set_y((fh->y - ( (Float)(20) )));
HXLINE( 252)		this->add(this->icon);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterSelectState_obj,charCheck,(void))

::Array< ::Dynamic> CharacterSelectState_obj::characterShit;


::hx::ObjectPtr< CharacterSelectState_obj > CharacterSelectState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CharacterSelectState_obj > __this = new CharacterSelectState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CharacterSelectState_obj > CharacterSelectState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CharacterSelectState_obj *__this = (CharacterSelectState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterSelectState_obj), true, "CharacterSelectState"));
	*(void **)__this = CharacterSelectState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CharacterSelectState_obj::CharacterSelectState_obj()
{
}

void CharacterSelectState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterSelectState);
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(txtDescription,"txtDescription");
	HX_MARK_MEMBER_NAME(shitCharacter,"shitCharacter");
	HX_MARK_MEMBER_NAME(shitCharacterBetter,"shitCharacterBetter");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(menuBG,"menuBG");
	HX_MARK_MEMBER_NAME(tagertY,"tagertY");
	HX_MARK_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_MARK_MEMBER_NAME(grpMenu,"grpMenu");
	HX_MARK_MEMBER_NAME(grpMenuImage,"grpMenuImage");
	HX_MARK_MEMBER_NAME(alreadySelected,"alreadySelected");
	HX_MARK_MEMBER_NAME(doesntExist,"doesntExist");
	HX_MARK_MEMBER_NAME(iconArray,"iconArray");
	HX_MARK_MEMBER_NAME(names,"names");
	HX_MARK_MEMBER_NAME(txtOptionTitle,"txtOptionTitle");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterSelectState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(txtDescription,"txtDescription");
	HX_VISIT_MEMBER_NAME(shitCharacter,"shitCharacter");
	HX_VISIT_MEMBER_NAME(shitCharacterBetter,"shitCharacterBetter");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(menuBG,"menuBG");
	HX_VISIT_MEMBER_NAME(tagertY,"tagertY");
	HX_VISIT_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_VISIT_MEMBER_NAME(grpMenu,"grpMenu");
	HX_VISIT_MEMBER_NAME(grpMenuImage,"grpMenuImage");
	HX_VISIT_MEMBER_NAME(alreadySelected,"alreadySelected");
	HX_VISIT_MEMBER_NAME(doesntExist,"doesntExist");
	HX_VISIT_MEMBER_NAME(iconArray,"iconArray");
	HX_VISIT_MEMBER_NAME(names,"names");
	HX_VISIT_MEMBER_NAME(txtOptionTitle,"txtOptionTitle");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterSelectState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"names") ) { return ::hx::Val( names ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"menuBG") ) { return ::hx::Val( menuBG ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tagertY") ) { return ::hx::Val( tagertY ); }
		if (HX_FIELD_EQ(inName,"grpMenu") ) { return ::hx::Val( grpMenu ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"iconArray") ) { return ::hx::Val( iconArray ); }
		if (HX_FIELD_EQ(inName,"charCheck") ) { return ::hx::Val( charCheck_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"doesntExist") ) { return ::hx::Val( doesntExist ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"grpMenuImage") ) { return ::hx::Val( grpMenuImage ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shitCharacter") ) { return ::hx::Val( shitCharacter ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"txtDescription") ) { return ::hx::Val( txtDescription ); }
		if (HX_FIELD_EQ(inName,"txtOptionTitle") ) { return ::hx::Val( txtOptionTitle ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"alreadySelected") ) { return ::hx::Val( alreadySelected ); }
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { return ::hx::Val( grpWeekCharacters ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"shitCharacterBetter") ) { return ::hx::Val( shitCharacterBetter ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CharacterSelectState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"characterShit") ) { outValue = ( characterShit ); return true; }
	}
	return false;
}

::hx::Val CharacterSelectState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::HealthIcon >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"names") ) { names=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"menuBG") ) { menuBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tagertY") ) { tagertY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpMenu") ) { grpMenu=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconArray") ) { iconArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doesntExist") ) { doesntExist=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"grpMenuImage") ) { grpMenuImage=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shitCharacter") ) { shitCharacter=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"txtDescription") ) { txtDescription=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txtOptionTitle") ) { txtOptionTitle=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"alreadySelected") ) { alreadySelected=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { grpWeekCharacters=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"shitCharacterBetter") ) { shitCharacterBetter=inValue.Cast<  ::Boyfriend >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CharacterSelectState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"characterShit") ) { characterShit=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void CharacterSelectState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("txtDescription",6c,e8,d1,f6));
	outFields->push(HX_("shitCharacter",c9,f3,d9,eb));
	outFields->push(HX_("shitCharacterBetter",d9,f5,b7,32));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("menuBG",24,65,6d,05));
	outFields->push(HX_("tagertY",6c,02,b7,31));
	outFields->push(HX_("grpWeekCharacters",83,fc,76,59));
	outFields->push(HX_("grpMenu",24,54,e5,ff));
	outFields->push(HX_("grpMenuImage",97,b8,b9,f1));
	outFields->push(HX_("alreadySelected",13,d6,4b,c5));
	outFields->push(HX_("doesntExist",f8,24,fa,eb));
	outFields->push(HX_("iconArray",60,3f,53,5f));
	outFields->push(HX_("names",c8,8f,84,96));
	outFields->push(HX_("txtOptionTitle",53,e9,46,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterSelectState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharacterSelectState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsInt,(int)offsetof(CharacterSelectState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterSelectState_obj,txtDescription),HX_("txtDescription",6c,e8,d1,f6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterSelectState_obj,shitCharacter),HX_("shitCharacter",c9,f3,d9,eb)},
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(CharacterSelectState_obj,shitCharacterBetter),HX_("shitCharacterBetter",d9,f5,b7,32)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(CharacterSelectState_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CharacterSelectState_obj,menuBG),HX_("menuBG",24,65,6d,05)},
	{::hx::fsFloat,(int)offsetof(CharacterSelectState_obj,tagertY),HX_("tagertY",6c,02,b7,31)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CharacterSelectState_obj,grpWeekCharacters),HX_("grpWeekCharacters",83,fc,76,59)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CharacterSelectState_obj,grpMenu),HX_("grpMenu",24,54,e5,ff)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CharacterSelectState_obj,grpMenuImage),HX_("grpMenuImage",97,b8,b9,f1)},
	{::hx::fsBool,(int)offsetof(CharacterSelectState_obj,alreadySelected),HX_("alreadySelected",13,d6,4b,c5)},
	{::hx::fsBool,(int)offsetof(CharacterSelectState_obj,doesntExist),HX_("doesntExist",f8,24,fa,eb)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CharacterSelectState_obj,iconArray),HX_("iconArray",60,3f,53,5f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CharacterSelectState_obj,names),HX_("names",c8,8f,84,96)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CharacterSelectState_obj,txtOptionTitle),HX_("txtOptionTitle",53,e9,46,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CharacterSelectState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &CharacterSelectState_obj::characterShit,HX_("characterShit",09,60,3f,45)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CharacterSelectState_obj_sMemberFields[] = {
	HX_("menuItems",e1,15,e5,5c),
	HX_("curSelected",fb,eb,ab,32),
	HX_("txtDescription",6c,e8,d1,f6),
	HX_("shitCharacter",c9,f3,d9,eb),
	HX_("shitCharacterBetter",d9,f5,b7,32),
	HX_("icon",79,e7,b2,45),
	HX_("menuBG",24,65,6d,05),
	HX_("tagertY",6c,02,b7,31),
	HX_("grpWeekCharacters",83,fc,76,59),
	HX_("grpMenu",24,54,e5,ff),
	HX_("grpMenuImage",97,b8,b9,f1),
	HX_("alreadySelected",13,d6,4b,c5),
	HX_("doesntExist",f8,24,fa,eb),
	HX_("iconArray",60,3f,53,5f),
	HX_("names",c8,8f,84,96),
	HX_("txtOptionTitle",53,e9,46,4a),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	HX_("charCheck",12,22,0f,ff),
	::String(null()) };

static void CharacterSelectState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CharacterSelectState_obj::characterShit,"characterShit");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CharacterSelectState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CharacterSelectState_obj::characterShit,"characterShit");
};

#endif

::hx::Class CharacterSelectState_obj::__mClass;

static ::String CharacterSelectState_obj_sStaticFields[] = {
	HX_("characterShit",09,60,3f,45),
	::String(null())
};

void CharacterSelectState_obj::__register()
{
	CharacterSelectState_obj _hx_dummy;
	CharacterSelectState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CharacterSelectState",6c,e0,09,fd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CharacterSelectState_obj::__GetStatic;
	__mClass->mSetStaticField = &CharacterSelectState_obj::__SetStatic;
	__mClass->mMarkFunc = CharacterSelectState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CharacterSelectState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterSelectState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterSelectState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CharacterSelectState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterSelectState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterSelectState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

