// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_KeyboardScheme
#include <KeyboardScheme.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_ZXNMOption
#include <ZXNMOption.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9bc5ae583b4a1ea1_70_new,"ZXNMOption","new",0xa682f3c4,"ZXNMOption.new","Options.hx",70,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_9bc5ae583b4a1ea1_76_press,"ZXNMOption","press",0xb35217e7,"ZXNMOption.press","Options.hx",76,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_9bc5ae583b4a1ea1_90_updateDisplay,"ZXNMOption","updateDisplay",0x1d33579d,"ZXNMOption.updateDisplay","Options.hx",90,0x9d9a0240)

void ZXNMOption_obj::__construct( ::Controls controls){
            	HX_STACKFRAME(&_hx_pos_9bc5ae583b4a1ea1_70_new)
HXLINE(  71)		super::__construct();
HXLINE(  72)		this->controls = controls;
            	}

Dynamic ZXNMOption_obj::__CreateEmpty() { return new ZXNMOption_obj; }

void *ZXNMOption_obj::_hx_vtable = 0;

Dynamic ZXNMOption_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ZXNMOption_obj > _hx_result = new ZXNMOption_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ZXNMOption_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x02b2315a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x02b2315a;
	} else {
		return inClassId==(int)0x27a70eb9;
	}
}

bool ZXNMOption_obj::press(){
            	HX_STACKFRAME(&_hx_pos_9bc5ae583b4a1ea1_76_press)
HXLINE(  77)		::flixel::FlxG_obj::save->data->__SetField(HX_("zxnm",7d,76,ff,50),!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("zxnm",7d,76,ff,50),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE(  79)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("zxnm",7d,76,ff,50),::hx::paccDynamic)) )) {
HXLINE(  80)			this->controls->setKeyboardScheme(::KeyboardScheme_obj::Solo_dyn(),true);
            		}
            		else {
HXLINE(  82)			this->controls->setKeyboardScheme(::KeyboardScheme_obj::Duo(true),true);
            		}
HXLINE(  84)		this->display = this->updateDisplay();
HXLINE(  85)		return true;
            	}


::String ZXNMOption_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_9bc5ae583b4a1ea1_90_updateDisplay)
HXDLIN(  90)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("zxnm",7d,76,ff,50),::hx::paccDynamic)) )) {
HXDLIN(  90)			return HX_("ZXNM",7d,3e,c0,3b);
            		}
            		else {
HXDLIN(  90)			return HX_("WASD",1b,2b,b3,39);
            		}
HXDLIN(  90)		return null();
            	}



::hx::ObjectPtr< ZXNMOption_obj > ZXNMOption_obj::__new( ::Controls controls) {
	::hx::ObjectPtr< ZXNMOption_obj > __this = new ZXNMOption_obj();
	__this->__construct(controls);
	return __this;
}

::hx::ObjectPtr< ZXNMOption_obj > ZXNMOption_obj::__alloc(::hx::Ctx *_hx_ctx, ::Controls controls) {
	ZXNMOption_obj *__this = (ZXNMOption_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ZXNMOption_obj), true, "ZXNMOption"));
	*(void **)__this = ZXNMOption_obj::_hx_vtable;
	__this->__construct(controls);
	return __this;
}

ZXNMOption_obj::ZXNMOption_obj()
{
}

void ZXNMOption_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZXNMOption);
	HX_MARK_MEMBER_NAME(controls,"controls");
	 ::Option_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ZXNMOption_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(controls,"controls");
	 ::Option_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ZXNMOption_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"press") ) { return ::hx::Val( press_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controls") ) { return ::hx::Val( controls ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ZXNMOption_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"controls") ) { controls=inValue.Cast<  ::Controls >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZXNMOption_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("controls",76,86,bc,37));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ZXNMOption_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Controls */ ,(int)offsetof(ZXNMOption_obj,controls),HX_("controls",76,86,bc,37)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ZXNMOption_obj_sStaticStorageInfo = 0;
#endif

static ::String ZXNMOption_obj_sMemberFields[] = {
	HX_("controls",76,86,bc,37),
	HX_("press",83,53,88,c8),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class ZXNMOption_obj::__mClass;

void ZXNMOption_obj::__register()
{
	ZXNMOption_obj _hx_dummy;
	ZXNMOption_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ZXNMOption",d2,01,8d,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ZXNMOption_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ZXNMOption_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ZXNMOption_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ZXNMOption_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

