// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_modding_ModIcon
#include <modding/ModIcon.h>
#endif
#ifndef INCLUDED_modding_ModList
#include <modding/ModList.h>
#endif
#ifndef INCLUDED_modding_ModsMenuStateOption
#include <modding/ModsMenuStateOption.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a32d16fd22ee55e_16_new,"modding.ModsMenuStateOption","new",0xb3cf78ba,"modding.ModsMenuStateOption.new","modding/ModsMenuStateOption.hx",16,0x9db444b7)
HX_LOCAL_STACK_FRAME(_hx_pos_0a32d16fd22ee55e_56_update,"modding.ModsMenuStateOption","update",0x39c011ef,"modding.ModsMenuStateOption.update","modding/ModsMenuStateOption.hx",56,0x9db444b7)
namespace modding{

void ModsMenuStateOption_obj::__construct(::String __o__Option_Name,::String __o__Option_Value,::hx::Null< int >  __o__Option_Row){
            		::String _Option_Name = __o__Option_Name;
            		if (::hx::IsNull(__o__Option_Name)) _Option_Name = HX_("-",2d,00,00,00);
            		::String _Option_Value = __o__Option_Value;
            		if (::hx::IsNull(__o__Option_Value)) _Option_Value = HX_("Template Mod",dc,7b,0d,15);
            		int _Option_Row = __o__Option_Row.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_0a32d16fd22ee55e_16_new)
HXLINE(  26)		this->Option_Value = HX_("Template Mod",dc,7b,0d,15);
HXLINE(  25)		this->Option_Name = HX_("-",2d,00,00,00);
HXLINE(  23)		this->Option_Row = 0;
HXLINE(  21)		this->Mod_Enabled = false;
HXLINE(  34)		super::__construct(null());
HXLINE(  36)		this->Option_Name = _Option_Name;
HXLINE(  37)		this->Option_Value = _Option_Value;
HXLINE(  38)		this->Option_Row = _Option_Row;
HXLINE(  40)		Float scale = ::Math_obj::min((((Float)9.2) / ( (Float)(this->Option_Name.length) )),( (Float)(1) ));
HXLINE(  41)		this->Alphabet_Text =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)((this->Option_Row * 100)) ),this->Option_Name,true,null());
HXLINE(  42)		this->Alphabet_Text->isMenuItem = true;
HXLINE(  43)		this->Alphabet_Text->targetY = ( (Float)(this->Option_Row) );
HXLINE(  44)		this->add(this->Alphabet_Text);
HXLINE(  46)		this->Mod_Icon =  ::modding::ModIcon_obj::__alloc( HX_CTX ,this->Option_Value);
HXLINE(  47)		this->Mod_Icon->sprTracker = this->Alphabet_Text;
HXLINE(  48)		this->add(this->Mod_Icon);
HXLINE(  50)		this->Mod_Enabled = ::modding::ModList_obj::modList->get_bool(this->Option_Value);
HXLINE(  52)		::flixel::FlxG_obj::mouse->set_visible(true);
            	}

Dynamic ModsMenuStateOption_obj::__CreateEmpty() { return new ModsMenuStateOption_obj; }

void *ModsMenuStateOption_obj::_hx_vtable = 0;

Dynamic ModsMenuStateOption_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModsMenuStateOption_obj > _hx_result = new ModsMenuStateOption_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ModsMenuStateOption_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0a6807e2) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0a6807e2;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void ModsMenuStateOption_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_0a32d16fd22ee55e_56_update)
HXLINE(  57)		this->super::update(elapsed);
HXLINE(  59)		if (this->Mod_Enabled) {
HXLINE(  61)			this->Alphabet_Text->set_color(-16744448);
            		}
            		else {
HXLINE(  65)			this->Alphabet_Text->set_color(-65536);
            		}
            	}


 ::flixel::ui::FlxButton ModsMenuStateOption_obj::enableButton;

 ::flixel::ui::FlxButton ModsMenuStateOption_obj::disableButton;


::hx::ObjectPtr< ModsMenuStateOption_obj > ModsMenuStateOption_obj::__new(::String __o__Option_Name,::String __o__Option_Value,::hx::Null< int >  __o__Option_Row) {
	::hx::ObjectPtr< ModsMenuStateOption_obj > __this = new ModsMenuStateOption_obj();
	__this->__construct(__o__Option_Name,__o__Option_Value,__o__Option_Row);
	return __this;
}

::hx::ObjectPtr< ModsMenuStateOption_obj > ModsMenuStateOption_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o__Option_Name,::String __o__Option_Value,::hx::Null< int >  __o__Option_Row) {
	ModsMenuStateOption_obj *__this = (ModsMenuStateOption_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModsMenuStateOption_obj), true, "modding.ModsMenuStateOption"));
	*(void **)__this = ModsMenuStateOption_obj::_hx_vtable;
	__this->__construct(__o__Option_Name,__o__Option_Value,__o__Option_Row);
	return __this;
}

ModsMenuStateOption_obj::ModsMenuStateOption_obj()
{
}

void ModsMenuStateOption_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ModsMenuStateOption);
	HX_MARK_MEMBER_NAME(Alphabet_Text,"Alphabet_Text");
	HX_MARK_MEMBER_NAME(Mod_Icon,"Mod_Icon");
	HX_MARK_MEMBER_NAME(Mod_Enabled,"Mod_Enabled");
	HX_MARK_MEMBER_NAME(Option_Row,"Option_Row");
	HX_MARK_MEMBER_NAME(Option_Name,"Option_Name");
	HX_MARK_MEMBER_NAME(Option_Value,"Option_Value");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ModsMenuStateOption_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(Alphabet_Text,"Alphabet_Text");
	HX_VISIT_MEMBER_NAME(Mod_Icon,"Mod_Icon");
	HX_VISIT_MEMBER_NAME(Mod_Enabled,"Mod_Enabled");
	HX_VISIT_MEMBER_NAME(Option_Row,"Option_Row");
	HX_VISIT_MEMBER_NAME(Option_Name,"Option_Name");
	HX_VISIT_MEMBER_NAME(Option_Value,"Option_Value");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ModsMenuStateOption_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"Mod_Icon") ) { return ::hx::Val( Mod_Icon ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"Option_Row") ) { return ::hx::Val( Option_Row ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Mod_Enabled") ) { return ::hx::Val( Mod_Enabled ); }
		if (HX_FIELD_EQ(inName,"Option_Name") ) { return ::hx::Val( Option_Name ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"Option_Value") ) { return ::hx::Val( Option_Value ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"Alphabet_Text") ) { return ::hx::Val( Alphabet_Text ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ModsMenuStateOption_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"enableButton") ) { outValue = ( enableButton ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"disableButton") ) { outValue = ( disableButton ); return true; }
	}
	return false;
}

::hx::Val ModsMenuStateOption_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"Mod_Icon") ) { Mod_Icon=inValue.Cast<  ::modding::ModIcon >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"Option_Row") ) { Option_Row=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Mod_Enabled") ) { Mod_Enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Option_Name") ) { Option_Name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"Option_Value") ) { Option_Value=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"Alphabet_Text") ) { Alphabet_Text=inValue.Cast<  ::Alphabet >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ModsMenuStateOption_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"enableButton") ) { enableButton=ioValue.Cast<  ::flixel::ui::FlxButton >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"disableButton") ) { disableButton=ioValue.Cast<  ::flixel::ui::FlxButton >(); return true; }
	}
	return false;
}

void ModsMenuStateOption_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("Alphabet_Text",f9,fe,3b,79));
	outFields->push(HX_("Mod_Icon",96,15,48,1b));
	outFields->push(HX_("Mod_Enabled",84,c6,b7,0e));
	outFields->push(HX_("Option_Row",10,15,7d,90));
	outFields->push(HX_("Option_Name",95,d6,45,da));
	outFields->push(HX_("Option_Value",e7,db,09,be));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ModsMenuStateOption_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(ModsMenuStateOption_obj,Alphabet_Text),HX_("Alphabet_Text",f9,fe,3b,79)},
	{::hx::fsObject /*  ::modding::ModIcon */ ,(int)offsetof(ModsMenuStateOption_obj,Mod_Icon),HX_("Mod_Icon",96,15,48,1b)},
	{::hx::fsBool,(int)offsetof(ModsMenuStateOption_obj,Mod_Enabled),HX_("Mod_Enabled",84,c6,b7,0e)},
	{::hx::fsInt,(int)offsetof(ModsMenuStateOption_obj,Option_Row),HX_("Option_Row",10,15,7d,90)},
	{::hx::fsString,(int)offsetof(ModsMenuStateOption_obj,Option_Name),HX_("Option_Name",95,d6,45,da)},
	{::hx::fsString,(int)offsetof(ModsMenuStateOption_obj,Option_Value),HX_("Option_Value",e7,db,09,be)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ModsMenuStateOption_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(void *) &ModsMenuStateOption_obj::enableButton,HX_("enableButton",d5,c8,6e,84)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(void *) &ModsMenuStateOption_obj::disableButton,HX_("disableButton",fa,9d,f5,4e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ModsMenuStateOption_obj_sMemberFields[] = {
	HX_("Alphabet_Text",f9,fe,3b,79),
	HX_("Mod_Icon",96,15,48,1b),
	HX_("Mod_Enabled",84,c6,b7,0e),
	HX_("Option_Row",10,15,7d,90),
	HX_("Option_Name",95,d6,45,da),
	HX_("Option_Value",e7,db,09,be),
	HX_("update",09,86,05,87),
	::String(null()) };

static void ModsMenuStateOption_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ModsMenuStateOption_obj::enableButton,"enableButton");
	HX_MARK_MEMBER_NAME(ModsMenuStateOption_obj::disableButton,"disableButton");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ModsMenuStateOption_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ModsMenuStateOption_obj::enableButton,"enableButton");
	HX_VISIT_MEMBER_NAME(ModsMenuStateOption_obj::disableButton,"disableButton");
};

#endif

::hx::Class ModsMenuStateOption_obj::__mClass;

static ::String ModsMenuStateOption_obj_sStaticFields[] = {
	HX_("enableButton",d5,c8,6e,84),
	HX_("disableButton",fa,9d,f5,4e),
	::String(null())
};

void ModsMenuStateOption_obj::__register()
{
	ModsMenuStateOption_obj _hx_dummy;
	ModsMenuStateOption_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modding.ModsMenuStateOption",c8,53,ca,7d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ModsMenuStateOption_obj::__GetStatic;
	__mClass->mSetStaticField = &ModsMenuStateOption_obj::__SetStatic;
	__mClass->mMarkFunc = ModsMenuStateOption_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ModsMenuStateOption_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModsMenuStateOption_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModsMenuStateOption_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ModsMenuStateOption_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModsMenuStateOption_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModsMenuStateOption_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modding
