// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_modding_ModList
#include <modding/ModList.h>
#endif
#ifndef INCLUDED_modding_PolymodHandler
#include <modding/PolymodHandler.h>
#endif
#ifndef INCLUDED_polymod_ModMetadata
#include <polymod/ModMetadata.h>
#endif
#ifndef INCLUDED_polymod_Polymod
#include <polymod/Polymod.h>
#endif
#ifndef INCLUDED_polymod_PolymodError
#include <polymod/PolymodError.h>
#endif
#ifndef INCLUDED_polymod_fs_IFileSystem
#include <polymod/fs/IFileSystem.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_be0e024591a2fbe3_20_loadMods,"modding.PolymodHandler","loadMods",0x8b003223,"modding.PolymodHandler.loadMods","modding/PolymodHandler.hx",20,0x3a06be5b)
HX_LOCAL_STACK_FRAME(_hx_pos_be0e024591a2fbe3_13_loadMods,"modding.PolymodHandler","loadMods",0x8b003223,"modding.PolymodHandler.loadMods","modding/PolymodHandler.hx",13,0x3a06be5b)
HX_LOCAL_STACK_FRAME(_hx_pos_be0e024591a2fbe3_38_loadModMetadata,"modding.PolymodHandler","loadModMetadata",0xe95207df,"modding.PolymodHandler.loadModMetadata","modding/PolymodHandler.hx",38,0x3a06be5b)
HX_LOCAL_STACK_FRAME(_hx_pos_be0e024591a2fbe3_33_loadModMetadata,"modding.PolymodHandler","loadModMetadata",0xe95207df,"modding.PolymodHandler.loadModMetadata","modding/PolymodHandler.hx",33,0x3a06be5b)
HX_LOCAL_STACK_FRAME(_hx_pos_be0e024591a2fbe3_10_boot,"modding.PolymodHandler","boot",0x6d94eb9e,"modding.PolymodHandler.boot","modding/PolymodHandler.hx",10,0x3a06be5b)
namespace modding{

void PolymodHandler_obj::__construct() { }

Dynamic PolymodHandler_obj::__CreateEmpty() { return new PolymodHandler_obj; }

void *PolymodHandler_obj::_hx_vtable = 0;

Dynamic PolymodHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PolymodHandler_obj > _hx_result = new PolymodHandler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PolymodHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x242f5c70;
}

::String PolymodHandler_obj::swagMeta;

::Array< ::String > PolymodHandler_obj::metadataArrays;

void PolymodHandler_obj::loadMods(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::polymod::PolymodError error){
            			HX_GC_STACKFRAME(&_hx_pos_be0e024591a2fbe3_20_loadMods)
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_be0e024591a2fbe3_13_loadMods)
HXLINE(  14)		::modding::PolymodHandler_obj::loadModMetadata();
HXLINE(  18)		::Array< ::String > _hx_tmp = ::modding::ModList_obj::getActiveMods(::modding::PolymodHandler_obj::metadataArrays);
HXLINE(  24)		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  24)		_g->set(HX_("songs",fe,36,c7,80),HX_("songs",fe,36,c7,80));
HXDLIN(  24)		_g->set(HX_("data",2a,56,63,42),HX_("data",2a,56,63,42));
HXDLIN(  24)		_g->set(HX_("fonts",c4,b7,91,04),HX_("fonts",c4,b7,91,04));
HXDLIN(  24)		_g->set(HX_("characters",aa,58,ce,55),HX_("characters",aa,58,ce,55));
HXDLIN(  24)		_g->set(HX_("scripts",08,fc,e3,2c),HX_("scripts",08,fc,e3,2c));
HXDLIN(  24)		_g->set(HX_("locales",99,92,c6,2d),HX_("locales",99,92,c6,2d));
HXDLIN(  24)		_g->set(HX_("music",a5,d0,5a,10),HX_("music",a5,d0,5a,10));
HXDLIN(  24)		_g->set(HX_("sounds",c4,a8,2e,32),HX_("sounds",c4,a8,2e,32));
HXDLIN(  24)		_g->set(HX_("images",b8,50,92,fe),HX_("images",b8,50,92,fe));
HXDLIN(  24)		_g->set(HX_("videos",98,d7,95,e5),HX_("videos",98,d7,95,e5));
HXDLIN(  24)		_g->set(HX_("shaders",ae,81,86,5f),HX_("shaders",ae,81,86,5f));
HXLINE(  16)		::polymod::Polymod_obj::init( ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("errorCallback",ad,29,bf,d7), ::Dynamic(new _hx_Closure_0()))
            			->setFixed(1,HX_("modRoot",04,ba,da,e0),HX_("mods/",9e,2f,58,0c))
            			->setFixed(2,HX_("frameworkParams",64,76,eb,26), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("assetLibraryPaths",43,04,19,3e),_g)))
            			->setFixed(3,HX_("dirs",86,66,69,42),_hx_tmp)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PolymodHandler_obj,loadMods,(void))

void PolymodHandler_obj::loadModMetadata(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::polymod::PolymodError error){
            			HX_STACKFRAME(&_hx_pos_be0e024591a2fbe3_38_loadModMetadata)
HXLINE(  38)			::haxe::Log_obj::trace(error->message,::hx::SourceInfo(HX_("source/modding/PolymodHandler.hx",e7,08,01,88),38,HX_("modding.PolymodHandler",82,30,2c,cc),HX_("loadModMetadata",cb,cf,4d,03)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_be0e024591a2fbe3_33_loadModMetadata)
HXLINE(  34)		::modding::PolymodHandler_obj::metadataArrays = ::Array_obj< ::String >::__new(0);
HXLINE(  36)		::Array< ::Dynamic> tempArray = ::polymod::Polymod_obj::scan(HX_("mods/",9e,2f,58,0c),HX_("*.*.*",a2,34,5c,4d), ::Dynamic(new _hx_Closure_0()),null());
HXLINE(  41)		{
HXLINE(  41)			int _g = 0;
HXDLIN(  41)			while((_g < tempArray->length)){
HXLINE(  41)				 ::polymod::ModMetadata metadata = tempArray->__get(_g).StaticCast<  ::polymod::ModMetadata >();
HXDLIN(  41)				_g = (_g + 1);
HXLINE(  43)				::modding::PolymodHandler_obj::swagMeta = metadata->id;
HXLINE(  44)				::modding::PolymodHandler_obj::metadataArrays->push(metadata->id);
HXLINE(  45)				::modding::ModList_obj::modMetadatas->set(metadata->id,metadata);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PolymodHandler_obj,loadModMetadata,(void))


PolymodHandler_obj::PolymodHandler_obj()
{
}

bool PolymodHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"swagMeta") ) { outValue = ( swagMeta ); return true; }
		if (HX_FIELD_EQ(inName,"loadMods") ) { outValue = loadMods_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"metadataArrays") ) { outValue = ( metadataArrays ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadModMetadata") ) { outValue = loadModMetadata_dyn(); return true; }
	}
	return false;
}

bool PolymodHandler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"swagMeta") ) { swagMeta=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"metadataArrays") ) { metadataArrays=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PolymodHandler_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo PolymodHandler_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PolymodHandler_obj::swagMeta,HX_("swagMeta",6f,ae,39,50)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PolymodHandler_obj::metadataArrays,HX_("metadataArrays",89,91,54,ab)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void PolymodHandler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PolymodHandler_obj::swagMeta,"swagMeta");
	HX_MARK_MEMBER_NAME(PolymodHandler_obj::metadataArrays,"metadataArrays");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PolymodHandler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PolymodHandler_obj::swagMeta,"swagMeta");
	HX_VISIT_MEMBER_NAME(PolymodHandler_obj::metadataArrays,"metadataArrays");
};

#endif

::hx::Class PolymodHandler_obj::__mClass;

static ::String PolymodHandler_obj_sStaticFields[] = {
	HX_("swagMeta",6f,ae,39,50),
	HX_("metadataArrays",89,91,54,ab),
	HX_("loadMods",b7,a4,00,b9),
	HX_("loadModMetadata",cb,cf,4d,03),
	::String(null())
};

void PolymodHandler_obj::__register()
{
	PolymodHandler_obj _hx_dummy;
	PolymodHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modding.PolymodHandler",82,30,2c,cc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PolymodHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &PolymodHandler_obj::__SetStatic;
	__mClass->mMarkFunc = PolymodHandler_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PolymodHandler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< PolymodHandler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PolymodHandler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PolymodHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PolymodHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PolymodHandler_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_be0e024591a2fbe3_10_boot)
HXDLIN(  10)		metadataArrays = ::Array_obj< ::String >::__new(0);
            	}
}

} // end namespace modding
