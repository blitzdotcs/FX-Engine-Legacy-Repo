// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_modding_ModIcon
#include <modding/ModIcon.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_920a416e14f68b8b_17_new,"modding.ModIcon","new",0x7c940aff,"modding.ModIcon.new","modding/ModIcon.hx",17,0xd4150492)
HX_LOCAL_STACK_FRAME(_hx_pos_920a416e14f68b8b_40_update,"modding.ModIcon","update",0xf23e78ca,"modding.ModIcon.update","modding/ModIcon.hx",40,0xd4150492)
namespace modding{

void ModIcon_obj::__construct(::String __o_modId){
            		::String modId = __o_modId;
            		if (::hx::IsNull(__o_modId)) modId = HX_("Template Mod",dc,7b,0d,15);
            	HX_STACKFRAME(&_hx_pos_920a416e14f68b8b_17_new)
HXLINE(  18)		super::__construct(null(),null(),null());
HXLINE(  20)		 ::haxe::io::Bytes imageDataRaw = ::sys::io::File_obj::getBytes((((::Sys_obj::getCwd() + HX_("mods/",9e,2f,58,0c)) + modId) + HX_("/_polymod_icon.png",2d,47,a5,74)));
HXLINE(  21)		 ::openfl::display::BitmapData graphicData = ::openfl::display::BitmapData_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(imageDataRaw),null());
HXLINE(  23)		if (::sys::FileSystem_obj::exists((((::Sys_obj::getCwd() + HX_("mods/",9e,2f,58,0c)) + modId) + HX_("/_polymod_icon.png",2d,47,a5,74)))) {
HXLINE(  25)			this->loadGraphic(graphicData,false,0,0,false,modId);
            		}
            		else {
HXLINE(  29)			::String library = null();
HXDLIN(  29)			this->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("UI/default/unknownMod",41,2d,14,9d)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
            		}
HXLINE(  32)		this->setGraphicSize(150,150);
HXLINE(  33)		this->updateHitbox();
HXLINE(  35)		this->scrollFactor->set(null(),null());
HXLINE(  36)		this->set_antialiasing(true);
            	}

Dynamic ModIcon_obj::__CreateEmpty() { return new ModIcon_obj; }

void *ModIcon_obj::_hx_vtable = 0;

Dynamic ModIcon_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModIcon_obj > _hx_result = new ModIcon_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ModIcon_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7d6650d3 || inClassId==(int)0x7dab0655;
	}
}

void ModIcon_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_920a416e14f68b8b_40_update)
HXLINE(  41)		this->super::update(elapsed);
HXLINE(  43)		if (::hx::IsNotNull( this->sprTracker )) {
HXLINE(  44)			Float _hx_tmp = this->sprTracker->x;
HXDLIN(  44)			Float _hx_tmp1 = ((_hx_tmp + this->sprTracker->get_width()) + 10);
HXDLIN(  44)			this->setPosition(_hx_tmp1,(this->sprTracker->y - ( (Float)(30) )));
            		}
            	}



::hx::ObjectPtr< ModIcon_obj > ModIcon_obj::__new(::String __o_modId) {
	::hx::ObjectPtr< ModIcon_obj > __this = new ModIcon_obj();
	__this->__construct(__o_modId);
	return __this;
}

::hx::ObjectPtr< ModIcon_obj > ModIcon_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_modId) {
	ModIcon_obj *__this = (ModIcon_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModIcon_obj), true, "modding.ModIcon"));
	*(void **)__this = ModIcon_obj::_hx_vtable;
	__this->__construct(__o_modId);
	return __this;
}

ModIcon_obj::ModIcon_obj()
{
}

void ModIcon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ModIcon);
	HX_MARK_MEMBER_NAME(sprTracker,"sprTracker");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ModIcon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sprTracker,"sprTracker");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ModIcon_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sprTracker") ) { return ::hx::Val( sprTracker ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ModIcon_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"sprTracker") ) { sprTracker=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ModIcon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sprTracker",03,a3,e2,78));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ModIcon_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModIcon_obj,sprTracker),HX_("sprTracker",03,a3,e2,78)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ModIcon_obj_sStaticStorageInfo = 0;
#endif

static ::String ModIcon_obj_sMemberFields[] = {
	HX_("sprTracker",03,a3,e2,78),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class ModIcon_obj::__mClass;

void ModIcon_obj::__register()
{
	ModIcon_obj _hx_dummy;
	ModIcon_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modding.ModIcon",8d,1f,dd,0f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModIcon_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModIcon_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModIcon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModIcon_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modding
