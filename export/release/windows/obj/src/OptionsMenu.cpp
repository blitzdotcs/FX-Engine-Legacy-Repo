// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DownscrollOption
#include <DownscrollOption.h>
#endif
#ifndef INCLUDED_IconBopOption
#include <IconBopOption.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MiddleScrollOption
#include <MiddleScrollOption.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_OptionCatagory
#include <OptionCatagory.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_QuaverBarOption
#include <QuaverBarOption.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_ZXNMOption
#include <ZXNMOption.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b7c1b117f8362d86_17_new,"OptionsMenu","new",0x0f1d276f,"OptionsMenu.new","OptionsMenu.hx",17,0x7ae6dae1)
HX_LOCAL_STACK_FRAME(_hx_pos_b7c1b117f8362d86_43_create,"OptionsMenu","create",0x9c60a34d,"OptionsMenu.create","OptionsMenu.hx",43,0x7ae6dae1)
HX_LOCAL_STACK_FRAME(_hx_pos_b7c1b117f8362d86_78_update,"OptionsMenu","update",0xa756c25a,"OptionsMenu.update","OptionsMenu.hx",78,0x7ae6dae1)
HX_LOCAL_STACK_FRAME(_hx_pos_b7c1b117f8362d86_135_changeSelection,"OptionsMenu","changeSelection",0x61ecca4b,"OptionsMenu.changeSelection","OptionsMenu.hx",135,0x7ae6dae1)

void OptionsMenu_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_b7c1b117f8362d86_17_new)
HXLINE( 132)		this->isSettingControl = false;
HXLINE(  75)		this->isCat = false;
HXLINE(  36)		this->currentDescription = HX_("",00,00,00,00);
HXLINE(  23)		 ::OptionCatagory _hx_tmp =  ::OptionCatagory_obj::__alloc( HX_CTX ,HX_("Gameplay",06,bf,58,a5),::Array_obj< ::Dynamic>::__new(1)->init(0, ::ZXNMOption_obj::__alloc( HX_CTX ,::PlayerSettings_obj::player1->controls)));
HXLINE(  27)		 ::DownscrollOption _hx_tmp1 =  ::DownscrollOption_obj::__alloc( HX_CTX ,HX_("Change the layout of the strumline.",32,91,e6,a0));
HXLINE(  26)		 ::OptionCatagory _hx_tmp2 =  ::OptionCatagory_obj::__alloc( HX_CTX ,HX_("Appearence",80,a4,f2,39),::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp1)->init(1, ::MiddleScrollOption_obj::__alloc( HX_CTX ,HX_("Change the position of the strumline.",b1,74,49,5d))));
HXLINE(  31)		 ::QuaverBarOption _hx_tmp3 =  ::QuaverBarOption_obj::__alloc( HX_CTX ,HX_("Cooler healthBar thing",1b,e5,30,d9));
HXLINE(  22)		this->options = ::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp2)->init(2, ::OptionCatagory_obj::__alloc( HX_CTX ,HX_("Misc",0c,7f,35,33),::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp3)->init(1, ::IconBopOption_obj::__alloc( HX_CTX ,HX_("Make the icons bop with the bpm",7a,4e,1c,eb)))));
HXLINE(  20)		this->curSelected = 0;
HXLINE(  17)		super::__construct(TransIn,TransOut);
            	}

Dynamic OptionsMenu_obj::__CreateEmpty() { return new OptionsMenu_obj; }

void *OptionsMenu_obj::_hx_vtable = 0;

Dynamic OptionsMenu_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OptionsMenu_obj > _hx_result = new OptionsMenu_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool OptionsMenu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x109e893d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x109e893d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void OptionsMenu_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_b7c1b117f8362d86_43_create)
HXLINE(  44)		 ::flixel::FlxSprite menuBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  44)		::String library = null();
HXDLIN(  44)		 ::flixel::FlxSprite menuBG1 = menuBG->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  46)		menuBG1->set_color(-1412611);
HXLINE(  47)		menuBG1->setGraphicSize(::Std_obj::_hx_int((menuBG1->get_width() * ((Float)1.1))),null());
HXLINE(  48)		menuBG1->updateHitbox();
HXLINE(  49)		{
HXLINE(  49)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  49)			bool _hx_tmp;
HXDLIN(  49)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  49)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  49)					_hx_tmp = false;
            				}
            			}
HXDLIN(  49)			if (_hx_tmp) {
HXLINE(  49)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  49)				menuBG1->set_x(((( (Float)(_hx_tmp) ) - menuBG1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  49)			bool _hx_tmp1;
HXDLIN(  49)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  49)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  49)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  49)			if (_hx_tmp1) {
HXLINE(  49)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  49)				menuBG1->set_y(((( (Float)(_hx_tmp) ) - menuBG1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  50)		menuBG1->set_antialiasing(true);
HXLINE(  51)		this->add(menuBG1);
HXLINE(  53)		this->grpControls =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  54)		this->add(this->grpControls);
HXLINE(  56)		{
HXLINE(  56)			int _g = 0;
HXDLIN(  56)			int _g1 = this->options->length;
HXDLIN(  56)			while((_g < _g1)){
HXLINE(  56)				_g = (_g + 1);
HXDLIN(  56)				int i = (_g - 1);
HXLINE(  58)				 ::Alphabet controlLabel =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->options->__get(i).StaticCast<  ::OptionCatagory >()->getName(),true,false);
HXLINE(  59)				controlLabel->isMenuItem = true;
HXLINE(  60)				controlLabel->targetY = ( (Float)(i) );
HXLINE(  61)				this->grpControls->add(controlLabel).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE(  65)		this->currentDescription = HX_("none",b8,12,0a,49);
HXLINE(  67)		int _hx_tmp2 = (::flixel::FlxG_obj::height - 18);
HXDLIN(  67)		::String _hx_tmp3 = ((HX_("Offset (Left, Right): ",e9,11,cb,c4) + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)))) + HX_(" - Description - ",ca,32,1d,cd));
HXDLIN(  67)		this->versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,_hx_tmp2,0,(_hx_tmp3 + this->currentDescription),12,null());
HXLINE(  68)		this->versionShit->scrollFactor->set(null(),null());
HXLINE(  69)		this->versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  70)		this->add(this->versionShit);
HXLINE(  72)		this->super::create();
            	}


void OptionsMenu_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_b7c1b117f8362d86_78_update)
HXLINE(  79)		this->super::update(elapsed);
HXLINE(  81)		bool _hx_tmp;
HXDLIN(  81)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE(  81)			_hx_tmp = !(this->isCat);
            		}
            		else {
HXLINE(  81)			_hx_tmp = false;
            		}
HXDLIN(  81)		if (_hx_tmp) {
HXLINE(  82)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  82)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  82)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		else {
HXLINE(  83)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE(  85)				this->isCat = false;
HXLINE(  86)				this->grpControls->clear();
HXLINE(  87)				{
HXLINE(  87)					int _g = 0;
HXDLIN(  87)					int _g1 = this->options->length;
HXDLIN(  87)					while((_g < _g1)){
HXLINE(  87)						_g = (_g + 1);
HXDLIN(  87)						int i = (_g - 1);
HXLINE(  89)						 ::Alphabet controlLabel =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->options->__get(i).StaticCast<  ::OptionCatagory >()->getName(),true,false);
HXLINE(  90)						controlLabel->isMenuItem = true;
HXLINE(  91)						controlLabel->targetY = ( (Float)(i) );
HXLINE(  92)						this->grpControls->add(controlLabel).StaticCast<  ::Alphabet >();
            					}
            				}
HXLINE(  95)				this->curSelected = 0;
            			}
            		}
HXLINE(  97)		if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE(  98)			this->changeSelection(-1);
            		}
HXLINE(  99)		if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE( 100)			this->changeSelection(1);
            		}
HXLINE( 102)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 104)			if (this->isCat) {
HXLINE( 106)				if (this->currentSelectedCat->getOptions()->__get(this->curSelected).StaticCast<  ::Option >()->press()) {
HXLINE( 107)					this->grpControls->remove(Dynamic( this->grpControls->members->__get(this->curSelected)).StaticCast<  ::Alphabet >(),null()).StaticCast<  ::Alphabet >();
HXLINE( 108)					int ctrl = ((70 * this->curSelected) + 30);
HXDLIN( 108)					 ::Alphabet ctrl1 =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(ctrl) ),this->currentSelectedCat->getOptions()->__get(this->curSelected).StaticCast<  ::Option >()->getDisplay(),true,false);
HXLINE( 109)					ctrl1->isMenuItem = true;
HXLINE( 110)					this->grpControls->add(ctrl1).StaticCast<  ::Alphabet >();
            				}
            			}
            			else {
HXLINE( 115)				this->currentSelectedCat = this->options->__get(this->curSelected).StaticCast<  ::OptionCatagory >();
HXLINE( 116)				this->isCat = true;
HXLINE( 117)				this->grpControls->clear();
HXLINE( 118)				{
HXLINE( 118)					int _g = 0;
HXDLIN( 118)					int _g1 = this->currentSelectedCat->getOptions()->length;
HXDLIN( 118)					while((_g < _g1)){
HXLINE( 118)						_g = (_g + 1);
HXDLIN( 118)						int i = (_g - 1);
HXLINE( 120)						 ::Alphabet controlLabel =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->currentSelectedCat->getOptions()->__get(i).StaticCast<  ::Option >()->getDisplay(),true,false);
HXLINE( 121)						controlLabel->isMenuItem = true;
HXLINE( 122)						controlLabel->targetY = ( (Float)(i) );
HXLINE( 123)						this->grpControls->add(controlLabel).StaticCast<  ::Alphabet >();
            					}
            				}
HXLINE( 126)				this->curSelected = 0;
            			}
            		}
HXLINE( 129)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


void OptionsMenu_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_b7c1b117f8362d86_135_changeSelection)
HXLINE( 140)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 140)		_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 142)		 ::OptionsMenu _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 142)		_hx_tmp1->curSelected = (_hx_tmp1->curSelected + change);
HXLINE( 144)		if ((this->curSelected < 0)) {
HXLINE( 145)			this->curSelected = (this->grpControls->length - 1);
            		}
HXLINE( 146)		if ((this->curSelected >= this->grpControls->length)) {
HXLINE( 147)			this->curSelected = 0;
            		}
HXLINE( 149)		if (this->isCat) {
HXLINE( 150)			this->currentDescription = this->currentSelectedCat->getOptions()->__get(this->curSelected).StaticCast<  ::Option >()->getDescription();
            		}
            		else {
HXLINE( 152)			this->currentDescription = HX_("Please select a catagory",a7,91,67,83);
            		}
HXLINE( 153)		 ::flixel::text::FlxText _hx_tmp2 = this->versionShit;
HXDLIN( 153)		::String _hx_tmp3 = ((HX_("Offset (Left, Right): ",e9,11,cb,c4) + ::Std_obj::string( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)))) + HX_(" - Description - ",ca,32,1d,cd));
HXDLIN( 153)		_hx_tmp2->set_text((_hx_tmp3 + this->currentDescription));
HXLINE( 157)		int bullShit = 0;
HXLINE( 159)		{
HXLINE( 159)			int _g = 0;
HXDLIN( 159)			::Array< ::Dynamic> _g1 = this->grpControls->members;
HXDLIN( 159)			while((_g < _g1->length)){
HXLINE( 159)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 159)				_g = (_g + 1);
HXLINE( 161)				item->targetY = ( (Float)((bullShit - this->curSelected)) );
HXLINE( 162)				bullShit = (bullShit + 1);
HXLINE( 164)				item->set_alpha(((Float)0.6));
HXLINE( 167)				if ((item->targetY == 0)) {
HXLINE( 169)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsMenu_obj,changeSelection,(void))


::hx::ObjectPtr< OptionsMenu_obj > OptionsMenu_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< OptionsMenu_obj > __this = new OptionsMenu_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< OptionsMenu_obj > OptionsMenu_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	OptionsMenu_obj *__this = (OptionsMenu_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OptionsMenu_obj), true, "OptionsMenu"));
	*(void **)__this = OptionsMenu_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

OptionsMenu_obj::OptionsMenu_obj()
{
}

void OptionsMenu_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OptionsMenu);
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(currentDescription,"currentDescription");
	HX_MARK_MEMBER_NAME(grpControls,"grpControls");
	HX_MARK_MEMBER_NAME(versionShit,"versionShit");
	HX_MARK_MEMBER_NAME(currentSelectedCat,"currentSelectedCat");
	HX_MARK_MEMBER_NAME(isCat,"isCat");
	HX_MARK_MEMBER_NAME(isSettingControl,"isSettingControl");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OptionsMenu_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(currentDescription,"currentDescription");
	HX_VISIT_MEMBER_NAME(grpControls,"grpControls");
	HX_VISIT_MEMBER_NAME(versionShit,"versionShit");
	HX_VISIT_MEMBER_NAME(currentSelectedCat,"currentSelectedCat");
	HX_VISIT_MEMBER_NAME(isCat,"isCat");
	HX_VISIT_MEMBER_NAME(isSettingControl,"isSettingControl");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val OptionsMenu_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isCat") ) { return ::hx::Val( isCat ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { return ::hx::Val( selector ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"grpControls") ) { return ::hx::Val( grpControls ); }
		if (HX_FIELD_EQ(inName,"versionShit") ) { return ::hx::Val( versionShit ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"isSettingControl") ) { return ::hx::Val( isSettingControl ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentDescription") ) { return ::hx::Val( currentDescription ); }
		if (HX_FIELD_EQ(inName,"currentSelectedCat") ) { return ::hx::Val( currentSelectedCat ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val OptionsMenu_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isCat") ) { isCat=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpControls") ) { grpControls=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"versionShit") ) { versionShit=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"isSettingControl") ) { isSettingControl=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentDescription") ) { currentDescription=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentSelectedCat") ) { currentSelectedCat=inValue.Cast<  ::OptionCatagory >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OptionsMenu_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("selector",1f,33,6d,b1));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("currentDescription",43,ed,b8,d6));
	outFields->push(HX_("grpControls",7b,bb,b2,d5));
	outFields->push(HX_("versionShit",f8,4e,3b,e2));
	outFields->push(HX_("currentSelectedCat",c2,90,9e,a7));
	outFields->push(HX_("isCat",4c,9e,49,c1));
	outFields->push(HX_("isSettingControl",37,39,d8,de));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OptionsMenu_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OptionsMenu_obj,selector),HX_("selector",1f,33,6d,b1)},
	{::hx::fsInt,(int)offsetof(OptionsMenu_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(OptionsMenu_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsString,(int)offsetof(OptionsMenu_obj,currentDescription),HX_("currentDescription",43,ed,b8,d6)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OptionsMenu_obj,grpControls),HX_("grpControls",7b,bb,b2,d5)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OptionsMenu_obj,versionShit),HX_("versionShit",f8,4e,3b,e2)},
	{::hx::fsObject /*  ::OptionCatagory */ ,(int)offsetof(OptionsMenu_obj,currentSelectedCat),HX_("currentSelectedCat",c2,90,9e,a7)},
	{::hx::fsBool,(int)offsetof(OptionsMenu_obj,isCat),HX_("isCat",4c,9e,49,c1)},
	{::hx::fsBool,(int)offsetof(OptionsMenu_obj,isSettingControl),HX_("isSettingControl",37,39,d8,de)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OptionsMenu_obj_sStaticStorageInfo = 0;
#endif

static ::String OptionsMenu_obj_sMemberFields[] = {
	HX_("selector",1f,33,6d,b1),
	HX_("curSelected",fb,eb,ab,32),
	HX_("options",5e,33,fe,df),
	HX_("currentDescription",43,ed,b8,d6),
	HX_("grpControls",7b,bb,b2,d5),
	HX_("versionShit",f8,4e,3b,e2),
	HX_("currentSelectedCat",c2,90,9e,a7),
	HX_("create",fc,66,0f,7c),
	HX_("isCat",4c,9e,49,c1),
	HX_("update",09,86,05,87),
	HX_("isSettingControl",37,39,d8,de),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

::hx::Class OptionsMenu_obj::__mClass;

void OptionsMenu_obj::__register()
{
	OptionsMenu_obj _hx_dummy;
	OptionsMenu_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("OptionsMenu",fd,43,a3,5d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OptionsMenu_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OptionsMenu_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptionsMenu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptionsMenu_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

