// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_extrashit_Menu
#include <extrashit/Menu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_modding_ModsMenuState
#include <modding/ModsMenuState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c7e63a2b1cce5b37_11_new,"extrashit.Menu","new",0x04dd800f,"extrashit.Menu.new","extrashit/Menu.hx",11,0x0900e860)
static const ::String _hx_array_data_a8e2cc9d_1[] = {
	HX_("Mods",91,ff,39,33),HX_("Modifiers",1c,f1,ea,79),HX_("exit",1e,f7,1d,43),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c7e63a2b1cce5b37_23_create,"extrashit.Menu","create",0x53296ead,"extrashit.Menu.create","extrashit/Menu.hx",23,0x0900e860)
HX_LOCAL_STACK_FRAME(_hx_pos_c7e63a2b1cce5b37_53_update,"extrashit.Menu","update",0x5e1f8dba,"extrashit.Menu.update","extrashit/Menu.hx",53,0x0900e860)
HX_LOCAL_STACK_FRAME(_hx_pos_c7e63a2b1cce5b37_80_changeSelection,"extrashit.Menu","changeSelection",0xbb1f92eb,"extrashit.Menu.changeSelection","extrashit/Menu.hx",80,0x0900e860)
HX_LOCAL_STACK_FRAME(_hx_pos_c7e63a2b1cce5b37_108_closeSubState,"extrashit.Menu","closeSubState",0x9157d8b8,"extrashit.Menu.closeSubState","extrashit/Menu.hx",108,0x0900e860)
namespace extrashit{

void Menu_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_c7e63a2b1cce5b37_11_new)
HXLINE(  18)		this->menuItems = ::Array_obj< ::String >::fromData( _hx_array_data_a8e2cc9d_1,3);
HXLINE(  14)		this->curSelected = 0;
HXLINE(  11)		super::__construct(TransIn,TransOut);
            	}

Dynamic Menu_obj::__CreateEmpty() { return new Menu_obj; }

void *Menu_obj::_hx_vtable = 0;

Dynamic Menu_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Menu_obj > _hx_result = new Menu_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Menu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x13911647) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x13911647;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void Menu_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_c7e63a2b1cce5b37_23_create)
HXLINE(  24)		 ::flixel::FlxSprite menuBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->loadGraphic(HX_("assets/images/menuDesat.png",d6,52,53,17),null(),null(),null(),null(),null());
HXLINE(  26)		menuBG->set_color(-1412611);
HXLINE(  27)		menuBG->setGraphicSize(::Std_obj::_hx_int((menuBG->get_width() * ((Float)1.1))),null());
HXLINE(  28)		menuBG->updateHitbox();
HXLINE(  29)		{
HXLINE(  29)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  29)			bool _hx_tmp;
HXDLIN(  29)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  29)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  29)					_hx_tmp = false;
            				}
            			}
HXDLIN(  29)			if (_hx_tmp) {
HXLINE(  29)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  29)				menuBG->set_x(((( (Float)(_hx_tmp) ) - menuBG->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  29)			bool _hx_tmp1;
HXDLIN(  29)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  29)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  29)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  29)			if (_hx_tmp1) {
HXLINE(  29)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  29)				menuBG->set_y(((( (Float)(_hx_tmp) ) - menuBG->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  30)		menuBG->set_antialiasing(true);
HXLINE(  31)		this->add(menuBG);
HXLINE(  33)		this->grpControls =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  34)		this->add(this->grpControls);
HXLINE(  36)		{
HXLINE(  36)			int _g = 0;
HXDLIN(  36)			int _g1 = this->menuItems->length;
HXDLIN(  36)			while((_g < _g1)){
HXLINE(  36)				_g = (_g + 1);
HXDLIN(  36)				int i = (_g - 1);
HXLINE(  38)				 ::Alphabet controlLabel =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->menuItems->__get(i),true,false);
HXLINE(  39)				{
HXLINE(  39)					 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  39)					bool _hx_tmp;
HXDLIN(  39)					switch((int)(axes->_hx_getIndex())){
            						case (int)0: case (int)2: {
HXLINE(  39)							_hx_tmp = true;
            						}
            						break;
            						default:{
HXLINE(  39)							_hx_tmp = false;
            						}
            					}
HXDLIN(  39)					if (_hx_tmp) {
HXLINE(  39)						int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  39)						controlLabel->set_x(((( (Float)(_hx_tmp) ) - controlLabel->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(  39)					bool _hx_tmp1;
HXDLIN(  39)					switch((int)(axes->_hx_getIndex())){
            						case (int)1: case (int)2: {
HXLINE(  39)							_hx_tmp1 = true;
            						}
            						break;
            						default:{
HXLINE(  39)							_hx_tmp1 = false;
            						}
            					}
HXDLIN(  39)					if (_hx_tmp1) {
HXLINE(  39)						int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  39)						controlLabel->set_y(((( (Float)(_hx_tmp) ) - controlLabel->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(  40)				controlLabel->set_y(( (Float)(((100 * i) + 70)) ));
HXLINE(  43)				this->grpControls->add(controlLabel).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE(  47)		this->changeSelection(null());
HXLINE(  49)		this->super::create();
            	}


void Menu_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_c7e63a2b1cce5b37_53_update)
HXLINE(  54)		this->super::update(elapsed);
HXLINE(  55)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE(  57)			::String daSelected = this->menuItems->__get(this->curSelected);
HXLINE(  59)			::String _hx_switch_0 = daSelected;
            			if (  (_hx_switch_0==HX_("Mods",91,ff,39,33)) ){
HXLINE(  62)				 ::flixel::FlxState nextState =  ::modding::ModsMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  62)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  62)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
HXDLIN(  62)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("exit",1e,f7,1d,43)) ){
HXLINE(  64)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  64)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  64)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
HXDLIN(  64)				goto _hx_goto_4;
            			}
            			_hx_goto_4:;
            		}
HXLINE(  68)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE(  69)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  69)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  69)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  72)		if (::PlayerSettings_obj::player1->controls->_upP->check()) {
HXLINE(  73)			this->changeSelection(-1);
            		}
HXLINE(  74)		if (::PlayerSettings_obj::player1->controls->_downP->check()) {
HXLINE(  75)			this->changeSelection(1);
            		}
            	}


void Menu_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_c7e63a2b1cce5b37_80_changeSelection)
HXLINE(  81)		 ::extrashit::Menu _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  81)		_hx_tmp->curSelected = (_hx_tmp->curSelected + change);
HXLINE(  83)		if ((this->curSelected < 0)) {
HXLINE(  84)			this->curSelected = (this->grpControls->length - 1);
            		}
HXLINE(  85)		if ((this->curSelected >= this->grpControls->length)) {
HXLINE(  86)			this->curSelected = 0;
            		}
HXLINE(  88)		int bullShit = 0;
HXLINE(  90)		{
HXLINE(  90)			int _g = 0;
HXDLIN(  90)			::Array< ::Dynamic> _g1 = this->grpControls->members;
HXDLIN(  90)			while((_g < _g1->length)){
HXLINE(  90)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN(  90)				_g = (_g + 1);
HXLINE(  92)				item->targetY = ( (Float)((bullShit - this->curSelected)) );
HXLINE(  93)				bullShit = (bullShit + 1);
HXLINE(  95)				item->set_alpha(((Float)0.6));
HXLINE(  98)				if ((item->targetY == 0)) {
HXLINE( 100)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Menu_obj,changeSelection,(void))

void Menu_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_c7e63a2b1cce5b37_108_closeSubState)
HXDLIN( 108)		this->super::closeSubState();
            	}



::hx::ObjectPtr< Menu_obj > Menu_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< Menu_obj > __this = new Menu_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< Menu_obj > Menu_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	Menu_obj *__this = (Menu_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Menu_obj), true, "extrashit.Menu"));
	*(void **)__this = Menu_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

Menu_obj::Menu_obj()
{
}

void Menu_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Menu);
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(grpControls,"grpControls");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(notice,"notice");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Menu_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(grpControls,"grpControls");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(notice,"notice");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Menu_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"notice") ) { return ::hx::Val( notice ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { return ::hx::Val( selector ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"grpControls") ) { return ::hx::Val( grpControls ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Menu_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"notice") ) { notice=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpControls") ) { grpControls=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Menu_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("selector",1f,33,6d,b1));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("grpControls",7b,bb,b2,d5));
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("notice",18,d8,b8,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Menu_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Menu_obj,selector),HX_("selector",1f,33,6d,b1)},
	{::hx::fsInt,(int)offsetof(Menu_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Menu_obj,grpControls),HX_("grpControls",7b,bb,b2,d5)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Menu_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Menu_obj,notice),HX_("notice",18,d8,b8,31)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Menu_obj_sStaticStorageInfo = 0;
#endif

static ::String Menu_obj_sMemberFields[] = {
	HX_("selector",1f,33,6d,b1),
	HX_("curSelected",fb,eb,ab,32),
	HX_("grpControls",7b,bb,b2,d5),
	HX_("menuItems",e1,15,e5,5c),
	HX_("notice",18,d8,b8,31),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	HX_("closeSubState",49,18,32,04),
	::String(null()) };

::hx::Class Menu_obj::__mClass;

void Menu_obj::__register()
{
	Menu_obj _hx_dummy;
	Menu_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("extrashit.Menu",9d,cc,e2,a8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Menu_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Menu_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Menu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Menu_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace extrashit
